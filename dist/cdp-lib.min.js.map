{"version":3,"sources":["dist/cdp-lib.js"],"names":["module","exports","modules","installedModules","__webpack_require__","moduleId","i","l","call","m","c","value","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","getDefault","getModuleExports","object","property","prototype","hasOwnProperty","p","s","__export","require","fs","glob","hogan","_l","_s","which","uuid","chalk","semverRegex","cli_spinner_1","Spinner","$","_window","jsdom","JSDOM","window","defaultView","root","xmldom","DOMParser","global","XMLSerializer","_m","mixin","_","__dirname","path","libs_1","_settings","force","verbose","silent","lang","_libPath","getSettings","extend","setSettings","settings","targetDir","getLibPath","TRY_COUNT","tried","Error","join","check","pathExistsSync","getTargetDir","log","message","optionalParams","length","console","debug","error","assert","test","warn","process","exit","_lang","translate","key","JSON","parse","readFileSync","toString","resouce","props","split","prop","shift","__awaiter","this","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","step","next","e","rejected","result","done","then","apply","base_1","GeneratorElectron","GeneratorBase","[object Object]","src","pkg","built","doc","task","types","srcConfig","script","stylesheet","template","taskList","config","_config","generator_electoron_1","newGeneratorDesktop","os","Utils","templatePath","copyTpl","GeneratorModule","ensureModuleProps","createDirectoryStructure","createProjectSettings","createSourceTemplate","createVisualStudioSolution","defaultDevDependencies","depends","super","concat","version","undefined","sortBy","depend","moduleName","projectName","trim","dasherize","mainBaseName","copyTplDir","rootDir","delimiters","bom","structureConfig","queryEsLintEnvParam","devDependencies","queryDependenciesParam","_module","basename","param","sampleClass","classify","sampleModule","vsParam","createGUID","projectGUID","replace","license","webpack","isEnableTool","jsGroup","relativePath","fileName","dependee","d_ts","map","min_map","minify","push","tsGroup","createProj","toXmlString","file","normalizeText","options","eol","EOL","tpl","jst","compile","render","toXmlDOM","parseXML","toXmlNode","str2XmlNode","$proj","$gpTS","$gpJS","find","last","after","formatXML","dstPath","xmlNode2Str","writeFileSync","generator_module_1","newGeneratorLibrary","GeneratorCordova","generator_cordova_1","newGeneratorMobile","GeneratorBrowser","generator_browser_1","newGeneratorWeb","generators_1","CDPLib","newGenerator","run","default","utils_1","_projectRootDir","cwd","defaultBaseStructure","stringify","action","runCreate","cyan","directory","chdir","target","dstRoot","nodir","dot","sync","forEach","dst","copySync","execCommand","stdio","spinner","stdout","data","catch","reason","base","es","extra","dependencies","progress","filter","esVersion","context","getSpinner","yellow","start","stop","queryNodeModuleLatestVersion","compileSetting","es6","node","env","tools","tool","createBase","create","createProjectDir","copyBaseStructure","copyCommonFiles","copyTaskScripts","existsSync","mkdirsSync","srcDir","dstDir","copyright","settings_1","library_1","mobile_1","desktop_1","web_1","projectType","child_process_1","handleError","format","index","spinners","fmt","idx","Math","floor","random","setSpinnerString","text","opt","tab","spaces","command","args","stderr","resolvedCommand","child","spawn","on","code","params","output","ensureFileSync","v4","toUpperCase","str","children","$xml","serializeToString","xml","pad","indent","strArr","len","_indent","match"],"mappings":"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","sourcesContent":["﻿/*!\n * cdp-lib.js 0.0.1\n *\n * Date: 2017-05-18T00:58:15.480Z\n */\n\nmodule.exports =\n/******/ (function(modules) { // webpackBootstrap\n/******/     // The module cache\n/******/     var installedModules = {};\n/******/\n/******/     // The require function\n/******/     function __webpack_require__(moduleId) {\n/******/\n/******/         // Check if module is in cache\n/******/         if(installedModules[moduleId]) {\n/******/             return installedModules[moduleId].exports;\n/******/         }\n/******/         // Create a new module (and put it into the cache)\n/******/         var module = installedModules[moduleId] = {\n/******/             i: moduleId,\n/******/             l: false,\n/******/             exports: {}\n/******/         };\n/******/\n/******/         // Execute the module function\n/******/         modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/         // Flag the module as loaded\n/******/         module.l = true;\n/******/\n/******/         // Return the exports of the module\n/******/         return module.exports;\n/******/     }\n/******/\n/******/\n/******/     // expose the modules object (__webpack_modules__)\n/******/     __webpack_require__.m = modules;\n/******/\n/******/     // expose the module cache\n/******/     __webpack_require__.c = installedModules;\n/******/\n/******/     // identity function for calling harmony imports with the correct context\n/******/     __webpack_require__.i = function(value) { return value; };\n/******/\n/******/     // define getter function for harmony exports\n/******/     __webpack_require__.d = function(exports, name, getter) {\n/******/         if(!__webpack_require__.o(exports, name)) {\n/******/             Object.defineProperty(exports, name, {\n/******/                 configurable: false,\n/******/                 enumerable: true,\n/******/                 get: getter\n/******/             });\n/******/         }\n/******/     };\n/******/\n/******/     // getDefaultExport function for compatibility with non-harmony modules\n/******/     __webpack_require__.n = function(module) {\n/******/         var getter = module && module.__esModule ?\n/******/             function getDefault() { return module['default']; } :\n/******/             function getModuleExports() { return module; };\n/******/         __webpack_require__.d(getter, 'a', getter);\n/******/         return getter;\n/******/     };\n/******/\n/******/     // Object.prototype.hasOwnProperty.call\n/******/     __webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/     // __webpack_public_path__\n/******/     __webpack_require__.p = \"\";\n/******/\n/******/     // Load entry module and return exports\n/******/     return __webpack_require__(__webpack_require__.s = 33);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(__webpack_require__(16));\n__export(__webpack_require__(15));\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports) {\n\nmodule.exports = require(\"path\");\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(__webpack_require__(3));\n__export(__webpack_require__(18));\n__export(__webpack_require__(4));\n\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst fs = __webpack_require__(22);\nexports.fs = fs;\nconst glob = __webpack_require__(23);\nexports.glob = glob;\nconst hogan = __webpack_require__(29);\nexports.hogan = hogan;\nconst _l = __webpack_require__(30);\nconst _s = __webpack_require__(31);\nconst which = __webpack_require__(27);\nexports.which = which;\nconst uuid = __webpack_require__(26);\nexports.uuid = uuid;\nconst chalk = __webpack_require__(20);\nexports.chalk = chalk;\nconst semverRegex = __webpack_require__(25);\nexports.semverRegex = semverRegex;\nconst cli_spinner_1 = __webpack_require__(21);\nexports.Spinner = cli_spinner_1.Spinner;\nconst $ = (() => {\n    const _window = (() => {\n        const jsdom = __webpack_require__(24);\n        if (\"function\" === typeof jsdom.JSDOM) {\n            return new jsdom.JSDOM().window;\n        }\n        else {\n            return jsdom.jsdom().defaultView;\n        }\n    })();\n    // patch scope:\n    ((root) => {\n        /*\n         * jsdom 9.4.0 - 9.12.0 に実装されている DOMParser は XML の serialize ができないため,\n         * xmldom に置き換える\n         * jsdom 10.1.0 まで動かないことを確認\n         */\n        const xmldom = __webpack_require__(28);\n        root.DOMParser = xmldom.DOMParser;\n        // xmldom には dom.toString() が実装されているが、global にも export する\n        global.XMLSerializer = root.XMLSerializer = xmldom.XMLSerializer;\n    })(_window);\n    return __webpack_require__(32)(_window);\n})();\nexports.$ = $;\nconst _m = _l.mixin(_s.exports());\nexports._ = _m;\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(__dirname) {\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst path = __webpack_require__(1);\nconst libs_1 = __webpack_require__(3);\nlet _settings = {\n    force: false,\n    verbose: false,\n    silent: false,\n    lang: \"en-US\",\n};\nlet _libPath; // cdp-lib の存在している path\n///////////////////////////////////////////////////////////////////////\n// exports methods:\n/**\n * 設定取得\n *\n * @return {IGlobalSettings} options ログに使用するオプション\n */\nfunction getSettings() {\n    return libs_1.$.extend({}, _settings);\n}\nexports.getSettings = getSettings;\n/**\n * 設定指定\n *\n * @param {IGlobalSettings} options ログに使用するオプション\n */\nfunction setSettings(settings) {\n    if (settings) {\n        _settings.force = settings.force || _settings.force;\n        _settings.verbose = settings.verbose || _settings.verbose;\n        _settings.silent = settings.silent || _settings.silent;\n        _settings.targetDir = settings.targetDir || _settings.targetDir;\n        _settings.lang = settings.lang || _settings.lang;\n    }\n    else {\n        _settings = {\n            force: false,\n            verbose: false,\n            silent: false,\n            lang: \"en-US\",\n        };\n    }\n}\nexports.setSettings = setSettings;\n/**\n * \"cdp-lib\" が存在するパスを取得\n *\n * @return {String} cdp-lib への path\n */\nfunction getLibPath() {\n    if (null == _libPath) {\n        const TRY_COUNT = 3;\n        let tried = 0;\n        _libPath = __dirname;\n        while (true) {\n            if (TRY_COUNT <= tried) {\n                throw Error(\"lib path is not resolved.\");\n            }\n            _libPath = path.join(_libPath, \"..\");\n            const check = path.join(_libPath, \"cdp-lib\");\n            if (libs_1.fs.pathExistsSync(check)) {\n                _libPath = check;\n                break;\n            }\n            tried++;\n        }\n    }\n    return _libPath;\n}\nexports.getLibPath = getLibPath;\n/**\n * 指定された targetDir を取得\n *\n * @return {String} targetDir への path\n */\nfunction getTargetDir() {\n    return _settings.targetDir;\n}\nexports.getTargetDir = getTargetDir;\n/**\n * ログ出力\n * console.log() と同等\n *\n * @param {String} message        出力メッセージ\n * @param {Any[]}  optionalParams 付加情報\n */\nfunction log(message, ...optionalParams) {\n    if (!_settings.silent) {\n        if (0 < optionalParams.length) {\n            console.log(message, optionalParams);\n        }\n        else {\n            console.log(message);\n        }\n    }\n}\nexports.log = log;\n/**\n * 詳細ログ出力\n * console.debug() と同等\n *\n * @param {String} message        出力メッセージ\n * @param {Any[]}  optionalParams 付加情報\n */\nfunction debug(message, ...optionalParams) {\n    if (!_settings.silent && _settings.verbose) {\n        if (0 < optionalParams.length) {\n            console.error(\"DEBUG: \" + message, optionalParams);\n        }\n        else {\n            console.error(\"DEBUG: \" + message);\n        }\n    }\n}\nexports.debug = debug;\n/**\n * 検証\n * console.assert() と同等\n *\n * @param {Boolean} test           検証する式\n * @param {String}  message        出力メッセージ\n * @param {Any[]}   optionalParams 付加情報\n */\nfunction assert(test, message, ...optionalParams) {\n    if (!test) {\n        if (_settings.force) {\n            if (0 < optionalParams.length) {\n                console.warn(message, optionalParams);\n            }\n            else {\n                console.warn(message);\n            }\n        }\n        else {\n            if (0 < optionalParams.length) {\n                console.error(message, optionalParams);\n            }\n            else {\n                console.error(message);\n            }\n            process.exit(1);\n        }\n    }\n}\nexports.assert = assert;\nlet _lang;\n/**\n * ローカライズ\n *\n * @param {String} key キー文字列\n * @return 翻訳された文字列\n */\nfunction translate(key) {\n    if (!_lang) {\n        try {\n            _lang = JSON.parse(libs_1.fs.readFileSync(path.join(getLibPath(), \"res/locales\", \"messages.\" + _settings.lang + \".json\"), \"utf8\").toString());\n        }\n        catch (error) {\n            throw Error(\"Language resource JSON parse error: \" + error.message);\n        }\n    }\n    let resouce = libs_1.$.extend({}, _lang);\n    const props = key.split(\".\");\n    while (0 < props.length) {\n        const prop = props.shift();\n        if (resouce[prop]) {\n            resouce = resouce[prop];\n        }\n        else {\n            assert(false, \"resouce not found. key: \" + key);\n            return null;\n        }\n    }\n    return resouce;\n}\nexports.translate = translate;\n\n/* WEBPACK VAR INJECTION */}.call(exports, \"/\"))\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/* tslint:disable:no-unused-variable no-unused-vars */\n/* eslint-disable no-unused-vars */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst base_1 = __webpack_require__(0);\n/**\n * @class GeneratorElectron\n * @brief Desktop Electron 用 Generator クラス\n */\nclass GeneratorElectron extends base_1.GeneratorBase {\n    ///////////////////////////////////////////////////////////////////////\n    // imprementes: GeneratorBase\n    /**\n     * 既定の directory 構造を返却\n     */\n    defaultBaseStructure() {\n        return {\n            src: \"app\",\n            pkg: \"www/app\",\n            built: \"app\",\n            doc: \"docs\",\n            task: \"tasks\",\n            test: \"tests\",\n            types: \"@types\",\n            srcConfig: {\n                script: \"scripts\",\n                stylesheet: \"stylesheets\",\n                template: \"templates\",\n            },\n        };\n    }\n    /**\n     * create action entry\n     * @param {IDesktopAppConfigration} config コンフィグ設定\n     */\n    create() {\n        return __awaiter(this, void 0, void 0, function* () {\n            // TODO:\n            return Promise.reject(\"under construction.\");\n        });\n    }\n    /**\n     * 必要とする task script 一覧を返却. action: create のときに呼ばれる\n     */\n    get taskList() {\n        return [\n            \"banner.js\",\n            \"clean.js\",\n            \"srcmap.js\",\n            \"build-ts-clean.js\",\n            \"build-ts-normalize.js\",\n        ];\n    }\n    ///////////////////////////////////////////////////////////////////////\n    // private methods:\n    /**\n     * configration にアクセス\n     */\n    get config() {\n        return this._config;\n    }\n}\nexports.GeneratorElectron = GeneratorElectron;\n\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst generator_electoron_1 = __webpack_require__(5);\n__export(__webpack_require__(5));\n/**\n * generator 生成関数\n */\nfunction newGeneratorDesktop(config) {\n    return new generator_electoron_1.GeneratorElectron(config);\n}\nexports.newGeneratorDesktop = newGeneratorDesktop;\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/* tslint:disable:no-unused-variable no-unused-vars */\n/* eslint-disable no-unused-vars */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst path = __webpack_require__(1);\nconst os = __webpack_require__(13);\nconst base_1 = __webpack_require__(0);\nconst fs = base_1.Utils.fs;\nconst $ = base_1.Utils.$;\nconst _ = base_1.Utils._;\nconst debug = base_1.Utils.debug;\nconst templatePath = base_1.Utils.templatePath;\nconst copyTpl = base_1.Utils.copyTpl;\n/**\n * @class GeneratorModule\n * @brief Library Module 用 Generator クラス\n */\nclass GeneratorModule extends base_1.GeneratorBase {\n    ///////////////////////////////////////////////////////////////////////\n    // imprementes: GeneratorBase\n    /**\n     * 既定の directory 構造を返却\n     */\n    defaultBaseStructure() {\n        return {\n            src: \"src\",\n            pkg: \"dist\",\n            built: \"built\",\n            doc: \"docs\",\n            task: \"tasks\",\n            test: \"tests\",\n            types: \"@types\",\n        };\n    }\n    /**\n     * create action entry\n     * @param {ILibraryConfigration} config コンフィグ設定\n     */\n    create() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.ensureModuleProps();\n            yield this.createDirectoryStructure();\n            yield this.createProjectSettings();\n            yield this.createSourceTemplate();\n            yield this.createVisualStudioSolution();\n        });\n    }\n    /**\n     * 必要とする task script 一覧を返却. action: create のときに呼ばれる\n     */\n    get taskList() {\n        return [\n            \"banner.js\",\n            \"clean.js\",\n            \"srcmap.js\",\n            \"build-ts-clean.js\",\n            \"build-ts-normalize.js\",\n        ];\n    }\n    ///////////////////////////////////////////////////////////////////////\n    // protected methods:\n    /**\n     * 開発時の依存モジュールリストの取得\n     * 必要に応じてオーバーライド\n     *\n     * @return {IDependency}\n     */\n    get defaultDevDependencies() {\n        const depends = super.defaultDevDependencies.concat([\n            { name: \"@types/jasmine\", version: undefined, },\n            { name: \"jasmine-node\", version: \"^2.0.0\", },\n        ]);\n        return _.sortBy(depends, (depend) => depend.name);\n    }\n    ///////////////////////////////////////////////////////////////////////\n    // private methods:\n    /**\n     * configration にアクセス\n     */\n    get config() {\n        return this._config;\n    }\n    /**\n     * module 名, main ファイル名の保証\n     * - 1: moduleName が指定されている場合は使用する\n     * - 2: projectName が使用可能な場合はそれを使用する\n     * - 3: projectName が使用不可の場合は、\"-\" つなぎ文字列を生成する\n     */\n    ensureModuleProps() {\n        // module name\n        if (null == this.config.moduleName) {\n            if (!/^.*[(\\\\|\\s|/|:|\\*|?|\\\"|<|>|\\|)].*$/.test(this.config.projectName)) {\n                this.config.moduleName = this.config.projectName;\n            }\n            else {\n                this.config.moduleName = _.trim(_.dasherize(this.config.projectName), \"-\");\n            }\n        }\n        debug(\"moduleName: \" + this.config.moduleName);\n        // main file name\n        if (null == this.config.mainBaseName) {\n            this.config.mainBaseName = this.config.moduleName;\n        }\n        debug(\"mainBaseName: \" + this.config.mainBaseName);\n    }\n    /**\n     * ディレクトリ構成情報のコピー\n     */\n    createDirectoryStructure() {\n        this.copyTplDir(\"library/structure\");\n    }\n    /**\n     * プロジェクト設定ファイルの作成\n     */\n    createProjectSettings() {\n        return __awaiter(this, void 0, void 0, function* () {\n            // project.config.js\n            copyTpl(path.join(templatePath(\"library\"), \"_project.config.js\"), path.join(this.rootDir, \"project.config.js\"), this._config, { delimiters: \"<% %>\" });\n            // main tsconfig.json\n            copyTpl(path.join(templatePath(\"library\"), \"_tsconfig.json\"), path.join(this.rootDir, \"tsconfig.json\"), this._config, { delimiters: \"<% %>\", bom: false, });\n            // test tsconfig.json\n            copyTpl(path.join(templatePath(\"library\"), \"_tsconfig.test.json\"), path.join(this.rootDir, this._config.structureConfig.test, \"jasmine\", \"tsconfig.json\"), this._config, { delimiters: \"<% %>\", bom: false, });\n            // eslintrc.json\n            copyTpl(path.join(templatePath(\"library\"), \"_eslintrc.json\"), path.join(this.rootDir, this._config.structureConfig.test, \"eslint\", \"eslintrc.json\"), this.queryEsLintEnvParam(), { delimiters: \"<% %>\", bom: false, });\n            // .gitignore\n            copyTpl(path.join(templatePath(\"library\"), \".gitignore\"), path.join(this.rootDir, \".gitignore\"), this._config, { bom: false, });\n            // README.md\n            copyTpl(path.join(templatePath(\"library\"), \"_README.md\"), path.join(this.rootDir, \"README.md\"), this._config, { delimiters: \"<% %>\" });\n            // package.json\n            this.config.devDependencies = yield this.queryDependenciesParam(this.config.devDependencies || this.defaultDevDependencies);\n            copyTpl(path.join(templatePath(\"library\"), \"_package.json\"), path.join(this.rootDir, \"package.json\"), this._config, { delimiters: \"<% %>\", bom: false, });\n        });\n    }\n    /**\n     * ソースの雛形作成\n     */\n    createSourceTemplate() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const _module = path.basename(this._config.moduleName, \".js\");\n            const param = {\n                sampleClass: _.classify(_module),\n                sampleModule: _module,\n                built: this._config.structureConfig.built,\n            };\n            const script = (() => {\n                if (this._config.structureConfig.srcConfig) {\n                    return this._config.structureConfig.srcConfig.script || \"\";\n                }\n                return \"\";\n            })();\n            // index.ts\n            copyTpl(path.join(templatePath(\"library\"), \"src\", \"_index.ts\"), path.join(this.rootDir, this._config.structureConfig.src, script, _module + \".ts\"), param, { delimiters: \"<% %>\" });\n            // index.spec.ts\n            copyTpl(path.join(templatePath(\"library\"), \"src\", \"_index.spec.ts\"), path.join(this.rootDir, this._config.structureConfig.test, \"jasmine\", _module + \".spec.ts\"), param, { delimiters: \"<% %>\" });\n        });\n    }\n    /**\n     * Visual Studio のソリューションファイル作成\n     */\n    createVisualStudioSolution() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const vsParam = (() => {\n                const createGUID = base_1.Utils.createGUID;\n                const param = $.extend({}, this._config.structureConfig);\n                param.projectName = this._config.projectName;\n                param.projectGUID = createGUID();\n                param.types = param.types.replace(\"@\", \"%40\"); // escape \"@\" to \"%40\"\n                param.mainBaseName = this._config.mainBaseName;\n                param.license = \"NONE\" !== this._config.license;\n                // build tools\n                param.webpack = this.isEnableTool(\"webpack\");\n                // setup built js group\n                param.jsGroup = [\n                    {\n                        relativePath: param.built + \"\\\\\",\n                        fileName: param.mainBaseName,\n                        dependee: true,\n                        d_ts: true,\n                        map: true,\n                        min_map: false,\n                    },\n                ];\n                // minify\n                if (this.config.minify) {\n                    // setup pkg group\n                    param.jsGroup.push({\n                        relativePath: param.pkg + \"\\\\\",\n                        fileName: param.mainBaseName,\n                        dependee: false,\n                        d_ts: false,\n                        map: false,\n                        min_map: true,\n                    });\n                }\n                // setup test js group\n                param.tsGroup = [\n                    {\n                        relativePath: param.test + \"\\\\jasmine\\\\\",\n                        fileName: param.mainBaseName + \".spec\",\n                        dependee: true,\n                        map: false,\n                    },\n                ];\n                return param;\n            })();\n            // .sln\n            copyTpl(path.join(templatePath(\"base/visual.studio\"), \"_solution.sln.tpl\"), path.join(this.rootDir, vsParam.projectName + \".sln\"), vsParam, { delimiters: \"<% %>\" });\n            // .csproj\n            const createProj = (() => {\n                const toXmlString = (file) => {\n                    const hogan = base_1.Utils.hogan;\n                    const normalizeText = base_1.Utils.normalizeText;\n                    const options = {\n                        eol: os.EOL,\n                        bom: true,\n                        delimiters: \"{{ }}\",\n                    };\n                    const tpl = path.join(templatePath(\"base/visual.studio\"), file);\n                    const jst = hogan.compile(normalizeText(fs.readFileSync(tpl).toString(), { eol: \"\\n\", bom: false }), options);\n                    return jst.render(vsParam);\n                };\n                const toXmlDOM = (file) => {\n                    return $($.parseXML(toXmlString(file)));\n                };\n                const toXmlNode = (file) => {\n                    return base_1.Utils.str2XmlNode(toXmlString(file));\n                };\n                const $proj = toXmlDOM(\"_project.csproj.tpl\");\n                const $gpTS = toXmlNode(\"_ts.item.group.tpl\");\n                const $gpJS = toXmlNode(\"_js.item.group.tpl\");\n                $proj\n                    .find(\"ItemGroup\")\n                    .last()\n                    .after($gpTS)\n                    .after($gpJS);\n                const formatXML = base_1.Utils.formatXML;\n                const dstPath = path.join(this.rootDir, vsParam.projectName + \".csproj\");\n                debug(base_1.Utils.xmlNode2Str($proj));\n                fs.writeFileSync(dstPath, formatXML(base_1.Utils.xmlNode2Str($proj)));\n            })();\n        });\n    }\n}\nexports.GeneratorModule = GeneratorModule;\n\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst generator_module_1 = __webpack_require__(7);\n__export(__webpack_require__(7));\n/**\n * generator 生成関数\n */\nfunction newGeneratorLibrary(config) {\n    return new generator_module_1.GeneratorModule(config);\n}\nexports.newGeneratorLibrary = newGeneratorLibrary;\n\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/* tslint:disable:no-unused-variable no-unused-vars */\n/* eslint-disable no-unused-vars */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst base_1 = __webpack_require__(0);\n/**\n * @class GeneratorCordova\n * @brief Mobile Cordova 用 Generator クラス\n */\nclass GeneratorCordova extends base_1.GeneratorBase {\n    ///////////////////////////////////////////////////////////////////////\n    // imprementes: GeneratorBase\n    /**\n     * 既定の directory 構造を返却\n     */\n    defaultBaseStructure() {\n        return {\n            src: \"app\",\n            pkg: \"www\",\n            built: \"app\",\n            doc: \"docs\",\n            task: \"tasks\",\n            test: \"tests\",\n            types: \"@types\",\n        };\n    }\n    /**\n     * create action entry\n     * @param {ILibraryConfigration} config コンフィグ設定\n     */\n    create() {\n        return __awaiter(this, void 0, void 0, function* () {\n            // TODO:\n            return Promise.reject(\"under construction.\");\n        });\n    }\n    /**\n     * 必要とする task script 一覧を返却. action: create のときに呼ばれる\n     */\n    get taskList() {\n        return [\n            \"banner.js\",\n            \"clean.js\",\n            \"srcmap.js\",\n            \"build-ts-clean.js\",\n            \"build-ts-normalize.js\",\n        ];\n    }\n    ///////////////////////////////////////////////////////////////////////\n    // private methods:\n    /**\n     * configration にアクセス\n     */\n    get config() {\n        return this._config;\n    }\n}\nexports.GeneratorCordova = GeneratorCordova;\n\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst generator_cordova_1 = __webpack_require__(9);\n__export(__webpack_require__(9));\n/**\n * generator 生成関数\n */\nfunction newGeneratorMobile(config) {\n    return new generator_cordova_1.GeneratorCordova(config);\n}\nexports.newGeneratorMobile = newGeneratorMobile;\n\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/* tslint:disable:no-unused-variable no-unused-vars */\n/* eslint-disable no-unused-vars */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst base_1 = __webpack_require__(0);\n/**\n * @class GeneratorBrowser\n * @brief Web Browser 用 Generator クラス\n */\nclass GeneratorBrowser extends base_1.GeneratorBase {\n    ///////////////////////////////////////////////////////////////////////\n    // imprementes: GeneratorBase\n    /**\n     * 既定の directory 構造を返却\n     */\n    defaultBaseStructure() {\n        return {\n            src: \"app\",\n            pkg: \"www\",\n            built: \"app\",\n            doc: \"docs\",\n            task: \"tasks\",\n            test: \"tests\",\n            types: \"@types\",\n        };\n    }\n    /**\n     * create action entry\n     * @param {ILibraryConfigration} config コンフィグ設定\n     */\n    create() {\n        return __awaiter(this, void 0, void 0, function* () {\n            // TODO:\n            return Promise.reject(\"under construction.\");\n        });\n    }\n    /**\n     * 必要とする task script 一覧を返却. action: create のときに呼ばれる\n     */\n    get taskList() {\n        return [\n            \"banner.js\",\n            \"clean.js\",\n            \"srcmap.js\",\n            \"build-ts-clean.js\",\n            \"build-ts-normalize.js\",\n        ];\n    }\n    ///////////////////////////////////////////////////////////////////////\n    // private methods:\n    /**\n     * configration にアクセス\n     */\n    get config() {\n        return this._config;\n    }\n}\nexports.GeneratorBrowser = GeneratorBrowser;\n\n\n/***/ }),\n/* 12 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst generator_browser_1 = __webpack_require__(11);\n__export(__webpack_require__(11));\n/**\n * generator 生成関数\n */\nfunction newGeneratorWeb(config) {\n    return new generator_browser_1.GeneratorBrowser(config);\n}\nexports.newGeneratorWeb = newGeneratorWeb;\n\n\n/***/ }),\n/* 13 */\n/***/ (function(module, exports) {\n\nmodule.exports = require(\"os\");\n\n/***/ }),\n/* 14 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Utils = __webpack_require__(2);\nexports.Utils = Utils;\nconst generators_1 = __webpack_require__(17);\n//___________________________________________________________________________________________________________________//\n/**\n * @class CDPLib\n * @brief CDP boilerplate 生成機能を提供するクラス\n */\nclass CDPLib {\n    ///////////////////////////////////////////////////////////////////////\n    // pubic methods:\n    /**\n     * main command\n     */\n    static execute(config) {\n        Utils.setSettings(config.settings);\n        return generators_1.newGenerator(config).run();\n    }\n}\nexports.default = CDPLib;\n\n\n/***/ }),\n/* 15 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst path = __webpack_require__(1);\nconst utils_1 = __webpack_require__(2);\n/**\n * @class GeneratorBase\n * @brief すべての Generator の既定クラス\n */\nclass GeneratorBase {\n    /**\n     * constructor\n     *\n     * @param {IProjectConfigration} config コンフィグ\n     */\n    constructor(_config) {\n        this._config = _config;\n        this._projectRootDir = utils_1.getTargetDir() ?\n            utils_1.getTargetDir() :\n            path.join(process.cwd(), this._config.projectName);\n        this._config.structureConfig = utils_1.$.extend({}, this.defaultBaseStructure(), this._config.structureConfig);\n        utils_1.debug(JSON.stringify(this._config, null, 4));\n    }\n    ///////////////////////////////////////////////////////////////////////\n    // pubic methods:\n    /**\n     * 処理開始 (エントリ)\n     *\n     */\n    run() {\n        switch (this._config.action) {\n            case \"create\":\n                return this.runCreate();\n            default:\n                return Promise.reject(\"unknown action: \" + this._config.action);\n        }\n    }\n    ///////////////////////////////////////////////////////////////////////\n    // protected methods:\n    /**\n     * 進捗テキストを通知\n     *\n     * @param {String} key ローカライズリソースキーを指定\n     */\n    progress(key) {\n        utils_1.log(utils_1.chalk.cyan(utils_1.translate(key)));\n    }\n    /**\n     * work directory の変更\n     *\n     * @param {String} directory target directory.\n     */\n    chdir(directory) {\n        process.chdir(directory);\n    }\n    /**\n     * project root directory の取得\n     *\n     * @param {String} directory target directory.\n     */\n    get rootDir() {\n        return this._projectRootDir;\n    }\n    /**\n     * template directory を指定して配下のファイルをコピー\n     * IBaseStructureConfigration の設定が反映される\n     *\n     * @param {String} path    ターゲットを指定. null の場合は、templates を返却\n     * @param {String} dstRoot コピー先を指定. 指定が無い場合は rootDir が設定\n     */\n    copyTplDir(target, dstRoot, options) {\n        dstRoot = dstRoot || this.rootDir;\n        options = utils_1.$.extend({\n            cwd: utils_1.templatePath(target),\n            nodir: true,\n            dot: true,\n        }, options);\n        utils_1.glob.sync(\"**\", options)\n            .forEach((file) => {\n            const dst = path.join(dstRoot, file\n                .replace(/src/, this._config.structureConfig.src)\n                .replace(/pkg/, this._config.structureConfig.pkg)\n                .replace(/built/, this._config.structureConfig.built)\n                .replace(/doc/, this._config.structureConfig.doc)\n                .replace(/task/, this._config.structureConfig.task)\n                .replace(/test/, this._config.structureConfig.test)\n                .replace(/types/, this._config.structureConfig.types));\n            utils_1.fs.copySync(path.join(utils_1.templatePath(target), file), dst);\n        });\n    }\n    /**\n     * node module の version 取得\n     *\n     * @param {Promise<string>} version text\n     */\n    queryNodeModuleLatestVersion(name) {\n        return new Promise((resolve, reject) => {\n            let version;\n            utils_1.execCommand(\"npm\", [\"info\", name, \"version\"], {\n                stdio: \"pipe\",\n                spinner: null,\n                stdout: (data) => {\n                    version = utils_1._.trim(data);\n                },\n            })\n                .then(() => {\n                resolve(version);\n            })\n                .catch((reason) => {\n                reject(reason);\n            });\n        });\n    }\n    /**\n     * 既定の開発時の依存モジュールリストの取得\n     * 必要に応じてオーバーライド\n     *\n     * @return {IDependency}\n     */\n    get defaultDevDependencies() {\n        const base = [\n            { name: \"convert-source-map\", version: undefined, },\n            { name: \"del\", version: undefined, },\n            { name: \"dts-bundle\", version: undefined, },\n            { name: \"eslint\", version: undefined, },\n            { name: \"npm-run-all\", version: undefined, },\n            { name: \"plato\", version: undefined, },\n            { name: \"remap-istanbul\", version: undefined, },\n            { name: \"source-map\", version: undefined, },\n            { name: \"source-map-loader\", version: undefined, },\n            { name: \"tslint\", version: undefined, },\n            { name: \"typedoc\", version: undefined, },\n            { name: \"typescript\", version: undefined, },\n            { name: \"typescript-formatter\", version: undefined, },\n        ];\n        const minify = [\n            { name: \"uglify-js\", version: undefined, es: [\"es5\"], },\n            { name: \"uglify-es\", version: undefined, es: [\"es2015\"], },\n        ];\n        let extra = [];\n        if (this._config.minify) {\n            extra = extra.concat(minify);\n        }\n        if (this.isEnableTool(\"webpack\")) {\n            extra.push({ name: \"webpack\", version: undefined, });\n        }\n        return utils_1._.sortBy(base.concat(minify, extra), (depend) => depend.name);\n    }\n    /**\n     * dependencies の template paramaeter を取得\n     *\n     * @param  {IDependency[]} dependencies 依存関係リスト\n     * @return {{ name: string; version: string; last?: boolean; }[]} テンプレートパラメータに指定する配列\n     */\n    queryDependenciesParam(dependencies) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.progress(\"base.create.queryVersion\");\n            const depends = dependencies\n                .filter((depend) => {\n                if (null == depend.es) {\n                    return true;\n                }\n                else {\n                    return !!depend.es.find((esVersion) => {\n                        return this._config.es === esVersion;\n                    });\n                }\n            });\n            const progress = (context) => {\n                if (\"string\" === typeof context && !this._config.settings.silent) {\n                    const spinner = utils_1.getSpinner(utils_1.chalk.yellow(context), 5);\n                    spinner.start();\n                    return spinner;\n                }\n                else if (context) {\n                    context.stop(true);\n                }\n            };\n            for (let i = 0, n = depends.length; i < n; i++) {\n                if (null == depends[i].version) {\n                    const spinner = progress(depends[i].name);\n                    depends[i].version = \"^\" + (yield this.queryNodeModuleLatestVersion(depends[i].name));\n                    progress(spinner);\n                }\n                if (i === n - 1) {\n                    depends[i].last = true;\n                }\n            }\n            return depends;\n        });\n    }\n    /**\n     * webpack.config.js の template paramaeter を取得\n     *\n     * @return {String} libraryTarget に指定する文字列\n     */\n    queryWebpackLibraryTarget() {\n        switch (this._config.module) {\n            case \"commonjs\":\n                return \"commonjs2\";\n            case \"amd\":\n                return \"amd\";\n            case \"umd\":\n                return \"umd\";\n            default:\n                return undefined;\n        }\n    }\n    /**\n     * eslintrc の env に指定する template paramaeter を取得\n     *\n     * @return {Object} env に指定するテンプレートパラメータオブジェクト\n     */\n    queryEsLintEnvParam() {\n        const compileSetting = this._config;\n        return {\n            es6: \"es5\" !== compileSetting.es,\n            node: \"web\" !== compileSetting.env,\n        };\n    }\n    /**\n     * IBuildTargetConfigration.tools プロパティの指定状況を取得\n     *\n     * @param  {String}  name ツール名を指定\n     * @return {Boolean} true: 指定されている / false: 指定されていない\n     */\n    isEnableTool(name) {\n        return !!this._config.tools.find((tool) => name === tool);\n    }\n    ///////////////////////////////////////////////////////////////////////\n    // private methods:\n    /**\n     * create 処理のエントリ\n     */\n    runCreate() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.createBase();\n            yield this.create();\n        });\n    }\n    //___________________________________________________________________________________________________________________//\n    /**\n     * 共通の create 処理\n     */\n    createBase() {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.progress(\"base.create.foundation\");\n            yield this.createProjectDir();\n            yield this.copyBaseStructure();\n            yield this.copyCommonFiles();\n            yield this.copyTaskScripts();\n        });\n    }\n    /**\n     * プロジェクトディレクトリの作成\n     */\n    createProjectDir() {\n        if (utils_1.fs.existsSync(this.rootDir)) {\n            throw Error(utils_1.translate(\"base.create.error.alreadyExist\"));\n        }\n        utils_1.fs.mkdirsSync(this.rootDir);\n    }\n    /**\n     * 共通構成情報のコピー\n     */\n    copyBaseStructure() {\n        this.copyTplDir(\"base/structure\");\n    }\n    /**\n     * 基本ファイルのコピー\n     * template のコピーも行う\n     */\n    copyCommonFiles() {\n        const srcDir = utils_1.templatePath(\"base\");\n        const dstDir = this.rootDir;\n        // .npmignore\n        utils_1.copyTpl(path.join(srcDir, \".npmignore\"), path.join(dstDir, \".npmignore\"), this._config.structureConfig);\n        // BANNER\n        utils_1.fs.copySync(path.join(srcDir, \"_BANNER\"), path.join(dstDir, \"BANNER\"));\n        // LICENSE\n        switch (this._config.license) {\n            case \"Apache-2.0\":\n                utils_1.fs.copySync(path.join(srcDir, \"_LICENSE.Apache-2.0\"), path.join(dstDir, \"LICENSE\"));\n                break;\n            case \"MIT\":\n                utils_1.copyTpl(path.join(srcDir, \"_LICENSE.MIT\"), path.join(dstDir, \"LICENSE\"), this._config.copyright);\n                break;\n            default:\n                break;\n        }\n        // NOTICE\n        utils_1.fs.copySync(path.join(srcDir, \"_NOTICE\"), path.join(dstDir, \"NOTICE\"));\n        // build tools: webpack\n        if (this.isEnableTool(\"webpack\")) {\n            utils_1.fs.copySync(path.join(srcDir, \"tools\", \"webpack.config.js\"), path.join(dstDir, \"webpack.config.js\"));\n        }\n    }\n    /**\n     * task script のコピー\n     */\n    copyTaskScripts() {\n        const srcDir = utils_1.templatePath(\"base/task\");\n        const dstDir = path.join(this.rootDir, this._config.structureConfig.task);\n        this.taskList.forEach((task) => {\n            utils_1.fs.copySync(path.join(srcDir, task), path.join(dstDir, task));\n        });\n    }\n}\nexports.GeneratorBase = GeneratorBase;\n\n\n/***/ }),\n/* 16 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Utils = __webpack_require__(2);\nexports.Utils = Utils;\n\n\n/***/ }),\n/* 17 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst settings_1 = __webpack_require__(4);\nconst library_1 = __webpack_require__(8);\nconst mobile_1 = __webpack_require__(10);\nconst desktop_1 = __webpack_require__(6);\nconst web_1 = __webpack_require__(12);\n__export(__webpack_require__(0));\n__export(__webpack_require__(8));\n__export(__webpack_require__(10));\n__export(__webpack_require__(6));\n__export(__webpack_require__(12));\n/**\n * generator 生成関数\n */\nfunction newGenerator(config) {\n    switch (config.projectType) {\n        case \"library\":\n            return library_1.newGeneratorLibrary(config);\n        case \"mobile\":\n            return mobile_1.newGeneratorMobile(config);\n        case \"desktop\":\n            return desktop_1.newGeneratorDesktop(config);\n        case \"web\":\n            return web_1.newGeneratorWeb(config);\n        default:\n            settings_1.assert(false, \"unsupported project kind: \" + config.projectType);\n            return null;\n    }\n}\nexports.newGenerator = newGenerator;\n\n\n/***/ }),\n/* 18 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst path = __webpack_require__(1);\nconst os = __webpack_require__(13);\nconst child_process_1 = __webpack_require__(19);\nconst libs_1 = __webpack_require__(3);\nconst settings_1 = __webpack_require__(4);\n///////////////////////////////////////////////////////////////////////\n// exports methods:\n/**\n * Handle command line error and kill process.\n * When the application received error from cli, please call this method.\n *\n * @param {String} error  error information.\n */\nfunction handleError(error) {\n    settings_1.assert(false, error);\n}\nexports.handleError = handleError;\n//___________________________________________________________________________________________________________________//\n/**\n * \"templates\" ディレクトリからのパスを取得.\n *\n * @param  {String} target ターゲットを指定. null の場合は、templates を返却\n * @return {String} templates/hogehoge\n */\nfunction templatePath(target) {\n    if (null == target) {\n        return path.join(settings_1.getLibPath(), \"templates\");\n    }\n    else {\n        return path.join(settings_1.getLibPath(), \"templates\", target);\n    }\n}\nexports.templatePath = templatePath;\n//___________________________________________________________________________________________________________________//\n/**\n * Get spinner instance.\n * CLI helper.\n *\n * @param  {String}  [format]  spinner format string.\n * @param  {Number}  [index]   spinner index defined by cli-spinner. (default: random [0-29])\n * @return {Spinner} cli-spinner instance.\n */\nfunction getSpinner(format, index) {\n    const spinners = [\n        \"|/-\\\\\",\n        \"┤┘┴└├┌┬┐\",\n        \"◢◣◤◥\",\n        \"▌▀▐▄\",\n        \"▉▊▋▌▍▎▏▎▍▌▋▊▉\",\n        \"▁▃▄▅▆▇█▇▆▅▄▃\",\n        \"☱☲☴\",\n        \".oO@*\",\n        \"◐◓◑◒\",\n        ////\n        \"◡◡ ⊙⊙ ◠◠\",\n        \"■□▪▫\",\n        \"←↖↑↗→↘↓↙\",\n        \".oO°Oo.\",\n    ];\n    const fmt = format || \"%s\";\n    const spinner = new libs_1.Spinner(fmt);\n    const idx = (null != index && 0 <= index && index < 14) ? index : Math.floor(Math.random() * 10);\n    spinner.setSpinnerString(spinners[idx]);\n    return spinner;\n}\nexports.getSpinner = getSpinner;\n/**\n * Normalize text line-feed.\n * for windows git user.\n *\n * @param  {String}               text      input text.\n * @param  {NormalizeTextOptions} [options] option.\n * @return {String} normalized text.\n */\nfunction normalizeText(text, options) {\n    const opt = libs_1.$.extend({}, {\n        eol: os.EOL,\n        bom: true,\n    }, options);\n    text = text\n        .replace(/^\\ufeff/gm, \"\") // remove bom\n        .replace(/\\r\\n/gm, \"\\n\") // once \"\\n\"\n        .replace(/\\r/gm, \"\\n\");\n    if (opt.bom) {\n        text = \"\\ufeff\" + text;\n    }\n    if (\"\\n\" !== opt.eol) {\n        text = text.replace(/\\n/gm, opt.eol);\n    }\n    if (opt.tab) {\n        const spaces = (() => {\n            let s = \"\";\n            for (let i = 0; i < opt.tab; i++) {\n                s += \" \";\n            }\n            return s;\n        })();\n        text = text.replace(/\\t/gm, spaces);\n    }\n    return text;\n}\nexports.normalizeText = normalizeText;\n/**\n * Execute command line by spawn.\n * call spawn. if error occured, cui is killed proccess.\n *\n * @param   {String}               command    main command. ex) \"cordova\"\n * @param   {String[]}             args       command args. ex) [\"plugin\", \"add\", pluginName]\n * @param   {ExecCommandOptions}   [options]  cli-spinner\"s options.\n * @returns {Number} error code\n */\nfunction execCommand(command, args, options) {\n    return new Promise((resolve, reject) => {\n        const opt = libs_1.$.extend({}, {\n            stdio: \"inherit\",\n            spinner: { format: \"%s\" },\n            stdout: (data) => { },\n            stderr: (data) => { },\n        }, options);\n        libs_1.which(command, (error, resolvedCommand) => {\n            if (error) {\n                handleError(JSON.stringify(error));\n            }\n            const spinner = opt.spinner ? getSpinner(opt.spinner.format, opt.spinner.index) : null;\n            if (spinner) {\n                spinner.start();\n            }\n            const child = child_process_1.spawn(resolvedCommand, args, opt)\n                .on(\"error\", handleError)\n                .on(\"close\", (code) => {\n                if (spinner) {\n                    spinner.stop(true);\n                }\n                resolve(code);\n            });\n            if (\"pipe\" === opt.stdio) {\n                child.stdout.on(\"data\", (data) => {\n                    opt.stdout(data.toString());\n                });\n                child.stderr.on(\"data\", (data) => {\n                    opt.stderr(data.toString());\n                });\n            }\n        });\n    });\n}\nexports.execCommand = execCommand;\n/**\n * Copy template with hogan.\n * sync function\n *\n * @param {String}               src       source file path.\n * @param {String}               dst       destination file path.\n * @param {Object}               params    template parameters.\n * @param {CopyTemplateOptions}  [options] options object.\n */\nfunction copyTpl(src, dst, params, options) {\n    const opt = libs_1.$.extend({}, {\n        eol: os.EOL,\n        bom: true,\n        delimiters: \"{{ }}\",\n    }, options);\n    const jst = libs_1.hogan.compile(normalizeText(libs_1.fs.readFileSync(src).toString(), { eol: \"\\n\", bom: false }), opt);\n    const output = normalizeText(jst.render(params), opt);\n    libs_1.fs.ensureFileSync(dst);\n    libs_1.fs.writeFileSync(dst, output, \"utf8\");\n}\nexports.copyTpl = copyTpl;\n//___________________________________________________________________________________________________________________//\n/**\n * GUID generate.\n * returned as Windows registry type format.\n *\n * @return {String}\n */\nfunction createGUID() {\n    return \"{\" + libs_1.uuid.v4().toUpperCase() + \"}\";\n}\nexports.createGUID = createGUID;\n//___________________________________________________________________________________________________________________//\n/**\n * Create XML DOM node.\n *\n * @param  {String} str  string xml format. ex) '<preference name=\"DisallowOverscroll\" value=\"true\"/>'\n * @return {jQuery} XML Node instance\n */\nfunction str2XmlNode(str) {\n    return libs_1.$(libs_1.$.parseXML(str)).children();\n}\nexports.str2XmlNode = str2XmlNode;\n/**\n * Create XML string from DOM node.\n *\n * @param  {String} str  string xml format. ex) '<preference name=\"DisallowOverscroll\" value=\"true\"/>'\n * @return {jQuery} XML Node instance\n */\nfunction xmlNode2Str($xml) {\n    /* eslint-disable no-undef */\n    return new XMLSerializer().serializeToString($xml[0]);\n    /* eslint-enable no-undef */\n}\nexports.xmlNode2Str = xmlNode2Str;\n/**\n * XML formatter.\n *\n * @param  {String}           str       string xml format. ex) '<preference name=\"DisallowOverscroll\" value=\"true\"/>'\n * @param  {FormatXmlOptions} [options] options object.\n * @return {String} formatted XML\n */\nfunction formatXML(str, options) {\n    const opt = libs_1.$.extend({}, {\n        eol: os.EOL,\n        bom: true,\n        step: 2,\n    }, options);\n    let xml = \"\";\n    let pad = 0;\n    let indent;\n    let node;\n    const strArr = normalizeText(str, { eol: \"\\n\" })\n        .replace(/(>)(<)(\\/*)/g, \"$1\\n$2$3\") // insert LF to each node once.\n        .split(\"\\n\");\n    const spaces = (len) => {\n        let s = \"\";\n        const _indent = len * opt.step;\n        for (let i = 0; i < _indent; i++) {\n            s += \" \";\n        }\n        return s;\n    };\n    for (let i = 0; i < strArr.length; i++) {\n        indent = 0;\n        node = libs_1.$.trim(strArr[i]);\n        if (node.match(/.+<\\/\\w[^>]*>$/)) {\n            indent = 0;\n        }\n        else if (node.match(/^<\\/\\w/)) {\n            if (pad > 0) {\n                pad -= 1;\n            }\n        }\n        else if (node.match(/^<\\w[^>]*[^\\/]>.*$/)) {\n            indent = 1;\n        }\n        else {\n            indent = 0;\n        }\n        xml += spaces(pad) + node + opt.eol;\n        pad += indent;\n    }\n    xml = xml.replace(/\\n\\n/gm, \"\\n\");\n    return normalizeText(xml, opt);\n}\nexports.formatXML = formatXML;\n\n\n/***/ }),\n/* 19 */\n/***/ (function(module, exports) {\n\nmodule.exports = require(\"child_process\");\n\n/***/ }),\n/* 20 */\n/***/ (function(module, exports) {\n\nmodule.exports = require(\"chalk\");\n\n/***/ }),\n/* 21 */\n/***/ (function(module, exports) {\n\nmodule.exports = require(\"cli-spinner\");\n\n/***/ }),\n/* 22 */\n/***/ (function(module, exports) {\n\nmodule.exports = require(\"fs-extra\");\n\n/***/ }),\n/* 23 */\n/***/ (function(module, exports) {\n\nmodule.exports = require(\"glob\");\n\n/***/ }),\n/* 24 */\n/***/ (function(module, exports) {\n\nmodule.exports = require(\"jsdom\");\n\n/***/ }),\n/* 25 */\n/***/ (function(module, exports) {\n\nmodule.exports = require(\"semver-regex\");\n\n/***/ }),\n/* 26 */\n/***/ (function(module, exports) {\n\nmodule.exports = require(\"uuid\");\n\n/***/ }),\n/* 27 */\n/***/ (function(module, exports) {\n\nmodule.exports = require(\"which\");\n\n/***/ }),\n/* 28 */\n/***/ (function(module, exports) {\n\nmodule.exports = require(\"xmldom\");\n\n/***/ }),\n/* 29 */\n/***/ (function(module, exports) {\n\nmodule.exports = require(\"hogan.js\");\n\n/***/ }),\n/* 30 */\n/***/ (function(module, exports) {\n\nmodule.exports = require(\"lodash\");\n\n/***/ }),\n/* 31 */\n/***/ (function(module, exports) {\n\nmodule.exports = require(\"underscore.string\");\n\n/***/ }),\n/* 32 */\n/***/ (function(module, exports) {\n\nmodule.exports = require(\"jquery\");\n\n/***/ }),\n/* 33 */\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(14);\n\n\n/***/ })\n/******/ ]);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,"]}