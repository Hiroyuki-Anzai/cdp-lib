{"version":3,"sources":["dist/cdp-lib.js"],"names":["module","exports","modules","installedModules","__webpack_require__","moduleId","i","l","call","m","c","value","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","getDefault","getModuleExports","object","property","prototype","hasOwnProperty","p","s","__export","require","fs","glob","hogan","_l","_s","which","uuid","chalk","semverRegex","cli_spinner_1","Spinner","$","_window","jsdom","JSDOM","window","defaultView","root","xmldom","DOMParser","global","XMLSerializer","_m","mixin","_","path","libs_1","_settings","force","verbose","silent","lang","_libPath","getSettings","extend","setSettings","settings","targetDir","getLibPath","TRY_COUNT","tried","__dirname","Error","join","check","pathExistsSync","getTargetDir","log","message","optionalParams","length","console","debug","error","assert","test","warn","process","exit","_lang","translate","key","JSON","parse","readFileSync","toString","resouce","props","split","prop","shift","__awaiter","this","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","step","next","e","rejected","result","done","then","apply","base_1","GeneratorElectron","GeneratorBase","[object Object]","src","pkg","built","doc","task","types","srcConfig","script","stylesheet","template","taskList","config","_config","generator_electoron_1","newGeneratorDesktop","os","Utils","templatePath","copyTpl","GeneratorModule","temp","ensureModuleProps","createDirectoryStructure","createProjectSettings","createSourceTemplate","createVisualStudioSolution","defaultDevDependencies","depends","super","concat","version","undefined","extra","nodejs","push","sortBy","depend","moduleName","projectName","trim","dasherize","mainBaseName","copyTplDir","rootDir","delimiters","outputSameDir","bom","structureConfig","queryEsLintEnvParam","testemStuffPath","sync","cwd","nodir","forEach","file","copySync","devDependencies","queryDependenciesParam","_module","basename","param","sampleClass","classify","sampleModule","vsParam","createGUID","projectGUID","replace","license","private","webpack","isEnableTool","testem","jsGroup","relativePath","fileName","dependee","d_ts","map","min_map","minify","tsGroup","toXmlString","normalizeText","options","eol","EOL","tpl","jst","compile","render","toXmlDOM","parseXML","toXmlNode","str2XmlNode","$proj","$gpTS","$gpJS","find","last","after","formatXML","dstPath","xmlNode2Str","writeFileSync","generator_module_1","newGeneratorLibrary","utils_1","GeneratorCordova","lib","external","porting","res","createProjectStructure","cordovaEnabled","platforms","chdir","createCordovaScaffold","updateConfigXML","mergeCordovaScaffold","addCordovaExtentionFiles","addCordovaPlatforms","progress","execCommand","appId","appName","removeSync","configXmlPath","$configXmlDom","attr","prepend","remove","generator_cordova_1","newGeneratorMobile","GeneratorBrowser","generator_browser_1","newGeneratorWeb","generators_1","CDPLib","newGenerator","run","default","_projectRootDir","defaultBaseStructure","env","stringify","action","runCreate","cyan","directory","target","dstRoot","dot","dst","stdio","spinner","stdout","data","catch","reason","base","es","dependencies","filter","esVersion","context","getSpinner","yellow","start","stop","queryNodeModuleLatestVersion","compileSetting","es6","node","tools","tool","createBase","create","createProjectDir","copyBaseStructure","copyCommonFiles","copyTaskScripts","existsSync","mkdirsSync","srcDir","dstDir","copyright","guide","taskPath","settings_1","library_1","mobile_1","desktop_1","web_1","projectType","child_process_1","handleError","format","index","spinners","fmt","idx","Math","floor","random","setSpinnerString","text","opt","tab","spaces","command","args","stderr","resolvedCommand","child","spawn","on","code","params","output","ensureFileSync","v4","toUpperCase","str","fullXML","$xml","children","serializeToString","xml","pad","indent","strArr","len","_indent","match"],"mappings":"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","sourcesContent":["﻿/*!\n * cdp-lib.js 0.0.1\n *\n * Date: 2017-06-15T09:13:55.268Z\n */\n\nmodule.exports =\n/******/ (function(modules) { // webpackBootstrap\n/******/     // The module cache\n/******/     var installedModules = {};\n/******/\n/******/     // The require function\n/******/     function __webpack_require__(moduleId) {\n/******/\n/******/         // Check if module is in cache\n/******/         if(installedModules[moduleId]) {\n/******/             return installedModules[moduleId].exports;\n/******/         }\n/******/         // Create a new module (and put it into the cache)\n/******/         var module = installedModules[moduleId] = {\n/******/             i: moduleId,\n/******/             l: false,\n/******/             exports: {}\n/******/         };\n/******/\n/******/         // Execute the module function\n/******/         modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/         // Flag the module as loaded\n/******/         module.l = true;\n/******/\n/******/         // Return the exports of the module\n/******/         return module.exports;\n/******/     }\n/******/\n/******/\n/******/     // expose the modules object (__webpack_modules__)\n/******/     __webpack_require__.m = modules;\n/******/\n/******/     // expose the module cache\n/******/     __webpack_require__.c = installedModules;\n/******/\n/******/     // identity function for calling harmony imports with the correct context\n/******/     __webpack_require__.i = function(value) { return value; };\n/******/\n/******/     // define getter function for harmony exports\n/******/     __webpack_require__.d = function(exports, name, getter) {\n/******/         if(!__webpack_require__.o(exports, name)) {\n/******/             Object.defineProperty(exports, name, {\n/******/                 configurable: false,\n/******/                 enumerable: true,\n/******/                 get: getter\n/******/             });\n/******/         }\n/******/     };\n/******/\n/******/     // getDefaultExport function for compatibility with non-harmony modules\n/******/     __webpack_require__.n = function(module) {\n/******/         var getter = module && module.__esModule ?\n/******/             function getDefault() { return module['default']; } :\n/******/             function getModuleExports() { return module; };\n/******/         __webpack_require__.d(getter, 'a', getter);\n/******/         return getter;\n/******/     };\n/******/\n/******/     // Object.prototype.hasOwnProperty.call\n/******/     __webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/     // __webpack_public_path__\n/******/     __webpack_require__.p = \"\";\n/******/\n/******/     // Load entry module and return exports\n/******/     return __webpack_require__(__webpack_require__.s = 33);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(__webpack_require__(16));\n__export(__webpack_require__(15));\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports) {\n\nmodule.exports = require(\"path\");\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(__webpack_require__(3));\n__export(__webpack_require__(18));\n__export(__webpack_require__(4));\n\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst fs = __webpack_require__(22);\nexports.fs = fs;\nconst glob = __webpack_require__(23);\nexports.glob = glob;\nconst hogan = __webpack_require__(29);\nexports.hogan = hogan;\nconst _l = __webpack_require__(30);\nconst _s = __webpack_require__(31);\nconst which = __webpack_require__(27);\nexports.which = which;\nconst uuid = __webpack_require__(26);\nexports.uuid = uuid;\nconst chalk = __webpack_require__(20);\nexports.chalk = chalk;\nconst semverRegex = __webpack_require__(25);\nexports.semverRegex = semverRegex;\nconst cli_spinner_1 = __webpack_require__(21);\nexports.Spinner = cli_spinner_1.Spinner;\nconst $ = (() => {\n    const _window = (() => {\n        const jsdom = __webpack_require__(24);\n        if (\"function\" === typeof jsdom.JSDOM) {\n            return new jsdom.JSDOM().window;\n        }\n        else {\n            return jsdom.jsdom().defaultView;\n        }\n    })();\n    // patch scope:\n    ((root) => {\n        /*\n         * jsdom 9.4.0 - 9.12.0 に実装されている DOMParser は XML の serialize ができないため,\n         * xmldom に置き換える\n         * jsdom 10.1.0 まで動かないことを確認\n         */\n        const xmldom = __webpack_require__(28);\n        root.DOMParser = xmldom.DOMParser;\n        // xmldom には dom.toString() が実装されているが、global にも export する\n        global.XMLSerializer = root.XMLSerializer = xmldom.XMLSerializer;\n    })(_window);\n    return __webpack_require__(32)(_window);\n})();\nexports.$ = $;\nconst _m = _l.mixin(_s.exports());\nexports._ = _m;\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst path = __webpack_require__(1);\nconst libs_1 = __webpack_require__(3);\nlet _settings = {\n    force: false,\n    verbose: false,\n    silent: false,\n    lang: \"en-US\",\n};\nlet _libPath; // cdp-lib の存在している path\n///////////////////////////////////////////////////////////////////////\n// exports methods:\n/**\n * 設定取得\n *\n * @return {IGlobalSettings} options ログに使用するオプション\n */\nfunction getSettings() {\n    return libs_1.$.extend({}, _settings);\n}\nexports.getSettings = getSettings;\n/**\n * 設定指定\n *\n * @param {IGlobalSettings} options ログに使用するオプション\n */\nfunction setSettings(settings) {\n    if (settings) {\n        _settings.force = settings.force || _settings.force;\n        _settings.verbose = settings.verbose || _settings.verbose;\n        _settings.silent = settings.silent || _settings.silent;\n        _settings.targetDir = settings.targetDir || _settings.targetDir;\n        _settings.lang = settings.lang || _settings.lang;\n    }\n    else {\n        _settings = {\n            force: false,\n            verbose: false,\n            silent: false,\n            lang: \"en-US\",\n        };\n    }\n}\nexports.setSettings = setSettings;\n/**\n * \"cdp-lib\" が存在するパスを取得\n *\n * @return {String} cdp-lib への path\n */\nfunction getLibPath() {\n    if (null == _libPath) {\n        const TRY_COUNT = 3;\n        let tried = 0;\n        _libPath = __dirname;\n        while (true) {\n            if (TRY_COUNT <= tried) {\n                throw Error(\"lib path is not resolved.\");\n            }\n            _libPath = path.join(_libPath, \"..\");\n            const check = path.join(_libPath, \"cdp-lib\");\n            if (libs_1.fs.pathExistsSync(check)) {\n                _libPath = check;\n                break;\n            }\n            tried++;\n        }\n    }\n    return _libPath;\n}\nexports.getLibPath = getLibPath;\n/**\n * 指定された targetDir を取得\n *\n * @return {String} targetDir への path\n */\nfunction getTargetDir() {\n    return _settings.targetDir;\n}\nexports.getTargetDir = getTargetDir;\n/**\n * ログ出力\n * console.log() と同等\n *\n * @param {String} message        出力メッセージ\n * @param {Any[]}  optionalParams 付加情報\n */\nfunction log(message, ...optionalParams) {\n    if (!_settings.silent) {\n        if (0 < optionalParams.length) {\n            console.log(message, optionalParams);\n        }\n        else {\n            console.log(message);\n        }\n    }\n}\nexports.log = log;\n/**\n * 詳細ログ出力\n * console.debug() と同等\n *\n * @param {String} message        出力メッセージ\n * @param {Any[]}  optionalParams 付加情報\n */\nfunction debug(message, ...optionalParams) {\n    if (!_settings.silent && _settings.verbose) {\n        if (0 < optionalParams.length) {\n            console.error(\"DEBUG: \" + message, optionalParams);\n        }\n        else {\n            console.error(\"DEBUG: \" + message);\n        }\n    }\n}\nexports.debug = debug;\n/**\n * 検証\n * console.assert() と同等\n *\n * @param {Boolean} test           検証する式\n * @param {String}  message        出力メッセージ\n * @param {Any[]}   optionalParams 付加情報\n */\nfunction assert(test, message, ...optionalParams) {\n    if (!test) {\n        if (_settings.force) {\n            if (0 < optionalParams.length) {\n                console.warn(message, optionalParams);\n            }\n            else {\n                console.warn(message);\n            }\n        }\n        else {\n            if (0 < optionalParams.length) {\n                console.error(message, optionalParams);\n            }\n            else {\n                console.error(message);\n            }\n            process.exit(1);\n        }\n    }\n}\nexports.assert = assert;\nlet _lang;\n/**\n * ローカライズ\n *\n * @param {String} key キー文字列\n * @return 翻訳された文字列\n */\nfunction translate(key) {\n    if (!_lang) {\n        try {\n            _lang = JSON.parse(libs_1.fs.readFileSync(path.join(getLibPath(), \"res/locales\", \"messages.\" + _settings.lang + \".json\"), \"utf8\").toString());\n        }\n        catch (error) {\n            throw Error(\"Language resource JSON parse error: \" + error.message);\n        }\n    }\n    let resouce = libs_1.$.extend({}, _lang);\n    const props = key.split(\".\");\n    while (0 < props.length) {\n        const prop = props.shift();\n        if (resouce[prop]) {\n            resouce = resouce[prop];\n        }\n        else {\n            assert(false, \"resouce not found. key: \" + key);\n            return null;\n        }\n    }\n    return resouce;\n}\nexports.translate = translate;\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/* tslint:disable:no-unused-variable no-unused-vars */\n/* eslint-disable no-unused-vars */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst base_1 = __webpack_require__(0);\n/**\n * @class GeneratorElectron\n * @brief Desktop Electron 用 Generator クラス\n */\nclass GeneratorElectron extends base_1.GeneratorBase {\n    ///////////////////////////////////////////////////////////////////////\n    // imprementes: GeneratorBase\n    /**\n     * 既定の directory 構造を返却\n     */\n    defaultBaseStructure() {\n        return {\n            src: \"app\",\n            pkg: \"www/app\",\n            built: \"app\",\n            doc: \"docs\",\n            task: \"tasks\",\n            test: \"tests\",\n            types: \"@types\",\n            srcConfig: {\n                script: \"scripts\",\n                stylesheet: \"stylesheets\",\n                template: \"templates\",\n            },\n        };\n    }\n    /**\n     * create action entry\n     * @param {IDesktopAppConfigration} config コンフィグ設定\n     */\n    create() {\n        return __awaiter(this, void 0, void 0, function* () {\n            // TODO:\n            return Promise.reject(\"under construction.\");\n        });\n    }\n    /**\n     * 必要とする task script 一覧を返却. action: create のときに呼ばれる\n     */\n    get taskList() {\n        return [\n            \"banner.js\",\n            \"clean.js\",\n            \"srcmap.js\",\n            \"build-ts-clean.js\",\n            \"build-ts-normalize.js\",\n        ];\n    }\n    ///////////////////////////////////////////////////////////////////////\n    // private methods:\n    /**\n     * configration にアクセス\n     */\n    get config() {\n        return this._config;\n    }\n}\nexports.GeneratorElectron = GeneratorElectron;\n\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst generator_electoron_1 = __webpack_require__(5);\n__export(__webpack_require__(5));\n/**\n * generator 生成関数\n */\nfunction newGeneratorDesktop(config) {\n    return new generator_electoron_1.GeneratorElectron(config);\n}\nexports.newGeneratorDesktop = newGeneratorDesktop;\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst path = __webpack_require__(1);\nconst os = __webpack_require__(13);\nconst base_1 = __webpack_require__(0);\nconst fs = base_1.Utils.fs;\nconst glob = base_1.Utils.glob;\nconst $ = base_1.Utils.$;\nconst _ = base_1.Utils._;\nconst debug = base_1.Utils.debug;\nconst templatePath = base_1.Utils.templatePath;\nconst copyTpl = base_1.Utils.copyTpl;\n/**\n * @class GeneratorModule\n * @brief Library Module 用 Generator クラス\n */\nclass GeneratorModule extends base_1.GeneratorBase {\n    ///////////////////////////////////////////////////////////////////////\n    // imprementes: GeneratorBase\n    /**\n     * 既定の directory 構造を返却\n     */\n    defaultBaseStructure() {\n        return {\n            src: \"src\",\n            pkg: \"dist\",\n            built: \"built\",\n            doc: \"docs\",\n            task: \"tasks\",\n            test: \"tests\",\n            types: \"@types\",\n            temp: \".temp\",\n        };\n    }\n    /**\n     * create action entry\n     * @param {ILibraryConfigration} config コンフィグ設定\n     */\n    create() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.ensureModuleProps();\n            yield this.createDirectoryStructure();\n            yield this.createProjectSettings();\n            yield this.createSourceTemplate();\n            yield this.createVisualStudioSolution();\n        });\n    }\n    /**\n     * 必要とする task script 一覧を返却. action: create のときに呼ばれる\n     */\n    get taskList() {\n        return [\n            \"banner.js\",\n            \"clean.js\",\n            \"srcmap.js\",\n            \"bundle-finalizer.js\",\n            \"remap-coverage.js\",\n        ];\n    }\n    ///////////////////////////////////////////////////////////////////////\n    // protected methods:\n    /**\n     * 開発時の依存モジュールリストの取得\n     * 必要に応じてオーバーライド\n     *\n     * @return {IDependency}\n     */\n    get defaultDevDependencies() {\n        const depends = super.defaultDevDependencies.concat([\n            { name: \"@types/jasmine\", version: undefined, },\n            { name: \"dts-bundle\", version: undefined, },\n            { name: \"typescript-formatter\", version: undefined, },\n        ]);\n        const extra = [];\n        if (this.config.nodejs) {\n            extra.push({ name: \"jasmine-node\", version: \"^2.0.0\", });\n        }\n        else {\n            extra.push({ name: \"requirejs\", version: undefined, });\n        }\n        return _.sortBy(depends.concat(extra), (depend) => depend.name);\n    }\n    ///////////////////////////////////////////////////////////////////////\n    // private methods:\n    /**\n     * configration にアクセス\n     */\n    get config() {\n        return this._config;\n    }\n    /**\n     * module 名, main ファイル名の保証\n     * - 1: moduleName が指定されている場合は使用する\n     * - 2: projectName が使用可能な場合はそれを使用する\n     * - 3: projectName が使用不可の場合は、\"-\" つなぎ文字列を生成する\n     */\n    ensureModuleProps() {\n        // module name\n        if (null == this.config.moduleName) {\n            if (!/^.*[(\\\\|\\s|/|:|*|?|\"|<|>||)].*$/.test(this.config.projectName)) {\n                this.config.moduleName = this.config.projectName;\n            }\n            else {\n                this.config.moduleName = _.trim(_.dasherize(this.config.projectName), \"-\");\n            }\n        }\n        debug(\"moduleName: \" + this.config.moduleName);\n        // main file name\n        if (null == this.config.mainBaseName) {\n            this.config.mainBaseName = this.config.moduleName;\n        }\n        debug(\"mainBaseName: \" + this.config.mainBaseName);\n    }\n    /**\n     * ディレクトリ構成情報のコピー\n     */\n    createDirectoryStructure() {\n        this.copyTplDir(\"library/structure\");\n    }\n    /**\n     * プロジェクト設定ファイルの作成\n     */\n    createProjectSettings() {\n        return __awaiter(this, void 0, void 0, function* () {\n            // project.config.js\n            copyTpl(path.join(templatePath(\"library\"), \"_project.config.js\"), path.join(this.rootDir, \"project.config.js\"), this._config, { delimiters: \"<% %>\" });\n            // tsconfig\n            if (!this.config.outputSameDir) {\n                // main tsconfig.json\n                copyTpl(path.join(templatePath(\"library\"), \"_tsconfig.json\"), path.join(this.rootDir, \"tsconfig.json\"), this._config, { delimiters: \"<% %>\", bom: false, });\n                // test tsconfig.json\n                copyTpl(path.join(templatePath(\"library\"), \"_tsconfig.test.json\"), path.join(this.rootDir, this._config.structureConfig.test, \"unit\", \"tsconfig.json\"), this._config, { delimiters: \"<% %>\", bom: false, });\n            }\n            else {\n                // main tsconfig.json\n                copyTpl(path.join(templatePath(\"library\"), \"_tsconfig.output-same-dir.json\"), path.join(this.rootDir, \"tsconfig.json\"), this._config, { delimiters: \"<% %>\", bom: false, });\n            }\n            // eslintrc.json\n            copyTpl(path.join(templatePath(\"library\"), \"_eslintrc.json\"), path.join(this.rootDir, this._config.structureConfig.test, \"eslint\", \"eslintrc.json\"), this.queryEsLintEnvParam(), { delimiters: \"<% %>\", bom: false, });\n            // testem\n            if (!this.config.nodejs) {\n                copyTpl(path.join(templatePath(\"library/tools/testem\"), \"_testem.json\"), path.join(this.rootDir, this._config.structureConfig.test, \"runner\", \"testem.json\"), this._config, { delimiters: \"<% %>\", bom: false, });\n                const testemStuffPath = templatePath(\"library/tools/testem/runner\");\n                glob.sync(\"**\", {\n                    cwd: testemStuffPath,\n                    nodir: true,\n                })\n                    .forEach((file) => {\n                    fs.copySync(path.join(testemStuffPath, file), path.join(this.rootDir, this._config.structureConfig.test, \"runner\", file));\n                });\n            }\n            // .gitignore\n            copyTpl(path.join(templatePath(\"library\"), \".gitignore\"), path.join(this.rootDir, \".gitignore\"), this._config, { bom: false, });\n            // README.md\n            copyTpl(path.join(templatePath(\"library\"), \"_README.md\"), path.join(this.rootDir, \"README.md\"), this._config, { delimiters: \"<% %>\" });\n            // package.json\n            this.config.devDependencies = yield this.queryDependenciesParam(this.config.devDependencies || this.defaultDevDependencies);\n            copyTpl(path.join(templatePath(\"library\"), \"_package.json\"), path.join(this.rootDir, \"package.json\"), this._config, { delimiters: \"<% %>\", bom: false, });\n        });\n    }\n    /**\n     * ソースの雛形作成\n     */\n    createSourceTemplate() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const _module = path.basename(this._config.moduleName, \".js\");\n            const param = {\n                sampleClass: _.classify(_module),\n                sampleModule: _module,\n                built: this._config.structureConfig.built,\n            };\n            const script = (() => {\n                if (this._config.structureConfig.srcConfig) {\n                    return this._config.structureConfig.srcConfig.script || \"\";\n                }\n                return \"\";\n            })();\n            // index.ts\n            copyTpl(path.join(templatePath(\"library\"), \"src\", \"_index.ts\"), path.join(this.rootDir, this._config.structureConfig.src, script, _module + \".ts\"), param, { delimiters: \"<% %>\" });\n            // index.spec.ts\n            copyTpl(path.join(templatePath(\"library\"), \"src\", \"_index.spec.ts\"), path.join(this.rootDir, this._config.structureConfig.test, \"unit\", _module + \".spec.ts\"), param, { delimiters: \"<% %>\" });\n        });\n    }\n    /**\n     * Visual Studio のソリューションファイル作成\n     */\n    createVisualStudioSolution() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const vsParam = (() => {\n                const createGUID = base_1.Utils.createGUID;\n                const param = $.extend({}, this._config.structureConfig);\n                param.projectName = this._config.projectName;\n                param.projectGUID = createGUID();\n                param.types = param.types.replace(\"@\", \"%40\"); // escape \"@\" to \"%40\"\n                param.mainBaseName = this._config.mainBaseName;\n                param.license = !this._config.private;\n                // tools\n                param.webpack = this.isEnableTool(\"webpack\");\n                param.testem = !this.config.nodejs;\n                param.outputSameDir = this.config.outputSameDir;\n                // setup built js group\n                param.jsGroup = [];\n                if (!param.outputSameDir) {\n                    param.jsGroup.push({\n                        relativePath: param.built + \"\\\\\",\n                        fileName: param.mainBaseName,\n                        dependee: true,\n                        d_ts: true,\n                        map: true,\n                        min_map: false,\n                    });\n                }\n                if (this.config.minify) {\n                    // setup pkg group\n                    param.jsGroup.push({\n                        relativePath: param.pkg + \"\\\\\",\n                        fileName: param.mainBaseName,\n                        dependee: false,\n                        d_ts: false,\n                        map: false,\n                        min_map: true,\n                    });\n                }\n                // setup test js group\n                param.tsGroup = [\n                    {\n                        relativePath: param.test + \"\\\\unit\\\\\",\n                        fileName: param.mainBaseName + \".spec\",\n                        dependee: true,\n                        map: this.config.outputSameDir,\n                    },\n                ];\n                if (param.outputSameDir) {\n                    param.tsGroup.push({\n                        relativePath: param.built + \"\\\\\",\n                        fileName: param.mainBaseName,\n                        dependee: false,\n                        map: true,\n                    });\n                }\n                return param;\n            })();\n            // .sln\n            copyTpl(path.join(templatePath(\"base/visual.studio\"), \"_solution.sln.tpl\"), path.join(this.rootDir, vsParam.projectName + \".sln\"), vsParam, { delimiters: \"<% %>\" });\n            // .csproj\n            (() => {\n                const toXmlString = (file) => {\n                    const hogan = base_1.Utils.hogan;\n                    const normalizeText = base_1.Utils.normalizeText;\n                    const options = {\n                        eol: os.EOL,\n                        bom: true,\n                        delimiters: \"{{ }}\",\n                    };\n                    const tpl = path.join(templatePath(\"base/visual.studio\"), file);\n                    const jst = hogan.compile(normalizeText(fs.readFileSync(tpl).toString(), { eol: \"\\n\", bom: false }), options);\n                    return jst.render(vsParam);\n                };\n                const toXmlDOM = (file) => {\n                    return $($.parseXML(toXmlString(file)));\n                };\n                const toXmlNode = (file) => {\n                    return base_1.Utils.str2XmlNode(toXmlString(file));\n                };\n                const $proj = toXmlDOM(\"_project.csproj.tpl\");\n                const $gpTS = toXmlNode(\"_ts.item.group.tpl\");\n                const $gpJS = toXmlNode(\"_js.item.group.tpl\");\n                $proj\n                    .find(\"ItemGroup\")\n                    .last()\n                    .after($gpTS)\n                    .after($gpJS);\n                const formatXML = base_1.Utils.formatXML;\n                const dstPath = path.join(this.rootDir, vsParam.projectName + \".csproj\");\n                debug(base_1.Utils.xmlNode2Str($proj));\n                fs.writeFileSync(dstPath, formatXML(base_1.Utils.xmlNode2Str($proj)));\n            })();\n        });\n    }\n}\nexports.GeneratorModule = GeneratorModule;\n\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst generator_module_1 = __webpack_require__(7);\n__export(__webpack_require__(7));\n/**\n * generator 生成関数\n */\nfunction newGeneratorLibrary(config) {\n    return new generator_module_1.GeneratorModule(config);\n}\nexports.newGeneratorLibrary = newGeneratorLibrary;\n\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/* tslint:disable:no-unused-variable no-unused-vars */\n/* eslint-disable no-unused-vars */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst path = __webpack_require__(1);\nconst utils_1 = __webpack_require__(2);\nconst base_1 = __webpack_require__(0);\n/**\n * @class GeneratorCordova\n * @brief Mobile Cordova 用 Generator クラス\n */\nclass GeneratorCordova extends base_1.GeneratorBase {\n    ///////////////////////////////////////////////////////////////////////\n    // imprementes: GeneratorBase\n    /**\n     * 既定の directory 構造を返却\n     */\n    defaultBaseStructure() {\n        return {\n            src: \"app\",\n            pkg: \"www\",\n            built: \"app\",\n            doc: \"docs\",\n            task: \"tasks\",\n            test: \"tests\",\n            types: \"@types\",\n            temp: \".temp\",\n            lib: \"lib\",\n            external: \"external\",\n            porting: \"porting\",\n            res: \"res\",\n            srcConfig: {\n                script: \"scripts\",\n                stylesheet: \"stylesheets\",\n                template: \"templates\",\n            },\n        };\n    }\n    /**\n     * create action entry\n     * @param {ILibraryConfigration} config コンフィグ設定\n     */\n    create() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.createProjectStructure();\n        });\n    }\n    /**\n     * 必要とする task script 一覧を返却. action: create のときに呼ばれる\n     */\n    get taskList() {\n        return [\n            \"banner.js\",\n            \"clean.js\",\n            \"srcmap.js\",\n            \"bundle-finalizer.js\",\n            \"remap-coverage.js\",\n        ];\n    }\n    ///////////////////////////////////////////////////////////////////////\n    // protected methods:\n    /**\n     * 開発時の依存モジュールリストの取得\n     * 必要に応じてオーバーライド\n     *\n     * @return {IDependency}\n     */\n    get defaultDevDependencies() {\n        const depends = super.defaultDevDependencies.concat([\n            { name: \"@types/backbone\", version: undefined, },\n            { name: \"@types/jasmine\", version: undefined, },\n            { name: \"@types/jquery\", version: undefined, },\n            { name: \"@types/requirejs\", version: undefined, },\n            { name: \"@types/jquery\", version: undefined, },\n            { name: \"@types/underscore\", version: undefined, },\n            { name: \"autoprefixer\", version: undefined, },\n            { name: \"clean-css\", version: undefined, },\n            { name: \"fs-extra\", version: undefined, },\n            { name: \"html-minifier\", version: undefined, },\n            { name: \"node-sass\", version: undefined, },\n            { name: \"postcss-cli\", version: undefined, },\n        ]);\n        const extra = [];\n        this.config.devDependencies.forEach((depend) => {\n            extra.push({ name: depend.name, version: depend.version, });\n        });\n        return utils_1._.sortBy(depends.concat(extra), (depend) => depend.name);\n    }\n    ///////////////////////////////////////////////////////////////////////\n    // private methods:\n    /**\n     * configration にアクセス\n     */\n    get config() {\n        return this._config;\n    }\n    /**\n     * プロジェクト構成の作成\n     */\n    createProjectStructure() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const cordovaEnabled = (0 < this.config.platforms.length);\n            if (cordovaEnabled) {\n                yield this.chdir(this.rootDir);\n                yield this.createCordovaScaffold();\n                yield this.updateConfigXML();\n                yield this.mergeCordovaScaffold();\n                yield this.addCordovaExtentionFiles();\n                yield this.addCordovaPlatforms();\n                yield this.chdir(\"..\");\n            }\n            else {\n                // TODO:\n            }\n        });\n    }\n    //___________________________________________________________________________________________________________________//\n    /**\n     * cordova を用いたプロジェクト作成\n     */\n    createCordovaScaffold() {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.progress(\"mobile.create.cordova.createCordovaScaffold\");\n            utils_1.debug(\"createCordovaScaffold\");\n            // `$ cordova create cool-mobile com.sony.cdp.coolmobile \"Cool Mobile\"`\n            yield utils_1.execCommand(\"cordova\", [\"create\", this.config.projectName, this.config.appId, this.config.appName]);\n            // remove files\n            utils_1.glob.sync(\"www/**/*\", {\n                cwd: this.config.projectName,\n            }).forEach((file) => {\n                utils_1.fs.removeSync(path.join(this.config.projectName, file));\n            });\n            utils_1.fs.removeSync(path.join(this.config.projectName, \"res\"));\n            utils_1.fs.removeSync(path.join(this.config.projectName, \".npmignore\"));\n            // move root directory\n            utils_1.fs.copySync(this.config.projectName, \"./\");\n            utils_1.fs.removeSync(this.config.projectName);\n        });\n    }\n    /**\n     * config.xml の修正\n     */\n    updateConfigXML() {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.progress(\"mobile.create.cordova.updateConfigXml\");\n            utils_1.debug(\"updateConfigXML\");\n            const configXmlPath = path.join(process.cwd(), \"config.xml\");\n            const $configXmlDom = utils_1.$(utils_1.str2XmlNode(utils_1.fs.readFileSync(configXmlPath).toString()));\n            $configXmlDom\n                .find(\"widget\")\n                .attr(\"version\", this.config.version)\n                .prepend(utils_1.str2XmlNode(`\n                <preference name=\"DisallowOverscroll\" value=\"true\"/>\n                <preference name=\"KeyboardDisplayRequiresUserAction\" value=\"false\"/>\n                <preference name=\"BackgroundColor\" value=\"0xff000000\" />\n            `));\n            // remove cordova team information\n            $configXmlDom\n                .find(\"description\")\n                .remove();\n            $configXmlDom\n                .find(\"author\")\n                .remove();\n            utils_1.fs.writeFileSync(configXmlPath, utils_1.formatXML(utils_1.xmlNode2Str($configXmlDom)));\n        });\n    }\n    mergeCordovaScaffold() {\n        return __awaiter(this, void 0, void 0, function* () {\n            utils_1.debug(\"mergeCordovaScaffold\");\n        });\n    }\n    addCordovaExtentionFiles() {\n        return __awaiter(this, void 0, void 0, function* () {\n            utils_1.debug(\"addCordovaExtentionFiles\");\n        });\n    }\n    addCordovaPlatforms() {\n        return __awaiter(this, void 0, void 0, function* () {\n            utils_1.debug(\"addCordovaPlatforms\");\n        });\n    }\n}\nexports.GeneratorCordova = GeneratorCordova;\n\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst generator_cordova_1 = __webpack_require__(9);\n__export(__webpack_require__(9));\n/**\n * generator 生成関数\n */\nfunction newGeneratorMobile(config) {\n    return new generator_cordova_1.GeneratorCordova(config);\n}\nexports.newGeneratorMobile = newGeneratorMobile;\n\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/* tslint:disable:no-unused-variable no-unused-vars */\n/* eslint-disable no-unused-vars */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst base_1 = __webpack_require__(0);\n/**\n * @class GeneratorBrowser\n * @brief Web Browser 用 Generator クラス\n */\nclass GeneratorBrowser extends base_1.GeneratorBase {\n    ///////////////////////////////////////////////////////////////////////\n    // imprementes: GeneratorBase\n    /**\n     * 既定の directory 構造を返却\n     */\n    defaultBaseStructure() {\n        return {\n            src: \"app\",\n            pkg: \"www\",\n            built: \"app\",\n            doc: \"docs\",\n            task: \"tasks\",\n            test: \"tests\",\n            types: \"@types\",\n        };\n    }\n    /**\n     * create action entry\n     * @param {ILibraryConfigration} config コンフィグ設定\n     */\n    create() {\n        return __awaiter(this, void 0, void 0, function* () {\n            // TODO:\n            return Promise.reject(\"under construction.\");\n        });\n    }\n    /**\n     * 必要とする task script 一覧を返却. action: create のときに呼ばれる\n     */\n    get taskList() {\n        return [\n            \"banner.js\",\n            \"clean.js\",\n            \"srcmap.js\",\n            \"build-ts-clean.js\",\n            \"build-ts-normalize.js\",\n        ];\n    }\n    ///////////////////////////////////////////////////////////////////////\n    // private methods:\n    /**\n     * configration にアクセス\n     */\n    get config() {\n        return this._config;\n    }\n}\nexports.GeneratorBrowser = GeneratorBrowser;\n\n\n/***/ }),\n/* 12 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst generator_browser_1 = __webpack_require__(11);\n__export(__webpack_require__(11));\n/**\n * generator 生成関数\n */\nfunction newGeneratorWeb(config) {\n    return new generator_browser_1.GeneratorBrowser(config);\n}\nexports.newGeneratorWeb = newGeneratorWeb;\n\n\n/***/ }),\n/* 13 */\n/***/ (function(module, exports) {\n\nmodule.exports = require(\"os\");\n\n/***/ }),\n/* 14 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Utils = __webpack_require__(2);\nexports.Utils = Utils;\nconst generators_1 = __webpack_require__(17);\n//___________________________________________________________________________________________________________________//\n/**\n * @class CDPLib\n * @brief CDP boilerplate 生成機能を提供するクラス\n */\nclass CDPLib {\n    ///////////////////////////////////////////////////////////////////////\n    // pubic methods:\n    /**\n     * main command\n     */\n    static execute(config) {\n        Utils.setSettings(config.settings);\n        return generators_1.newGenerator(config).run();\n    }\n}\nexports.default = CDPLib;\n\n\n/***/ }),\n/* 15 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst path = __webpack_require__(1);\nconst utils_1 = __webpack_require__(2);\n/**\n * @class GeneratorBase\n * @brief すべての Generator の既定クラス\n */\nclass GeneratorBase {\n    /**\n     * constructor\n     *\n     * @param {IProjectConfigration} config コンフィグ\n     */\n    constructor(_config) {\n        this._config = _config;\n        this._projectRootDir = utils_1.getTargetDir() ?\n            utils_1.getTargetDir() :\n            path.join(process.cwd(), this._config.projectName);\n        this._config.structureConfig = utils_1.$.extend({}, this.defaultBaseStructure(), this._config.structureConfig);\n        this._config.private = \"NONE\" === this._config.license;\n        this._config.outputSameDir\n            = this._config.structureConfig.src === this._config.structureConfig.built;\n        this._config.nodejs = ((env) => {\n            switch (env) {\n                case \"node\":\n                case \"electron\":\n                    return true;\n                default:\n                    return false;\n            }\n        })(this._config.env);\n        utils_1.debug(JSON.stringify(this._config, null, 4));\n    }\n    ///////////////////////////////////////////////////////////////////////\n    // pubic methods:\n    /**\n     * 処理開始 (エントリ)\n     *\n     */\n    run() {\n        switch (this._config.action) {\n            case \"create\":\n                return this.runCreate();\n            default:\n                return Promise.reject(\"unknown action: \" + this._config.action);\n        }\n    }\n    ///////////////////////////////////////////////////////////////////////\n    // protected methods:\n    /**\n     * 進捗テキストを通知\n     *\n     * @param {String} key ローカライズリソースキーを指定\n     */\n    progress(key) {\n        utils_1.log(utils_1.chalk.cyan(utils_1.translate(key)));\n    }\n    /**\n     * work directory の変更\n     *\n     * @param {String} directory target directory.\n     */\n    chdir(directory) {\n        process.chdir(directory);\n    }\n    /**\n     * project root directory の取得\n     *\n     * @param {String} directory target directory.\n     */\n    get rootDir() {\n        return this._projectRootDir;\n    }\n    /**\n     * template directory を指定して配下のファイルをコピー\n     * IBaseStructureConfigration の設定が反映される\n     *\n     * @param {String} target  ターゲットを指定. null の場合は、templates を返却\n     * @param {String} dstRoot コピー先を指定. 指定が無い場合は rootDir が設定\n     */\n    copyTplDir(target, dstRoot, options) {\n        dstRoot = dstRoot || this.rootDir;\n        options = utils_1.$.extend({\n            cwd: utils_1.templatePath(target),\n            nodir: true,\n            dot: true,\n        }, options);\n        utils_1.glob.sync(\"**\", options)\n            .forEach((file) => {\n            const dst = path.join(dstRoot, file\n                .replace(/src/, this._config.structureConfig.src)\n                .replace(/pkg/, this._config.structureConfig.pkg)\n                .replace(/built/, this._config.structureConfig.built)\n                .replace(/doc/, this._config.structureConfig.doc)\n                .replace(/task/, this._config.structureConfig.task)\n                .replace(/test/, this._config.structureConfig.test)\n                .replace(/types/, this._config.structureConfig.types)\n                .replace(/temp/, this._config.structureConfig.temp));\n            utils_1.fs.copySync(path.join(utils_1.templatePath(target), file), dst);\n        });\n    }\n    /**\n     * node module の version 取得\n     *\n     * @param {Promise<string>} version text\n     */\n    queryNodeModuleLatestVersion(name) {\n        return new Promise((resolve, reject) => {\n            let version;\n            utils_1.execCommand(\"npm\", [\"info\", name, \"version\"], {\n                stdio: \"pipe\",\n                spinner: null,\n                stdout: (data) => {\n                    version = utils_1._.trim(data);\n                },\n            })\n                .then(() => {\n                resolve(version);\n            })\n                .catch((reason) => {\n                reject(reason);\n            });\n        });\n    }\n    /**\n     * 既定の開発時の依存モジュールリストの取得\n     * 必要に応じてオーバーライド\n     *\n     * @return {IDependency}\n     */\n    get defaultDevDependencies() {\n        const base = [\n            { name: \"convert-source-map\", version: undefined, },\n            { name: \"del\", version: undefined, },\n            { name: \"eslint\", version: undefined, },\n            { name: \"npm-run-all\", version: undefined, },\n            { name: \"plato\", version: undefined, },\n            { name: \"source-map\", version: undefined, },\n            { name: \"source-map-loader\", version: undefined, },\n            { name: \"tslint\", version: undefined, },\n            { name: \"typedoc\", version: undefined, },\n            { name: \"typescript\", version: undefined, },\n        ];\n        const minify = [\n            { name: \"uglify-js\", version: undefined, es: [\"es5\"], },\n            { name: \"uglify-es\", version: undefined, es: [\"es2015\"], },\n        ];\n        let extra = [];\n        if (this._config.minify) {\n            extra = extra.concat(minify);\n        }\n        if (this.isEnableTool(\"webpack\")) {\n            extra.push({ name: \"webpack\", version: undefined, });\n        }\n        if (this.isEnableTool(\"nyc\")) {\n            extra.push({ name: \"nyc\", version: undefined, });\n        }\n        if (this.isEnableTool(\"testem\")) {\n            extra.push({ name: \"testem\", version: undefined, });\n        }\n        if (this.isEnableTool(\"phantomjs-prebuilt\")) {\n            extra.push({ name: \"phantomjs-prebuilt\", version: undefined, });\n        }\n        return utils_1._.sortBy(base.concat(extra), (depend) => depend.name);\n    }\n    /**\n     * dependencies の template paramaeter を取得\n     *\n     * @param  {IDependency[]} dependencies 依存関係リスト\n     * @return {{ name: string; version: string; last?: boolean; }[]} テンプレートパラメータに指定する配列\n     */\n    queryDependenciesParam(dependencies) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.progress(\"base.create.queryVersion\");\n            const depends = dependencies\n                .filter((depend) => {\n                if (null == depend.es) {\n                    return true;\n                }\n                else {\n                    return !!depend.es.find((esVersion) => {\n                        return this._config.es === esVersion;\n                    });\n                }\n            });\n            utils_1.debug(JSON.stringify(depends, null, 4));\n            const progress = (context) => {\n                if (\"string\" === typeof context && !this._config.settings.silent) {\n                    const spinner = utils_1.getSpinner(utils_1.chalk.yellow(context), 5);\n                    spinner.start();\n                    return spinner;\n                }\n                else if (context) {\n                    context.stop(true);\n                }\n            };\n            for (let i = 0, n = depends.length; i < n; i++) {\n                if (null == depends[i].version) {\n                    const spinner = progress(depends[i].name);\n                    depends[i].version = \"^\" + (yield this.queryNodeModuleLatestVersion(depends[i].name));\n                    progress(spinner);\n                }\n                if (i === n - 1) {\n                    depends[i].last = true;\n                }\n            }\n            return depends;\n        });\n    }\n    /**\n     * webpack.config.js の template paramaeter を取得\n     *\n     * @return {String} libraryTarget に指定する文字列\n     */\n    queryWebpackLibraryTarget() {\n        switch (this._config.module) {\n            case \"commonjs\":\n                return \"commonjs2\";\n            case \"amd\":\n                return \"amd\";\n            case \"umd\":\n                return \"umd\";\n            default:\n                return undefined;\n        }\n    }\n    /**\n     * eslintrc の env に指定する template paramaeter を取得\n     *\n     * @return {Object} env に指定するテンプレートパラメータオブジェクト\n     */\n    queryEsLintEnvParam() {\n        const compileSetting = this._config;\n        return {\n            es6: \"es5\" !== compileSetting.es,\n            node: \"web\" !== compileSetting.env,\n        };\n    }\n    /**\n     * IBuildTargetConfigration.tools プロパティの指定状況を取得\n     *\n     * @param  {String}  name ツール名を指定\n     * @return {Boolean} true: 指定されている / false: 指定されていない\n     */\n    isEnableTool(name) {\n        return !!this._config.tools.find((tool) => name === tool);\n    }\n    ///////////////////////////////////////////////////////////////////////\n    // private methods:\n    /**\n     * create 処理のエントリ\n     */\n    runCreate() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.createBase();\n            yield this.create();\n        });\n    }\n    //___________________________________________________________________________________________________________________//\n    /**\n     * 共通の create 処理\n     */\n    createBase() {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.progress(\"base.create.foundation\");\n            yield this.createProjectDir();\n            yield this.copyBaseStructure();\n            yield this.copyCommonFiles();\n            yield this.copyTaskScripts();\n        });\n    }\n    /**\n     * プロジェクトディレクトリの作成\n     */\n    createProjectDir() {\n        if (utils_1.fs.existsSync(this.rootDir)) {\n            throw Error(utils_1.translate(\"base.create.error.alreadyExist\"));\n        }\n        utils_1.fs.mkdirsSync(this.rootDir);\n    }\n    /**\n     * 共通構成情報のコピー\n     */\n    copyBaseStructure() {\n        this.copyTplDir(\"base/structure\");\n    }\n    /**\n     * 基本ファイルのコピー\n     * template のコピーも行う\n     */\n    copyCommonFiles() {\n        const srcDir = utils_1.templatePath(\"base\");\n        const dstDir = this.rootDir;\n        // .npmignore\n        utils_1.copyTpl(path.join(srcDir, \".npmignore\"), path.join(dstDir, \".npmignore\"), this._config.structureConfig);\n        // BANNER\n        utils_1.fs.copySync(path.join(srcDir, \"_BANNER\"), path.join(dstDir, \"BANNER\"));\n        // LICENSE\n        switch (this._config.license) {\n            case \"Apache-2.0\":\n                utils_1.fs.copySync(path.join(srcDir, \"_LICENSE.Apache-2.0\"), path.join(dstDir, \"LICENSE\"));\n                break;\n            case \"MIT\":\n                utils_1.copyTpl(path.join(srcDir, \"_LICENSE.MIT\"), path.join(dstDir, \"LICENSE\"), this._config.copyright);\n                break;\n            default:\n                break;\n        }\n        // NOTICE\n        utils_1.fs.copySync(path.join(srcDir, \"_NOTICE\"), path.join(dstDir, \"NOTICE\"));\n        // build tools: webpack\n        if (this.isEnableTool(\"webpack\")) {\n            const param = {\n                nodejs: this._config.nodejs,\n                guide: true,\n                taskPath: this._config.structureConfig.task,\n            };\n            utils_1.copyTpl(path.join(srcDir, \"tools/webpack/_webpack.config.js\"), path.join(dstDir, \"webpack.config.js\"), param, { delimiters: \"<% %>\" });\n        }\n    }\n    /**\n     * task script のコピー\n     */\n    copyTaskScripts() {\n        const srcDir = utils_1.templatePath(\"base/task\");\n        const dstDir = path.join(this.rootDir, this._config.structureConfig.task);\n        this.taskList.forEach((task) => {\n            utils_1.fs.copySync(path.join(srcDir, task), path.join(dstDir, task));\n        });\n    }\n}\nexports.GeneratorBase = GeneratorBase;\n\n\n/***/ }),\n/* 16 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Utils = __webpack_require__(2);\nexports.Utils = Utils;\n\n\n/***/ }),\n/* 17 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst settings_1 = __webpack_require__(4);\nconst library_1 = __webpack_require__(8);\nconst mobile_1 = __webpack_require__(10);\nconst desktop_1 = __webpack_require__(6);\nconst web_1 = __webpack_require__(12);\n__export(__webpack_require__(0));\n__export(__webpack_require__(8));\n__export(__webpack_require__(10));\n__export(__webpack_require__(6));\n__export(__webpack_require__(12));\n/**\n * generator 生成関数\n */\nfunction newGenerator(config) {\n    switch (config.projectType) {\n        case \"library\":\n            return library_1.newGeneratorLibrary(config);\n        case \"mobile\":\n            return mobile_1.newGeneratorMobile(config);\n        case \"desktop\":\n            return desktop_1.newGeneratorDesktop(config);\n        case \"web\":\n            return web_1.newGeneratorWeb(config);\n        default:\n            settings_1.assert(false, \"unsupported project kind: \" + config.projectType);\n            return null;\n    }\n}\nexports.newGenerator = newGenerator;\n\n\n/***/ }),\n/* 18 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst path = __webpack_require__(1);\nconst os = __webpack_require__(13);\nconst child_process_1 = __webpack_require__(19);\nconst libs_1 = __webpack_require__(3);\nconst settings_1 = __webpack_require__(4);\n///////////////////////////////////////////////////////////////////////\n// exports methods:\n/**\n * Handle command line error and kill process.\n * When the application received error from cli, please call this method.\n *\n * @param {String} error  error information.\n */\nfunction handleError(error) {\n    settings_1.assert(false, error);\n}\nexports.handleError = handleError;\n//___________________________________________________________________________________________________________________//\n/**\n * \"templates\" ディレクトリからのパスを取得.\n *\n * @param  {String} target ターゲットを指定. null の場合は、templates を返却\n * @return {String} templates/hogehoge\n */\nfunction templatePath(target) {\n    if (null == target) {\n        return path.join(settings_1.getLibPath(), \"templates\");\n    }\n    else {\n        return path.join(settings_1.getLibPath(), \"templates\", target);\n    }\n}\nexports.templatePath = templatePath;\n//___________________________________________________________________________________________________________________//\n/**\n * Get spinner instance.\n * CLI helper.\n *\n * @param  {String}  [format]  spinner format string.\n * @param  {Number}  [index]   spinner index defined by cli-spinner. (default: random [0-29])\n * @return {Spinner} cli-spinner instance.\n */\nfunction getSpinner(format, index) {\n    const spinners = [\n        \"|/-\\\\\",\n        \"┤┘┴└├┌┬┐\",\n        \"◢◣◤◥\",\n        \"▌▀▐▄\",\n        \"▉▊▋▌▍▎▏▎▍▌▋▊▉\",\n        \"▁▃▄▅▆▇█▇▆▅▄▃\",\n        \"☱☲☴\",\n        \".oO@*\",\n        \"◐◓◑◒\",\n        ////\n        \"◡◡ ⊙⊙ ◠◠\",\n        \"■□▪▫\",\n        \"←↖↑↗→↘↓↙\",\n        \".oO°Oo.\",\n    ];\n    const fmt = format || \"%s\";\n    const spinner = new libs_1.Spinner(fmt);\n    const idx = (null != index && 0 <= index && index < 14) ? index : Math.floor(Math.random() * 10);\n    spinner.setSpinnerString(spinners[idx]);\n    return spinner;\n}\nexports.getSpinner = getSpinner;\n/**\n * Normalize text line-feed.\n * for windows git user.\n *\n * @param  {String}               text      input text.\n * @param  {NormalizeTextOptions} [options] option.\n * @return {String} normalized text.\n */\nfunction normalizeText(text, options) {\n    const opt = libs_1.$.extend({}, {\n        eol: os.EOL,\n        bom: true,\n    }, options);\n    text = text\n        .replace(/^\\ufeff/gm, \"\") // remove bom\n        .replace(/\\r\\n/gm, \"\\n\") // once \"\\n\"\n        .replace(/\\r/gm, \"\\n\");\n    if (opt.bom) {\n        text = \"\\ufeff\" + text;\n    }\n    if (\"\\n\" !== opt.eol) {\n        text = text.replace(/\\n/gm, opt.eol);\n    }\n    if (opt.tab) {\n        const spaces = (() => {\n            let s = \"\";\n            for (let i = 0; i < opt.tab; i++) {\n                s += \" \";\n            }\n            return s;\n        })();\n        text = text.replace(/\\t/gm, spaces);\n    }\n    return text;\n}\nexports.normalizeText = normalizeText;\n/**\n * Execute command line by spawn.\n * call spawn. if error occured, cui is killed proccess.\n *\n * @param   {String}               command    main command. ex) \"cordova\"\n * @param   {String[]}             args       command args. ex) [\"plugin\", \"add\", pluginName]\n * @param   {ExecCommandOptions}   [options]  cli-spinner\"s options.\n * @returns {Number} error code\n */\nfunction execCommand(command, args, options) {\n    return new Promise((resolve, reject) => {\n        const opt = libs_1.$.extend({}, {\n            stdio: \"inherit\",\n            spinner: { format: \"%s\" },\n            stdout: (data) => { },\n            stderr: (data) => { },\n        }, options);\n        libs_1.which(command, (error, resolvedCommand) => {\n            if (error) {\n                handleError(JSON.stringify(error));\n            }\n            const spinner = opt.spinner ? getSpinner(opt.spinner.format, opt.spinner.index) : null;\n            if (spinner) {\n                spinner.start();\n            }\n            const child = child_process_1.spawn(resolvedCommand, args, opt)\n                .on(\"error\", handleError)\n                .on(\"close\", (code) => {\n                if (spinner) {\n                    spinner.stop(true);\n                }\n                resolve(code);\n            });\n            if (\"pipe\" === opt.stdio) {\n                child.stdout.on(\"data\", (data) => {\n                    opt.stdout(data.toString());\n                });\n                child.stderr.on(\"data\", (data) => {\n                    opt.stderr(data.toString());\n                });\n            }\n        });\n    });\n}\nexports.execCommand = execCommand;\n/**\n * Copy template with hogan.\n * sync function\n *\n * @param {String}               src       source file path.\n * @param {String}               dst       destination file path.\n * @param {Object}               params    template parameters.\n * @param {CopyTemplateOptions}  [options] options object.\n */\nfunction copyTpl(src, dst, params, options) {\n    const opt = libs_1.$.extend({}, {\n        eol: os.EOL,\n        bom: true,\n        delimiters: \"{{ }}\",\n    }, options);\n    const jst = libs_1.hogan.compile(normalizeText(libs_1.fs.readFileSync(src).toString(), { eol: \"\\n\", bom: false }), opt);\n    const output = normalizeText(jst.render(params), opt);\n    libs_1.fs.ensureFileSync(dst);\n    libs_1.fs.writeFileSync(dst, output, \"utf8\");\n}\nexports.copyTpl = copyTpl;\n//___________________________________________________________________________________________________________________//\n/**\n * GUID generate.\n * returned as Windows registry type format.\n *\n * @return {String}\n */\nfunction createGUID() {\n    return \"{\" + libs_1.uuid.v4().toUpperCase() + \"}\";\n}\nexports.createGUID = createGUID;\n//___________________________________________________________________________________________________________________//\n/**\n * Create XML DOM node.\n *\n * @param   str  string xml format. ex) '<preference name=\"DisallowOverscroll\" value=\"true\"/>'\n * @returns XML Node instance\n */\nfunction str2XmlNode(str) {\n    let fullXML = true;\n    if (!/<?xml/i.test(str)) {\n        fullXML = false;\n    }\n    const $xml = libs_1.$(libs_1.$.parseXML(str));\n    return fullXML ? $xml : $xml.children();\n}\nexports.str2XmlNode = str2XmlNode;\n/**\n * Create XML string from DOM node.\n *\n * @param  {String} str  string xml format. ex) '<preference name=\"DisallowOverscroll\" value=\"true\"/>'\n * @return {jQuery} XML Node instance\n */\nfunction xmlNode2Str($xml) {\n    /* eslint-disable no-undef */\n    return new XMLSerializer().serializeToString($xml[0]);\n    /* eslint-enable no-undef */\n}\nexports.xmlNode2Str = xmlNode2Str;\n/**\n * XML formatter.\n *\n * @param  {String}           str       string xml format. ex) '<preference name=\"DisallowOverscroll\" value=\"true\"/>'\n * @param  {FormatXmlOptions} [options] options object.\n * @return {String} formatted XML\n */\nfunction formatXML(str, options) {\n    const opt = libs_1.$.extend({}, {\n        eol: os.EOL,\n        bom: true,\n        step: 2,\n    }, options);\n    let xml = \"\";\n    let pad = 0;\n    let indent;\n    let node;\n    const strArr = normalizeText(str, { eol: \"\\n\" })\n        .replace(/(>)(<)(\\/*)/g, \"$1\\n$2$3\") // insert LF to each node once.\n        .split(\"\\n\");\n    const spaces = (len) => {\n        let s = \"\";\n        const _indent = len * opt.step;\n        for (let i = 0; i < _indent; i++) {\n            s += \" \";\n        }\n        return s;\n    };\n    for (let i = 0; i < strArr.length; i++) {\n        indent = 0;\n        node = libs_1.$.trim(strArr[i]);\n        if (node.match(/.+<\\/\\w[^>]*>$/)) {\n            indent = 0;\n        }\n        else if (node.match(/^<\\/\\w/)) {\n            if (pad > 0) {\n                pad -= 1;\n            }\n        }\n        else if (node.match(/^<\\w[^>]*[^/]>.*$/)) {\n            indent = 1;\n        }\n        else {\n            indent = 0;\n        }\n        xml += spaces(pad) + node + \"\\n\";\n        pad += indent;\n    }\n    xml = xml\n        .replace(/\\n\\n/gm, \"\\n\")\n        .replace(/^ +\\n/gm, \"\");\n    return normalizeText(xml, opt);\n}\nexports.formatXML = formatXML;\n\n\n/***/ }),\n/* 19 */\n/***/ (function(module, exports) {\n\nmodule.exports = require(\"child_process\");\n\n/***/ }),\n/* 20 */\n/***/ (function(module, exports) {\n\nmodule.exports = require(\"chalk\");\n\n/***/ }),\n/* 21 */\n/***/ (function(module, exports) {\n\nmodule.exports = require(\"cli-spinner\");\n\n/***/ }),\n/* 22 */\n/***/ (function(module, exports) {\n\nmodule.exports = require(\"fs-extra\");\n\n/***/ }),\n/* 23 */\n/***/ (function(module, exports) {\n\nmodule.exports = require(\"glob\");\n\n/***/ }),\n/* 24 */\n/***/ (function(module, exports) {\n\nmodule.exports = require(\"jsdom\");\n\n/***/ }),\n/* 25 */\n/***/ (function(module, exports) {\n\nmodule.exports = require(\"semver-regex\");\n\n/***/ }),\n/* 26 */\n/***/ (function(module, exports) {\n\nmodule.exports = require(\"uuid\");\n\n/***/ }),\n/* 27 */\n/***/ (function(module, exports) {\n\nmodule.exports = require(\"which\");\n\n/***/ }),\n/* 28 */\n/***/ (function(module, exports) {\n\nmodule.exports = require(\"xmldom\");\n\n/***/ }),\n/* 29 */\n/***/ (function(module, exports) {\n\nmodule.exports = require(\"hogan.js\");\n\n/***/ }),\n/* 30 */\n/***/ (function(module, exports) {\n\nmodule.exports = require(\"lodash\");\n\n/***/ }),\n/* 31 */\n/***/ (function(module, exports) {\n\nmodule.exports = require(\"underscore.string\");\n\n/***/ }),\n/* 32 */\n/***/ (function(module, exports) {\n\nmodule.exports = require(\"jquery\");\n\n/***/ }),\n/* 33 */\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(14);\n\n\n/***/ })\n/******/ ]);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAgNDU5OTRmYzUyNTMwMGJmNjZjZTEiLCJjZHA6Ly8vY2RwLWxpYi9nZW5lcmF0b3JzL2Jhc2UvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsLyBcInBhdGhcIiIsImNkcDovLy9jZHAtbGliL3V0aWxzL2luZGV4LnRzIiwiY2RwOi8vL2NkcC1saWIvdXRpbHMvbGlicy50cyIsImNkcDovLy9jZHAtbGliL3V0aWxzL3NldHRpbmdzLnRzIiwiY2RwOi8vL2NkcC1saWIvZ2VuZXJhdG9ycy9kZXNrdG9wL2dlbmVyYXRvci1lbGVjdG9yb24udHMiLCJjZHA6Ly8vY2RwLWxpYi9nZW5lcmF0b3JzL2Rlc2t0b3AvaW5kZXgudHMiLCJjZHA6Ly8vY2RwLWxpYi9nZW5lcmF0b3JzL2xpYnJhcnkvZ2VuZXJhdG9yLW1vZHVsZS50cyIsImNkcDovLy9jZHAtbGliL2dlbmVyYXRvcnMvbGlicmFyeS9pbmRleC50cyIsImNkcDovLy9jZHAtbGliL2dlbmVyYXRvcnMvbW9iaWxlL2dlbmVyYXRvci1jb3Jkb3ZhLnRzIiwiY2RwOi8vL2NkcC1saWIvZ2VuZXJhdG9ycy9tb2JpbGUvaW5kZXgudHMiLCJjZHA6Ly8vY2RwLWxpYi9nZW5lcmF0b3JzL3dlYi9nZW5lcmF0b3ItYnJvd3Nlci50cyIsImNkcDovLy9jZHAtbGliL2dlbmVyYXRvcnMvd2ViL2luZGV4LnRzIiwid2VicGFjazovLy9leHRlcm5hbC8gXCJvc1wiIiwiY2RwOi8vL2NkcC1saWIvY2RwLWxpYi50cyIsImNkcDovLy9jZHAtbGliL2dlbmVyYXRvcnMvYmFzZS9nZW5lcmF0b3ItYmFzZS50cyIsImNkcDovLy9jZHAtbGliL2dlbmVyYXRvcnMvYmFzZS9pbnRlcmZhY2VzLnRzIiwiY2RwOi8vL2NkcC1saWIvZ2VuZXJhdG9ycy9pbmRleC50cyIsImNkcDovLy9jZHAtbGliL3V0aWxzL3Rvb2xzLnRzIiwid2VicGFjazovLy9leHRlcm5hbC8gXCJjaGlsZF9wcm9jZXNzXCIiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsLyB7XCJjb21tb25qc1wiOlwiY2hhbGtcIixcImNvbW1vbmpzMlwiOlwiY2hhbGtcIn0iLCJ3ZWJwYWNrOi8vL2V4dGVybmFsLyB7XCJjb21tb25qc1wiOlwiY2xpLXNwaW5uZXJcIixcImNvbW1vbmpzMlwiOlwiY2xpLXNwaW5uZXJcIn0iLCJ3ZWJwYWNrOi8vL2V4dGVybmFsLyB7XCJjb21tb25qc1wiOlwiZnMtZXh0cmFcIixcImNvbW1vbmpzMlwiOlwiZnMtZXh0cmFcIn0iLCJ3ZWJwYWNrOi8vL2V4dGVybmFsLyB7XCJjb21tb25qc1wiOlwiZ2xvYlwiLFwiY29tbW9uanMyXCI6XCJnbG9iXCJ9Iiwid2VicGFjazovLy9leHRlcm5hbC8ge1wiY29tbW9uanNcIjpcImpzZG9tXCIsXCJjb21tb25qczJcIjpcImpzZG9tXCJ9Iiwid2VicGFjazovLy9leHRlcm5hbC8ge1wiY29tbW9uanNcIjpcInNlbXZlci1yZWdleFwiLFwiY29tbW9uanMyXCI6XCJzZW12ZXItcmVnZXhcIn0iLCJ3ZWJwYWNrOi8vL2V4dGVybmFsLyB7XCJjb21tb25qc1wiOlwidXVpZFwiLFwiY29tbW9uanMyXCI6XCJ1dWlkXCJ9Iiwid2VicGFjazovLy9leHRlcm5hbC8ge1wiY29tbW9uanNcIjpcIndoaWNoXCIsXCJjb21tb25qczJcIjpcIndoaWNoXCJ9Iiwid2VicGFjazovLy9leHRlcm5hbC8ge1wiY29tbW9uanNcIjpcInhtbGRvbVwiLFwiY29tbW9uanMyXCI6XCJ4bWxkb21cIn0iLCJ3ZWJwYWNrOi8vL2V4dGVybmFsLyB7XCJyb290XCI6XCJIb2dhblwiLFwiY29tbW9uanNcIjpcImhvZ2FuLmpzXCIsXCJjb21tb25qczJcIjpcImhvZ2FuLmpzXCIsXCJhbWRcIjpcImhvZ2FuLmpzXCJ9Iiwid2VicGFjazovLy9leHRlcm5hbC8ge1wicm9vdFwiOlwiX1wiLFwiY29tbW9uanNcIjpcImxvZGFzaFwiLFwiY29tbW9uanMyXCI6XCJsb2Rhc2hcIn0iLCJ3ZWJwYWNrOi8vL2V4dGVybmFsLyB7XCJyb290XCI6XCJfXCIsXCJjb21tb25qc1wiOlwidW5kZXJzY29yZS5zdHJpbmdcIixcImNvbW1vbmpzMlwiOlwidW5kZXJzY29yZS5zdHJpbmdcIn0iLCJ3ZWJwYWNrOi8vL2V4dGVybmFsLyB7XCJyb290XCI6XCJqUXVlcnlcIixcImNvbW1vbmpzXCI6XCJqcXVlcnlcIixcImNvbW1vbmpzMlwiOlwianF1ZXJ5XCIsXCJhbWRcIjpcImpxdWVyeVwifSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOzs7QUFHQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxtREFBMkMsY0FBYzs7QUFFekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBMkIsMEJBQTBCLEVBQUU7QUFDdkQseUNBQWlDLGVBQWU7QUFDaEQ7QUFDQTtBQUNBOztBQUVBO0FBQ0EsOERBQXNELCtEQUErRDs7QUFFckg7QUFDQTs7QUFFQTtBQUNBOzs7Ozs7Ozs7Ozs7O0FDaEVBLGtDQUE2QjtBQUM3QixrQ0FBaUM7Ozs7Ozs7QUNEakMsaUM7Ozs7Ozs7Ozs7OztBQ0FBLGlDQUF1QjtBQUN2QixrQ0FBd0I7QUFDeEIsaUNBQTJCOzs7Ozs7Ozs7O0FDRjNCLG1DQUErQjtBQXlDM0IsZ0JBQUU7QUF4Q04scUNBQTZCO0FBeUN6QixvQkFBSTtBQXhDUixzQ0FBa0M7QUF5QzlCLHNCQUFLO0FBeENULG1DQUE2QjtBQUM3QixtQ0FBd0M7QUFDeEMsc0NBQStCO0FBeUMzQixzQkFBSztBQXhDVCxxQ0FBNkI7QUF5Q3pCLG9CQUFJO0FBeENSLHNDQUErQjtBQXlDM0Isc0JBQUs7QUF4Q1QsNENBQTRDO0FBeUN4QyxrQ0FBVztBQXhDZiw4Q0FBc0M7QUF5Q2xDLGtCQXpDSyxxQkFBTyxDQXlDTDtBQXZDWCxNQUFNLENBQUMsR0FBaUIsQ0FBQztJQUNyQixNQUFNLE9BQU8sR0FBRyxDQUFDO1FBQ2IsTUFBTSxLQUFLLEdBQUcsbUJBQU8sQ0FBQyxFQUFPLENBQUMsQ0FBQztRQUMvQixFQUFFLENBQUMsQ0FBQyxVQUFVLEtBQUssT0FBTyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztZQUNwQyxNQUFNLENBQUMsSUFBSSxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUMsTUFBTSxDQUFDO1FBQ3BDLENBQUM7UUFBQyxJQUFJLENBQUMsQ0FBQztZQUNKLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUMsV0FBVyxDQUFDO1FBQ3JDLENBQUM7SUFDTCxDQUFDLENBQUMsRUFBRSxDQUFDO0lBRUwsZUFBZTtJQUNmLENBQUMsQ0FBQyxJQUFTO1FBQ1A7Ozs7V0FJRztRQUNILE1BQU0sTUFBTSxHQUFHLG1CQUFPLENBQUMsRUFBUSxDQUFDLENBQUM7UUFDakMsSUFBSSxDQUFDLFNBQVMsR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDO1FBQ2xDLHlEQUF5RDtRQUNuRCxNQUFPLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxhQUFhLEdBQUcsTUFBTSxDQUFDLGFBQWEsQ0FBQztJQUM1RSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUVaLE1BQU0sQ0FBQyxtQkFBTyxDQUFDLEVBQVEsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ3RDLENBQUMsQ0FBQyxFQUFFLENBQUM7QUFTRCxjQUFDO0FBTkwsTUFBTSxFQUFFLEdBQWlDLEVBQUUsQ0FBQyxLQUFLLENBQU0sRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7QUFPM0QsZUFBQzs7Ozs7Ozs7OztBQzdDWCxvQ0FBNkI7QUFDN0Isc0NBQStCO0FBYy9CLElBQUksU0FBUyxHQUFvQjtJQUM3QixLQUFLLEVBQUUsS0FBSztJQUNaLE9BQU8sRUFBRSxLQUFLO0lBQ2QsTUFBTSxFQUFFLEtBQUs7SUFDYixJQUFJLEVBQUUsT0FBTztDQUNoQixDQUFDO0FBRUYsSUFBSSxRQUFnQixDQUFDLENBQUcsdUJBQXVCO0FBRS9DLHVFQUF1RTtBQUN2RSxtQkFBbUI7QUFFbkI7Ozs7R0FJRztBQUNIO0lBQ0ksTUFBTSxDQUFDLFFBQUMsQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0FBQ25DLENBQUM7QUFGRCxrQ0FFQztBQUVEOzs7O0dBSUc7QUFDSCxxQkFBNEIsUUFBeUI7SUFDakQsRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztRQUNYLFNBQVMsQ0FBQyxLQUFLLEdBQU8sUUFBUSxDQUFDLEtBQUssSUFBVyxTQUFTLENBQUMsS0FBSyxDQUFDO1FBQy9ELFNBQVMsQ0FBQyxPQUFPLEdBQUssUUFBUSxDQUFDLE9BQU8sSUFBUyxTQUFTLENBQUMsT0FBTyxDQUFDO1FBQ2pFLFNBQVMsQ0FBQyxNQUFNLEdBQU0sUUFBUSxDQUFDLE1BQU0sSUFBVSxTQUFTLENBQUMsTUFBTSxDQUFDO1FBQ2hFLFNBQVMsQ0FBQyxTQUFTLEdBQUcsUUFBUSxDQUFDLFNBQVMsSUFBTyxTQUFTLENBQUMsU0FBUyxDQUFDO1FBQ25FLFNBQVMsQ0FBQyxJQUFJLEdBQVEsUUFBUSxDQUFDLElBQUksSUFBWSxTQUFTLENBQUMsSUFBSSxDQUFDO0lBQ2xFLENBQUM7SUFBQyxJQUFJLENBQUMsQ0FBQztRQUNKLFNBQVMsR0FBRztZQUNSLEtBQUssRUFBRSxLQUFLO1lBQ1osT0FBTyxFQUFFLEtBQUs7WUFDZCxNQUFNLEVBQUUsS0FBSztZQUNiLElBQUksRUFBRSxPQUFPO1NBQ2hCLENBQUM7SUFDTixDQUFDO0FBQ0wsQ0FBQztBQWZELGtDQWVDO0FBRUQ7Ozs7R0FJRztBQUNIO0lBQ0ksRUFBRSxDQUFDLENBQUMsSUFBSSxJQUFJLFFBQVEsQ0FBQyxDQUFDLENBQUM7UUFDbkIsTUFBTSxTQUFTLEdBQUcsQ0FBQyxDQUFDO1FBQ3BCLElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQztRQUNkLFFBQVEsR0FBRyxTQUFTLENBQUM7UUFDckIsT0FBTyxJQUFJLEVBQUUsQ0FBQztZQUNWLEVBQUUsQ0FBQyxDQUFDLFNBQVMsSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDO2dCQUNyQixNQUFNLEtBQUssQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO1lBQzdDLENBQUM7WUFDRCxRQUFRLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDckMsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsU0FBUyxDQUFDLENBQUM7WUFDN0MsRUFBRSxDQUFDLENBQUMsU0FBRSxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQzNCLFFBQVEsR0FBRyxLQUFLLENBQUM7Z0JBQ2pCLEtBQUssQ0FBQztZQUNWLENBQUM7WUFDRCxLQUFLLEVBQUUsQ0FBQztRQUNaLENBQUM7SUFDTCxDQUFDO0lBQ0QsTUFBTSxDQUFDLFFBQVEsQ0FBQztBQUNwQixDQUFDO0FBbkJELGdDQW1CQztBQUVEOzs7O0dBSUc7QUFDSDtJQUNJLE1BQU0sQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDO0FBQy9CLENBQUM7QUFGRCxvQ0FFQztBQUVEOzs7Ozs7R0FNRztBQUNILGFBQW9CLE9BQWdCLEVBQUUsR0FBRyxjQUFxQjtJQUMxRCxFQUFFLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1FBQ3BCLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxjQUFjLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztZQUM1QixPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxjQUFjLENBQUMsQ0FBQztRQUN6QyxDQUFDO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDSixPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3pCLENBQUM7SUFDTCxDQUFDO0FBQ0wsQ0FBQztBQVJELGtCQVFDO0FBRUQ7Ozs7OztHQU1HO0FBQ0gsZUFBc0IsT0FBZ0IsRUFBRSxHQUFHLGNBQXFCO0lBQzVELEVBQUUsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLE1BQU0sSUFBSSxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztRQUN6QyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsY0FBYyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7WUFDNUIsT0FBTyxDQUFDLEtBQUssQ0FBQyxTQUFTLEdBQUcsT0FBTyxFQUFFLGNBQWMsQ0FBQyxDQUFDO1FBQ3ZELENBQUM7UUFBQyxJQUFJLENBQUMsQ0FBQztZQUNKLE9BQU8sQ0FBQyxLQUFLLENBQUMsU0FBUyxHQUFHLE9BQU8sQ0FBQyxDQUFDO1FBQ3ZDLENBQUM7SUFDTCxDQUFDO0FBQ0wsQ0FBQztBQVJELHNCQVFDO0FBRUQ7Ozs7Ozs7R0FPRztBQUNILGdCQUF1QixJQUFjLEVBQUUsT0FBZ0IsRUFBRSxHQUFHLGNBQXFCO0lBQzdFLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUNSLEVBQUUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBQ2xCLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxjQUFjLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztnQkFDNUIsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsY0FBYyxDQUFDLENBQUM7WUFDMUMsQ0FBQztZQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNKLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDMUIsQ0FBQztRQUNMLENBQUM7UUFBQyxJQUFJLENBQUMsQ0FBQztZQUNKLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxjQUFjLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztnQkFDNUIsT0FBTyxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsY0FBYyxDQUFDLENBQUM7WUFDM0MsQ0FBQztZQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNKLE9BQU8sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDM0IsQ0FBQztZQUNELE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDcEIsQ0FBQztJQUNMLENBQUM7QUFDTCxDQUFDO0FBakJELHdCQWlCQztBQUVELElBQUksS0FBVSxDQUFDO0FBRWY7Ozs7O0dBS0c7QUFDSCxtQkFBMEIsR0FBVztJQUNqQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDVCxJQUFJLENBQUM7WUFDRCxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFFLENBQUMsWUFBWSxDQUM5QixJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxFQUFFLGFBQWEsRUFBRSxXQUFXLEdBQUcsU0FBUyxDQUFDLElBQUksR0FBRyxPQUFPLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FDckcsQ0FBQztRQUNOLENBQUM7UUFBQyxLQUFLLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBQ2IsTUFBTSxLQUFLLENBQUMsc0NBQXNDLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3hFLENBQUM7SUFDTCxDQUFDO0lBRUQsSUFBSSxPQUFPLEdBQUcsUUFBQyxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDbEMsTUFBTSxLQUFLLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUM3QixPQUFPLENBQUMsR0FBRyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDdEIsTUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQzNCLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDaEIsT0FBTyxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM1QixDQUFDO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDSixNQUFNLENBQUMsS0FBSyxFQUFFLDBCQUEwQixHQUFHLEdBQUcsQ0FBQyxDQUFDO1lBQ2hELE1BQU0sQ0FBQyxJQUFJLENBQUM7UUFDaEIsQ0FBQztJQUNMLENBQUM7SUFDRCxNQUFNLENBQUMsT0FBTyxDQUFDO0FBQ25CLENBQUM7QUF2QkQsOEJBdUJDOzs7Ozs7Ozs7QUN6TEQsc0RBQXNEO0FBQ3RELG1DQUFtQzs7Ozs7Ozs7OztBQUVuQyxzQ0FBb0U7QUFHcEU7OztHQUdHO0FBQ0gsdUJBQStCLFNBQVEsb0JBQWE7SUFFaEQsdUVBQXVFO0lBQ3ZFLDZCQUE2QjtJQUU3Qjs7T0FFRztJQUNILG9CQUFvQjtRQUNoQixNQUFNLENBQUM7WUFDSCxHQUFHLEVBQUUsS0FBSztZQUNWLEdBQUcsRUFBRSxTQUFTO1lBQ2QsS0FBSyxFQUFFLEtBQUs7WUFDWixHQUFHLEVBQUUsTUFBTTtZQUNYLElBQUksRUFBRSxPQUFPO1lBQ2IsSUFBSSxFQUFFLE9BQU87WUFDYixLQUFLLEVBQUUsUUFBUTtZQUNmLFNBQVMsRUFBRTtnQkFDUCxNQUFNLEVBQUUsU0FBUztnQkFDakIsVUFBVSxFQUFFLGFBQWE7Z0JBQ3pCLFFBQVEsRUFBRSxXQUFXO2FBQ3hCO1NBQ0osQ0FBQztJQUNOLENBQUM7SUFFRDs7O09BR0c7SUFDRyxNQUFNOztZQUNSLFFBQVE7WUFDUixNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO1FBQ2pELENBQUM7S0FBQTtJQUVEOztPQUVHO0lBQ0gsSUFBSSxRQUFRO1FBQ1IsTUFBTSxDQUFDO1lBQ0gsV0FBVztZQUNYLFVBQVU7WUFDVixXQUFXO1lBQ1gsbUJBQW1CO1lBQ25CLHVCQUF1QjtTQUMxQixDQUFDO0lBQ04sQ0FBQztJQUVELHVFQUF1RTtJQUN2RSxtQkFBbUI7SUFFbkI7O09BRUc7SUFDSCxJQUFZLE1BQU07UUFDZCxNQUFNLENBQTBCLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDakQsQ0FBQztDQUNKO0FBeERELDhDQXdEQzs7Ozs7Ozs7Ozs7OztBQ2pFRCxxREFBMEQ7QUFHMUQsaUNBQXNDO0FBRXRDOztHQUVHO0FBQ0gsNkJBQW9DLE1BQTRCO0lBQzVELE1BQU0sQ0FBQyxJQUFJLHVDQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ3pDLENBQUM7QUFGRCxrREFFQzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDWEQsb0NBQTZCO0FBQzdCLG1DQUF5QjtBQUN6QixzQ0FNaUI7QUFHakIsTUFBTSxFQUFFLEdBQWMsWUFBSyxDQUFDLEVBQUUsQ0FBQztBQUMvQixNQUFNLElBQUksR0FBWSxZQUFLLENBQUMsSUFBSSxDQUFDO0FBQ2pDLE1BQU0sQ0FBQyxHQUFlLFlBQUssQ0FBQyxDQUFDLENBQUM7QUFDOUIsTUFBTSxDQUFDLEdBQWUsWUFBSyxDQUFDLENBQUMsQ0FBQztBQUM5QixNQUFNLEtBQUssR0FBVyxZQUFLLENBQUMsS0FBSyxDQUFDO0FBQ2xDLE1BQU0sWUFBWSxHQUFJLFlBQUssQ0FBQyxZQUFZLENBQUM7QUFDekMsTUFBTSxPQUFPLEdBQVMsWUFBSyxDQUFDLE9BQU8sQ0FBQztBQUVwQzs7O0dBR0c7QUFDSCxxQkFBNkIsU0FBUSxvQkFBYTtJQUU5Qyx1RUFBdUU7SUFDdkUsNkJBQTZCO0lBRTdCOztPQUVHO0lBQ0gsb0JBQW9CO1FBQ2hCLE1BQU0sQ0FBQztZQUNILEdBQUcsRUFBRSxLQUFLO1lBQ1YsR0FBRyxFQUFFLE1BQU07WUFDWCxLQUFLLEVBQUUsT0FBTztZQUNkLEdBQUcsRUFBRSxNQUFNO1lBQ1gsSUFBSSxFQUFFLE9BQU87WUFDYixJQUFJLEVBQUUsT0FBTztZQUNiLEtBQUssRUFBRSxRQUFRO1lBQ2YsSUFBSSxFQUFFLE9BQU87U0FDaEIsQ0FBQztJQUNOLENBQUM7SUFFRDs7O09BR0c7SUFDRyxNQUFNOztZQUNSLE1BQU0sSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUM7WUFDL0IsTUFBTSxJQUFJLENBQUMsd0JBQXdCLEVBQUUsQ0FBQztZQUN0QyxNQUFNLElBQUksQ0FBQyxxQkFBcUIsRUFBRSxDQUFDO1lBQ25DLE1BQU0sSUFBSSxDQUFDLG9CQUFvQixFQUFFLENBQUM7WUFDbEMsTUFBTSxJQUFJLENBQUMsMEJBQTBCLEVBQUUsQ0FBQztRQUM1QyxDQUFDO0tBQUE7SUFFRDs7T0FFRztJQUNILElBQUksUUFBUTtRQUNSLE1BQU0sQ0FBQztZQUNILFdBQVc7WUFDWCxVQUFVO1lBQ1YsV0FBVztZQUNYLHFCQUFxQjtZQUNyQixtQkFBbUI7U0FDdEIsQ0FBQztJQUNOLENBQUM7SUFFRCx1RUFBdUU7SUFDdkUscUJBQXFCO0lBRXJCOzs7OztPQUtHO0lBQ0gsSUFBYyxzQkFBc0I7UUFDaEMsTUFBTSxPQUFPLEdBQUcsS0FBSyxDQUFDLHNCQUFzQixDQUFDLE1BQU0sQ0FBQztZQUNoRCxFQUFFLElBQUksRUFBRSxnQkFBZ0IsRUFBUSxPQUFPLEVBQUUsU0FBUyxHQUFHO1lBQ3JELEVBQUUsSUFBSSxFQUFFLFlBQVksRUFBWSxPQUFPLEVBQUUsU0FBUyxHQUFHO1lBQ3JELEVBQUUsSUFBSSxFQUFFLHNCQUFzQixFQUFFLE9BQU8sRUFBRSxTQUFTLEdBQUc7U0FDeEQsQ0FBQyxDQUFDO1FBRUgsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDO1FBQ2pCLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztZQUNyQixLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxFQUFFLGNBQWMsRUFBRSxPQUFPLEVBQUUsUUFBUSxHQUFHLENBQUMsQ0FBQztRQUM3RCxDQUFDO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDSixLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxFQUFFLFdBQVcsRUFBRSxPQUFPLEVBQUUsU0FBUyxHQUFHLENBQUMsQ0FBQztRQUMzRCxDQUFDO1FBRUQsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLE1BQU0sS0FBSyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDcEUsQ0FBQztJQUVELHVFQUF1RTtJQUN2RSxtQkFBbUI7SUFFbkI7O09BRUc7SUFDSCxJQUFZLE1BQU07UUFDZCxNQUFNLENBQXVCLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDOUMsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0ssaUJBQWlCO1FBQ3JCLGNBQWM7UUFDZCxFQUFFLENBQUMsQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO1lBQ2pDLEVBQUUsQ0FBQyxDQUFDLENBQUMsaUNBQWlDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNuRSxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQztZQUNyRCxDQUFDO1lBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ0osSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7WUFDL0UsQ0FBQztRQUNMLENBQUM7UUFDRCxLQUFLLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUM7UUFFL0MsaUJBQWlCO1FBQ2pCLEVBQUUsQ0FBQyxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7WUFDbkMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUM7UUFDdEQsQ0FBQztRQUNELEtBQUssQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQ3ZELENBQUM7SUFFRDs7T0FFRztJQUNLLHdCQUF3QjtRQUM1QixJQUFJLENBQUMsVUFBVSxDQUFDLG1CQUFtQixDQUFDLENBQUM7SUFDekMsQ0FBQztJQUVEOztPQUVHO0lBQ1cscUJBQXFCOztZQUMvQixvQkFBb0I7WUFDcEIsT0FBTyxDQUNILElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxFQUFFLG9CQUFvQixDQUFDLEVBQ3hELElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxtQkFBbUIsQ0FBQyxFQUM1QyxJQUFJLENBQUMsT0FBTyxFQUNaLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxDQUMxQixDQUFDO1lBRUYsV0FBVztZQUNYLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDO2dCQUM3QixxQkFBcUI7Z0JBQ3JCLE9BQU8sQ0FDSCxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsRUFBRSxnQkFBZ0IsQ0FBQyxFQUNwRCxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsZUFBZSxDQUFDLEVBQ3hDLElBQUksQ0FBQyxPQUFPLEVBQ1osRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLEdBQUcsRUFBRSxLQUFLLEdBQUcsQ0FDdkMsQ0FBQztnQkFDRixxQkFBcUI7Z0JBQ3JCLE9BQU8sQ0FDSCxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsRUFBRSxxQkFBcUIsQ0FBQyxFQUN6RCxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRSxlQUFlLENBQUMsRUFDbkYsSUFBSSxDQUFDLE9BQU8sRUFDWixFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsR0FBRyxFQUFFLEtBQUssR0FBRyxDQUN2QyxDQUFDO1lBQ04sQ0FBQztZQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNKLHFCQUFxQjtnQkFDckIsT0FBTyxDQUNILElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxFQUFFLGdDQUFnQyxDQUFDLEVBQ3BFLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxlQUFlLENBQUMsRUFDeEMsSUFBSSxDQUFDLE9BQU8sRUFDWixFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsR0FBRyxFQUFFLEtBQUssR0FBRyxDQUN2QyxDQUFDO1lBQ04sQ0FBQztZQUVELGdCQUFnQjtZQUNoQixPQUFPLENBQ0gsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLEVBQUUsZ0JBQWdCLENBQUMsRUFDcEQsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLElBQUksRUFBRSxRQUFRLEVBQUUsZUFBZSxDQUFDLEVBQ3JGLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxFQUMxQixFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsR0FBRyxFQUFFLEtBQUssR0FBRyxDQUN2QyxDQUFDO1lBRUYsU0FBUztZQUNULEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO2dCQUN0QixPQUFPLENBQ0gsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsc0JBQXNCLENBQUMsRUFBRSxjQUFjLENBQUMsRUFDL0QsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLElBQUksRUFBRSxRQUFRLEVBQUUsYUFBYSxDQUFDLEVBQ25GLElBQUksQ0FBQyxPQUFPLEVBQ1osRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLEdBQUcsRUFBRSxLQUFLLEdBQUcsQ0FDdkMsQ0FBQztnQkFFRixNQUFNLGVBQWUsR0FBRyxZQUFZLENBQUMsNkJBQTZCLENBQUMsQ0FBQztnQkFFcEUsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUU7b0JBQ1osR0FBRyxFQUFFLGVBQWU7b0JBQ3BCLEtBQUssRUFBRSxJQUFJO2lCQUNkLENBQUM7cUJBQ0csT0FBTyxDQUFDLENBQUMsSUFBSTtvQkFDVixFQUFFLENBQUMsUUFBUSxDQUNQLElBQUksQ0FBQyxJQUFJLENBQUMsZUFBZSxFQUFFLElBQUksQ0FBQyxFQUNoQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsSUFBSSxFQUFFLFFBQVEsRUFBRSxJQUFJLENBQUMsQ0FDN0UsQ0FBQztnQkFDTixDQUFDLENBQUMsQ0FBQztZQUNYLENBQUM7WUFFRCxhQUFhO1lBQ2IsT0FBTyxDQUNILElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxFQUFFLFlBQVksQ0FBQyxFQUNoRCxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsWUFBWSxDQUFDLEVBQ3JDLElBQUksQ0FBQyxPQUFPLEVBQ1osRUFBRSxHQUFHLEVBQUUsS0FBSyxHQUFHLENBQ2xCLENBQUM7WUFFRixZQUFZO1lBQ1osT0FBTyxDQUNILElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxFQUFFLFlBQVksQ0FBQyxFQUNoRCxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsV0FBVyxDQUFDLEVBQ3BDLElBQUksQ0FBQyxPQUFPLEVBQ1osRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLENBQzFCLENBQUM7WUFFRixlQUFlO1lBQ2YsSUFBSSxDQUFDLE1BQU0sQ0FBQyxlQUFlLEdBQUcsTUFBTSxJQUFJLENBQUMsc0JBQXNCLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxlQUFlLElBQUksSUFBSSxDQUFDLHNCQUFzQixDQUFDLENBQUM7WUFDNUgsT0FBTyxDQUNILElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxFQUFFLGVBQWUsQ0FBQyxFQUNuRCxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsY0FBYyxDQUFDLEVBQ3ZDLElBQUksQ0FBQyxPQUFPLEVBQ1osRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLEdBQUcsRUFBRSxLQUFLLEdBQUcsQ0FDdkMsQ0FBQztRQUNOLENBQUM7S0FBQTtJQUVEOztPQUVHO0lBQ1csb0JBQW9COztZQUM5QixNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxFQUFFLEtBQUssQ0FBQyxDQUFDO1lBQzlELE1BQU0sS0FBSyxHQUFHO2dCQUNWLFdBQVcsRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQztnQkFDaEMsWUFBWSxFQUFFLE9BQU87Z0JBQ3JCLEtBQUssRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQyxLQUFLO2FBQzVDLENBQUM7WUFFRixNQUFNLE1BQU0sR0FBRyxDQUFDO2dCQUNaLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7b0JBQ3pDLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQyxTQUFTLENBQUMsTUFBTSxJQUFJLEVBQUUsQ0FBQztnQkFDL0QsQ0FBQztnQkFDRCxNQUFNLENBQUMsRUFBRSxDQUFDO1lBQ2QsQ0FBQyxDQUFDLEVBQUUsQ0FBQztZQUVMLFdBQVc7WUFDWCxPQUFPLENBQ0gsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLEVBQUUsS0FBSyxFQUFFLFdBQVcsQ0FBQyxFQUN0RCxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsR0FBRyxFQUFFLE1BQU0sRUFBRSxPQUFPLEdBQUcsS0FBSyxDQUFDLEVBQ2xGLEtBQUssRUFDTCxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsQ0FDMUIsQ0FBQztZQUVGLGdCQUFnQjtZQUNoQixPQUFPLENBQ0gsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLEVBQUUsS0FBSyxFQUFFLGdCQUFnQixDQUFDLEVBQzNELElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQyxJQUFJLEVBQUUsTUFBTSxFQUFFLE9BQU8sR0FBRyxVQUFVLENBQUMsRUFDeEYsS0FBSyxFQUNMLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxDQUMxQixDQUFDO1FBQ04sQ0FBQztLQUFBO0lBRUQ7O09BRUc7SUFDVywwQkFBMEI7O1lBQ3BDLE1BQU0sT0FBTyxHQUFHLENBQUM7Z0JBQ2IsTUFBTSxVQUFVLEdBQUcsWUFBSyxDQUFDLFVBQVUsQ0FBQztnQkFFcEMsTUFBTSxLQUFLLEdBQThCLENBQUMsQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUM7Z0JBRXBGLEtBQUssQ0FBQyxXQUFXLEdBQVMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUM7Z0JBQ25ELEtBQUssQ0FBQyxXQUFXLEdBQVMsVUFBVSxFQUFFLENBQUM7Z0JBQ3ZDLEtBQUssQ0FBQyxLQUFLLEdBQWUsS0FBSyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsc0JBQXNCO2dCQUNqRixLQUFLLENBQUMsWUFBWSxHQUFRLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDO2dCQUNwRCxLQUFLLENBQUMsT0FBTyxHQUFhLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUM7Z0JBRWhELFFBQVE7Z0JBQ1IsS0FBSyxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxDQUFDO2dCQUM3QyxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUM7Z0JBRW5DLEtBQUssQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUM7Z0JBRWhELHVCQUF1QjtnQkFDdkIsS0FBSyxDQUFDLE9BQU8sR0FBRyxFQUFFLENBQUM7Z0JBQ25CLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUM7b0JBQ3ZCLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDO3dCQUNmLFlBQVksRUFBRSxLQUFLLENBQUMsS0FBSyxHQUFHLElBQUk7d0JBQ2hDLFFBQVEsRUFBRSxLQUFLLENBQUMsWUFBWTt3QkFDNUIsUUFBUSxFQUFFLElBQUk7d0JBQ2QsSUFBSSxFQUFFLElBQUk7d0JBQ1YsR0FBRyxFQUFFLElBQUk7d0JBQ1QsT0FBTyxFQUFFLEtBQUs7cUJBQ2pCLENBQUMsQ0FBQztnQkFDUCxDQUFDO2dCQUNELEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztvQkFDckIsa0JBQWtCO29CQUNsQixLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQzt3QkFDZixZQUFZLEVBQUUsS0FBSyxDQUFDLEdBQUcsR0FBRyxJQUFJO3dCQUM5QixRQUFRLEVBQUUsS0FBSyxDQUFDLFlBQVk7d0JBQzVCLFFBQVEsRUFBRSxLQUFLO3dCQUNmLElBQUksRUFBRSxLQUFLO3dCQUNYLEdBQUcsRUFBRSxLQUFLO3dCQUNWLE9BQU8sRUFBRSxJQUFJO3FCQUNoQixDQUFDLENBQUM7Z0JBQ1AsQ0FBQztnQkFFRCxzQkFBc0I7Z0JBQ3RCLEtBQUssQ0FBQyxPQUFPLEdBQUc7b0JBQ1o7d0JBQ0ksWUFBWSxFQUFFLEtBQUssQ0FBQyxJQUFJLEdBQUcsVUFBVTt3QkFDckMsUUFBUSxFQUFFLEtBQUssQ0FBQyxZQUFZLEdBQUcsT0FBTzt3QkFDdEMsUUFBUSxFQUFFLElBQUk7d0JBQ2QsR0FBRyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYTtxQkFDakM7aUJBQ0osQ0FBQztnQkFDRixFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQztvQkFDdEIsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUM7d0JBQ2YsWUFBWSxFQUFFLEtBQUssQ0FBQyxLQUFLLEdBQUcsSUFBSTt3QkFDaEMsUUFBUSxFQUFFLEtBQUssQ0FBQyxZQUFZO3dCQUM1QixRQUFRLEVBQUUsS0FBSzt3QkFDZixHQUFHLEVBQUUsSUFBSTtxQkFDWixDQUFDLENBQUM7Z0JBQ1AsQ0FBQztnQkFFRCxNQUFNLENBQUMsS0FBSyxDQUFDO1lBQ2pCLENBQUMsQ0FBQyxFQUFFLENBQUM7WUFFTCxPQUFPO1lBQ1AsT0FBTyxDQUNILElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLG9CQUFvQixDQUFDLEVBQUUsbUJBQW1CLENBQUMsRUFDbEUsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxXQUFXLEdBQUcsTUFBTSxDQUFDLEVBQ3JELE9BQU8sRUFDUCxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsQ0FDMUIsQ0FBQztZQUVGLFVBQVU7WUFDVixDQUFDO2dCQUNHLE1BQU0sV0FBVyxHQUFHLENBQUMsSUFBWTtvQkFDN0IsTUFBTSxLQUFLLEdBQUcsWUFBSyxDQUFDLEtBQUssQ0FBQztvQkFDMUIsTUFBTSxhQUFhLEdBQUcsWUFBSyxDQUFDLGFBQWEsQ0FBQztvQkFDMUMsTUFBTSxPQUFPLEdBQUc7d0JBQ1osR0FBRyxFQUFFLEVBQUUsQ0FBQyxHQUFHO3dCQUNYLEdBQUcsRUFBRSxJQUFJO3dCQUNULFVBQVUsRUFBRSxPQUFPO3FCQUN0QixDQUFDO29CQUVGLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLG9CQUFvQixDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7b0JBQ2hFLE1BQU0sR0FBRyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLENBQUMsUUFBUSxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDO29CQUM5RyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztnQkFDL0IsQ0FBQyxDQUFDO2dCQUVGLE1BQU0sUUFBUSxHQUFHLENBQUMsSUFBWTtvQkFDMUIsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQzVDLENBQUMsQ0FBQztnQkFFRixNQUFNLFNBQVMsR0FBRyxDQUFDLElBQVk7b0JBQzNCLE1BQU0sQ0FBQyxZQUFLLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO2dCQUNoRCxDQUFDLENBQUM7Z0JBRUYsTUFBTSxLQUFLLEdBQUcsUUFBUSxDQUFDLHFCQUFxQixDQUFDLENBQUM7Z0JBQzlDLE1BQU0sS0FBSyxHQUFHLFNBQVMsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO2dCQUM5QyxNQUFNLEtBQUssR0FBRyxTQUFTLENBQUMsb0JBQW9CLENBQUMsQ0FBQztnQkFFOUMsS0FBSztxQkFDQSxJQUFJLENBQUMsV0FBVyxDQUFDO3FCQUNqQixJQUFJLEVBQUU7cUJBQ04sS0FBSyxDQUFDLEtBQUssQ0FBQztxQkFDWixLQUFLLENBQUMsS0FBSyxDQUFDLENBQ1o7Z0JBRUwsTUFBTSxTQUFTLEdBQUcsWUFBSyxDQUFDLFNBQVMsQ0FBQztnQkFDbEMsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxXQUFXLEdBQUcsU0FBUyxDQUFDLENBQUM7Z0JBQ3pFLEtBQUssQ0FBQyxZQUFLLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7Z0JBQ2hDLEVBQUUsQ0FBQyxhQUFhLENBQUMsT0FBTyxFQUFFLFNBQVMsQ0FBQyxZQUFLLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNuRSxDQUFDLENBQUMsRUFBRSxDQUFDO1FBQ1QsQ0FBQztLQUFBO0NBQ0o7QUF0V0QsMENBc1dDOzs7Ozs7Ozs7Ozs7O0FDNVhELGtEQUFxRDtBQUdyRCxpQ0FBbUM7QUFFbkM7O0dBRUc7QUFDSCw2QkFBb0MsTUFBNEI7SUFDNUQsTUFBTSxDQUFDLElBQUksa0NBQWUsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUN2QyxDQUFDO0FBRkQsa0RBRUM7Ozs7Ozs7OztBQ1hELHNEQUFzRDtBQUN0RCxtQ0FBbUM7Ozs7Ozs7Ozs7QUFFbkMsb0NBQTZCO0FBRTdCLHVDQVlxQjtBQUNyQixzQ0FLaUI7QUFHakI7OztHQUdHO0FBQ0gsc0JBQThCLFNBQVEsb0JBQWE7SUFFL0MsdUVBQXVFO0lBQ3ZFLDZCQUE2QjtJQUU3Qjs7T0FFRztJQUNILG9CQUFvQjtRQUNoQixNQUFNLENBQUM7WUFDSCxHQUFHLEVBQUUsS0FBSztZQUNWLEdBQUcsRUFBRSxLQUFLO1lBQ1YsS0FBSyxFQUFFLEtBQUs7WUFDWixHQUFHLEVBQUUsTUFBTTtZQUNYLElBQUksRUFBRSxPQUFPO1lBQ2IsSUFBSSxFQUFFLE9BQU87WUFDYixLQUFLLEVBQUUsUUFBUTtZQUNmLElBQUksRUFBRSxPQUFPO1lBQ2IsR0FBRyxFQUFFLEtBQUs7WUFDVixRQUFRLEVBQUUsVUFBVTtZQUNwQixPQUFPLEVBQUUsU0FBUztZQUNsQixHQUFHLEVBQUUsS0FBSztZQUNWLFNBQVMsRUFBRTtnQkFDUCxNQUFNLEVBQUUsU0FBUztnQkFDakIsVUFBVSxFQUFFLGFBQWE7Z0JBQ3pCLFFBQVEsRUFBRSxXQUFXO2FBQ3hCO1NBQ0osQ0FBQztJQUNOLENBQUM7SUFFRDs7O09BR0c7SUFDRyxNQUFNOztZQUNSLE1BQU0sSUFBSSxDQUFDLHNCQUFzQixFQUFFLENBQUM7UUFDeEMsQ0FBQztLQUFBO0lBRUQ7O09BRUc7SUFDSCxJQUFJLFFBQVE7UUFDUixNQUFNLENBQUM7WUFDSCxXQUFXO1lBQ1gsVUFBVTtZQUNWLFdBQVc7WUFDWCxxQkFBcUI7WUFDckIsbUJBQW1CO1NBQ3RCLENBQUM7SUFDTixDQUFDO0lBRUQsdUVBQXVFO0lBQ3ZFLHFCQUFxQjtJQUVyQjs7Ozs7T0FLRztJQUNILElBQWMsc0JBQXNCO1FBQ2hDLE1BQU0sT0FBTyxHQUFHLEtBQUssQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUM7WUFDaEQsRUFBRSxJQUFJLEVBQUUsaUJBQWlCLEVBQU8sT0FBTyxFQUFFLFNBQVMsR0FBRztZQUNyRCxFQUFFLElBQUksRUFBRSxnQkFBZ0IsRUFBUSxPQUFPLEVBQUUsU0FBUyxHQUFHO1lBQ3JELEVBQUUsSUFBSSxFQUFFLGVBQWUsRUFBUyxPQUFPLEVBQUUsU0FBUyxHQUFHO1lBQ3JELEVBQUUsSUFBSSxFQUFFLGtCQUFrQixFQUFNLE9BQU8sRUFBRSxTQUFTLEdBQUc7WUFDckQsRUFBRSxJQUFJLEVBQUUsZUFBZSxFQUFTLE9BQU8sRUFBRSxTQUFTLEdBQUc7WUFDckQsRUFBRSxJQUFJLEVBQUUsbUJBQW1CLEVBQUssT0FBTyxFQUFFLFNBQVMsR0FBRztZQUNyRCxFQUFFLElBQUksRUFBRSxjQUFjLEVBQVUsT0FBTyxFQUFFLFNBQVMsR0FBRztZQUNyRCxFQUFFLElBQUksRUFBRSxXQUFXLEVBQWEsT0FBTyxFQUFFLFNBQVMsR0FBRztZQUNyRCxFQUFFLElBQUksRUFBRSxVQUFVLEVBQWMsT0FBTyxFQUFFLFNBQVMsR0FBRztZQUNyRCxFQUFFLElBQUksRUFBRSxlQUFlLEVBQVMsT0FBTyxFQUFFLFNBQVMsR0FBRztZQUNyRCxFQUFFLElBQUksRUFBRSxXQUFXLEVBQWEsT0FBTyxFQUFFLFNBQVMsR0FBRztZQUNyRCxFQUFFLElBQUksRUFBRSxhQUFhLEVBQVcsT0FBTyxFQUFFLFNBQVMsR0FBRztTQUN4RCxDQUFDLENBQUM7UUFFSCxNQUFNLEtBQUssR0FBRyxFQUFFLENBQUM7UUFDakIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLENBQUMsTUFBTTtZQUN2QyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxFQUFFLE1BQU0sQ0FBQyxJQUFJLEVBQUUsT0FBTyxFQUFFLE1BQU0sQ0FBQyxPQUFPLEdBQUcsQ0FBQyxDQUFDO1FBQ2hFLENBQUMsQ0FBQyxDQUFDO1FBRUgsTUFBTSxDQUFDLFNBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLE1BQU0sS0FBSyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDcEUsQ0FBQztJQUVELHVFQUF1RTtJQUN2RSxtQkFBbUI7SUFFbkI7O09BRUc7SUFDSCxJQUFZLE1BQU07UUFDZCxNQUFNLENBQXlCLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDaEQsQ0FBQztJQUVEOztPQUVHO0lBQ1csc0JBQXNCOztZQUNoQyxNQUFNLGNBQWMsR0FBRyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUUxRCxFQUFFLENBQUMsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDO2dCQUNqQixNQUFNLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO2dCQUMvQixNQUFNLElBQUksQ0FBQyxxQkFBcUIsRUFBRSxDQUFDO2dCQUNuQyxNQUFNLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztnQkFDN0IsTUFBTSxJQUFJLENBQUMsb0JBQW9CLEVBQUUsQ0FBQztnQkFDbEMsTUFBTSxJQUFJLENBQUMsd0JBQXdCLEVBQUUsQ0FBQztnQkFDdEMsTUFBTSxJQUFJLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztnQkFDakMsTUFBTSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQzNCLENBQUM7WUFBQyxJQUFJLENBQUMsQ0FBQztnQkFDSixRQUFRO1lBQ1osQ0FBQztRQUNMLENBQUM7S0FBQTtJQUVELHVIQUF1SDtJQUV2SDs7T0FFRztJQUNXLHFCQUFxQjs7WUFDL0IsSUFBSSxDQUFDLFFBQVEsQ0FBQyw2Q0FBNkMsQ0FBQyxDQUFDO1lBQzdELGFBQUssQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO1lBRS9CLHVFQUF1RTtZQUN2RSxNQUFNLG1CQUFXLENBQUMsU0FBUyxFQUFFLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztZQUUxRyxlQUFlO1lBQ2YsWUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUU7Z0JBQ2xCLEdBQUcsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVc7YUFDL0IsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUk7Z0JBQ1osVUFBRSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDNUQsQ0FBQyxDQUFDLENBQUM7WUFDSCxVQUFFLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQztZQUN6RCxVQUFFLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLEVBQUUsWUFBWSxDQUFDLENBQUMsQ0FBQztZQUVoRSxzQkFBc0I7WUFDdEIsVUFBRSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsQ0FBQztZQUMzQyxVQUFFLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDM0MsQ0FBQztLQUFBO0lBRUQ7O09BRUc7SUFDVyxlQUFlOztZQUN6QixJQUFJLENBQUMsUUFBUSxDQUFDLHVDQUF1QyxDQUFDLENBQUM7WUFDdkQsYUFBSyxDQUFDLGlCQUFpQixDQUFDLENBQUM7WUFFekIsTUFBTSxhQUFhLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLEVBQUUsWUFBWSxDQUFDLENBQUM7WUFDN0QsTUFBTSxhQUFhLEdBQUcsU0FBQyxDQUFDLG1CQUFXLENBQUMsVUFBRSxDQUFDLFlBQVksQ0FBQyxhQUFhLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFFaEYsYUFBYTtpQkFDUixJQUFJLENBQUMsUUFBUSxDQUFDO2lCQUNkLElBQUksQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUM7aUJBQ3BDLE9BQU8sQ0FBQyxtQkFBVyxDQUFDOzs7O2FBSXBCLENBQUMsQ0FBQyxDQUNGO1lBRUwsa0NBQWtDO1lBQ2xDLGFBQWE7aUJBQ1IsSUFBSSxDQUFDLGFBQWEsQ0FBQztpQkFDbkIsTUFBTSxFQUFFLENBQUM7WUFDZCxhQUFhO2lCQUNSLElBQUksQ0FBQyxRQUFRLENBQUM7aUJBQ2QsTUFBTSxFQUFFLENBQUM7WUFFZCxVQUFFLENBQUMsYUFBYSxDQUFDLGFBQWEsRUFBRSxpQkFBUyxDQUFDLG1CQUFXLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzNFLENBQUM7S0FBQTtJQUVhLG9CQUFvQjs7WUFDOUIsYUFBSyxDQUFDLHNCQUFzQixDQUFDLENBQUM7UUFDbEMsQ0FBQztLQUFBO0lBRWEsd0JBQXdCOztZQUNsQyxhQUFLLENBQUMsMEJBQTBCLENBQUMsQ0FBQztRQUN0QyxDQUFDO0tBQUE7SUFFYSxtQkFBbUI7O1lBQzdCLGFBQUssQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO1FBQ2pDLENBQUM7S0FBQTtDQUdKO0FBdkxELDRDQXVMQzs7Ozs7Ozs7Ozs7OztBQ3BORCxtREFBdUQ7QUFHdkQsaUNBQW9DO0FBRXBDOztHQUVHO0FBQ0gsNEJBQW1DLE1BQTRCO0lBQzNELE1BQU0sQ0FBQyxJQUFJLG9DQUFnQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ3hDLENBQUM7QUFGRCxnREFFQzs7Ozs7Ozs7O0FDWEQsc0RBQXNEO0FBQ3RELG1DQUFtQzs7Ozs7Ozs7OztBQUVuQyxzQ0FBb0U7QUFHcEU7OztHQUdHO0FBQ0gsc0JBQThCLFNBQVEsb0JBQWE7SUFFL0MsdUVBQXVFO0lBQ3ZFLDZCQUE2QjtJQUU3Qjs7T0FFRztJQUNILG9CQUFvQjtRQUNoQixNQUFNLENBQUM7WUFDSCxHQUFHLEVBQUUsS0FBSztZQUNWLEdBQUcsRUFBRSxLQUFLO1lBQ1YsS0FBSyxFQUFFLEtBQUs7WUFDWixHQUFHLEVBQUUsTUFBTTtZQUNYLElBQUksRUFBRSxPQUFPO1lBQ2IsSUFBSSxFQUFFLE9BQU87WUFDYixLQUFLLEVBQUUsUUFBUTtTQUNsQixDQUFDO0lBQ04sQ0FBQztJQUVEOzs7T0FHRztJQUNHLE1BQU07O1lBQ1IsUUFBUTtZQUNSLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLHFCQUFxQixDQUFDLENBQUM7UUFDakQsQ0FBQztLQUFBO0lBRUQ7O09BRUc7SUFDSCxJQUFJLFFBQVE7UUFDUixNQUFNLENBQUM7WUFDSCxXQUFXO1lBQ1gsVUFBVTtZQUNWLFdBQVc7WUFDWCxtQkFBbUI7WUFDbkIsdUJBQXVCO1NBQzFCLENBQUM7SUFDTixDQUFDO0lBRUQsdUVBQXVFO0lBQ3ZFLG1CQUFtQjtJQUVuQjs7T0FFRztJQUNILElBQVksTUFBTTtRQUNkLE1BQU0sQ0FBc0IsSUFBSSxDQUFDLE9BQU8sQ0FBQztJQUM3QyxDQUFDO0NBQ0o7QUFuREQsNENBbURDOzs7Ozs7Ozs7Ozs7O0FDNURELG9EQUF1RDtBQUd2RCxrQ0FBb0M7QUFFcEM7O0dBRUc7QUFDSCx5QkFBZ0MsTUFBNEI7SUFDeEQsTUFBTSxDQUFDLElBQUksb0NBQWdCLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDeEMsQ0FBQztBQUZELDBDQUVDOzs7Ozs7O0FDWEQsK0I7Ozs7Ozs7OztBQ0FBLHFDQUFpQztBQUN4QixzQkFBSztBQUVkLDZDQWFzQjtBQWV0Qix1SEFBdUg7QUFFdkg7OztHQUdHO0FBQ0g7SUFFSSx1RUFBdUU7SUFDdkUsaUJBQWlCO0lBRWpCOztPQUVHO0lBQ0ksTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUE0QjtRQUM5QyxLQUFLLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNuQyxNQUFNLENBQUMseUJBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUN0QyxDQUFDO0NBQ0o7QUFaRCx5QkFZQzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDakRELG9DQUE2QjtBQUM3Qix1Q0FlcUI7QUFVckI7OztHQUdHO0FBQ0g7SUFJSTs7OztPQUlHO0lBQ0gsWUFBc0IsT0FBNkI7UUFBN0IsWUFBTyxHQUFQLE9BQU8sQ0FBc0I7UUFDL0MsSUFBSSxDQUFDLGVBQWUsR0FBRyxvQkFBWSxFQUFFO1lBQ2pDLG9CQUFZLEVBQUU7WUFDZCxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBRXZELElBQUksQ0FBQyxPQUFPLENBQUMsZUFBZSxHQUFHLFNBQUMsQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUM7UUFFdkcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEdBQUcsTUFBTSxLQUFLLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDO1FBRTVCLElBQUksQ0FBQyxPQUFRLENBQUMsYUFBYTtjQUNoRCxJQUFJLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQyxHQUFHLEtBQUssSUFBSSxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDO1FBRW5ELElBQUksQ0FBQyxPQUFRLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxHQUFXO1lBQzNELE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7Z0JBQ1YsS0FBSyxNQUFNLENBQUM7Z0JBQ1osS0FBSyxVQUFVO29CQUNYLE1BQU0sQ0FBQyxJQUFJLENBQUM7Z0JBQ2hCO29CQUNJLE1BQU0sQ0FBQyxLQUFLLENBQUM7WUFDckIsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUE0QixJQUFJLENBQUMsT0FBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRWpELGFBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDakQsQ0FBQztJQUVELHVFQUF1RTtJQUN2RSxpQkFBaUI7SUFFakI7OztPQUdHO0lBQ0ksR0FBRztRQUNOLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztZQUMxQixLQUFLLFFBQVE7Z0JBQ1QsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztZQUM1QjtnQkFDSSxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxrQkFBa0IsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3hFLENBQUM7SUFDTCxDQUFDO0lBY0QsdUVBQXVFO0lBQ3ZFLHFCQUFxQjtJQUVyQjs7OztPQUlHO0lBQ08sUUFBUSxDQUFDLEdBQVc7UUFDMUIsV0FBRyxDQUFDLGFBQUssQ0FBQyxJQUFJLENBQUMsaUJBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDcEMsQ0FBQztJQUVEOzs7O09BSUc7SUFDTyxLQUFLLENBQUMsU0FBaUI7UUFDN0IsT0FBTyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUM3QixDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILElBQWMsT0FBTztRQUNqQixNQUFNLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQztJQUNoQyxDQUFDO0lBRUQ7Ozs7OztPQU1HO0lBQ08sVUFBVSxDQUFDLE1BQWMsRUFBRSxPQUFnQixFQUFFLE9BQXVCO1FBQzFFLE9BQU8sR0FBRyxPQUFPLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQztRQUNsQyxPQUFPLEdBQUcsU0FBQyxDQUFDLE1BQU0sQ0FBQztZQUNmLEdBQUcsRUFBRSxvQkFBWSxDQUFDLE1BQU0sQ0FBQztZQUN6QixLQUFLLEVBQUUsSUFBSTtZQUNYLEdBQUcsRUFBRSxJQUFJO1NBQ1osRUFBRSxPQUFPLENBQUMsQ0FBQztRQUVaLFlBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQzthQUNuQixPQUFPLENBQUMsQ0FBQyxJQUFJO1lBQ1YsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQ3pCLElBQUk7aUJBQ0MsT0FBTyxDQUFDLEtBQUssRUFBTSxJQUFJLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUM7aUJBQ3BELE9BQU8sQ0FBQyxLQUFLLEVBQU0sSUFBSSxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDO2lCQUNwRCxPQUFPLENBQUMsT0FBTyxFQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQztpQkFDdEQsT0FBTyxDQUFDLEtBQUssRUFBTSxJQUFJLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUM7aUJBQ3BELE9BQU8sQ0FBQyxNQUFNLEVBQUssSUFBSSxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDO2lCQUNyRCxPQUFPLENBQUMsTUFBTSxFQUFLLElBQUksQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQztpQkFDckQsT0FBTyxDQUFDLE9BQU8sRUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQUM7aUJBQ3RELE9BQU8sQ0FBQyxNQUFNLEVBQUssSUFBSSxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLENBQzdELENBQUM7WUFDRixVQUFFLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsb0JBQVksQ0FBQyxNQUFNLENBQUMsRUFBRSxJQUFJLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUNoRSxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFRDs7OztPQUlHO0lBQ08sNEJBQTRCLENBQUMsSUFBWTtRQUMvQyxNQUFNLENBQUMsSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsTUFBTTtZQUMvQixJQUFJLE9BQWUsQ0FBQztZQUNwQixtQkFBVyxDQUFDLEtBQUssRUFBRSxDQUFDLE1BQU0sRUFBRSxJQUFJLEVBQUUsU0FBUyxDQUFDLEVBQUU7Z0JBQzFDLEtBQUssRUFBRSxNQUFNO2dCQUNiLE9BQU8sRUFBRSxJQUFJO2dCQUNiLE1BQU0sRUFBRSxDQUFDLElBQVk7b0JBQ2pCLE9BQU8sR0FBRyxTQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUMzQixDQUFDO2FBQ0osQ0FBQztpQkFDRyxJQUFJLENBQUM7Z0JBQ0YsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ3JCLENBQUMsQ0FBQztpQkFDRCxLQUFLLENBQUMsQ0FBQyxNQUFNO2dCQUNWLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUNuQixDQUFDLENBQUMsQ0FBQztRQUNYLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0gsSUFBYyxzQkFBc0I7UUFDaEMsTUFBTSxJQUFJLEdBQUc7WUFDVCxFQUFFLElBQUksRUFBRSxvQkFBb0IsRUFBSSxPQUFPLEVBQUUsU0FBUyxHQUFHO1lBQ3JELEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBbUIsT0FBTyxFQUFFLFNBQVMsR0FBRztZQUNyRCxFQUFFLElBQUksRUFBRSxRQUFRLEVBQWdCLE9BQU8sRUFBRSxTQUFTLEdBQUc7WUFDckQsRUFBRSxJQUFJLEVBQUUsYUFBYSxFQUFXLE9BQU8sRUFBRSxTQUFTLEdBQUc7WUFDckQsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFpQixPQUFPLEVBQUUsU0FBUyxHQUFHO1lBQ3JELEVBQUUsSUFBSSxFQUFFLFlBQVksRUFBWSxPQUFPLEVBQUUsU0FBUyxHQUFHO1lBQ3JELEVBQUUsSUFBSSxFQUFFLG1CQUFtQixFQUFLLE9BQU8sRUFBRSxTQUFTLEdBQUc7WUFDckQsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFnQixPQUFPLEVBQUUsU0FBUyxHQUFHO1lBQ3JELEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBZSxPQUFPLEVBQUUsU0FBUyxHQUFHO1lBQ3JELEVBQUUsSUFBSSxFQUFFLFlBQVksRUFBWSxPQUFPLEVBQUUsU0FBUyxHQUFHO1NBQ3hELENBQUM7UUFDRixNQUFNLE1BQU0sR0FBRztZQUNYLEVBQUUsSUFBSSxFQUFFLFdBQVcsRUFBSyxPQUFPLEVBQUUsU0FBUyxFQUFFLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxHQUFNO1lBQzdELEVBQUUsSUFBSSxFQUFFLFdBQVcsRUFBSyxPQUFPLEVBQUUsU0FBUyxFQUFFLEVBQUUsRUFBRSxDQUFDLFFBQVEsQ0FBQyxHQUFHO1NBQ2hFLENBQUM7UUFFRixJQUFJLEtBQUssR0FBRyxFQUFFLENBQUM7UUFDZixFQUFFLENBQUMsQ0FBNEIsSUFBSSxDQUFDLE9BQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1lBQ2xELEtBQUssR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ2pDLENBQUM7UUFDRCxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUMvQixLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLEVBQUUsU0FBUyxHQUFHLENBQUMsQ0FBQztRQUN6RCxDQUFDO1FBQ0QsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDM0IsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLFNBQVMsR0FBRyxDQUFDLENBQUM7UUFDckQsQ0FBQztRQUNELEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzlCLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxTQUFTLEdBQUcsQ0FBQyxDQUFDO1FBQ3hELENBQUM7UUFDRCxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLG9CQUFvQixDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzFDLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLEVBQUUsb0JBQW9CLEVBQUUsT0FBTyxFQUFFLFNBQVMsR0FBRyxDQUFDLENBQUM7UUFDcEUsQ0FBQztRQUVELE1BQU0sQ0FBQyxTQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEtBQUssTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2pFLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNhLHNCQUFzQixDQUFDLFlBQTJCOztZQUM5RCxJQUFJLENBQUMsUUFBUSxDQUFDLDBCQUEwQixDQUFDLENBQUM7WUFFMUMsTUFBTSxPQUFPLEdBQXlELFlBQVk7aUJBQzdFLE1BQU0sQ0FBQyxDQUFDLE1BQU07Z0JBQ1gsRUFBRSxDQUFDLENBQUMsSUFBSSxJQUFJLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO29CQUNwQixNQUFNLENBQUMsSUFBSSxDQUFDO2dCQUNoQixDQUFDO2dCQUFDLElBQUksQ0FBQyxDQUFDO29CQUNKLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxTQUFTO3dCQUM5QixNQUFNLENBQTRCLElBQUksQ0FBQyxPQUFRLENBQUMsRUFBRSxLQUFLLFNBQVMsQ0FBQztvQkFDckUsQ0FBQyxDQUFDLENBQUM7Z0JBQ1AsQ0FBQztZQUNMLENBQUMsQ0FBQyxDQUFDO1lBRVAsYUFBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBRXhDLE1BQU0sUUFBUSxHQUFHLENBQUMsT0FBWTtnQkFDMUIsRUFBRSxDQUFDLENBQUMsUUFBUSxLQUFLLE9BQU8sT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztvQkFDL0QsTUFBTSxPQUFPLEdBQUcsa0JBQVUsQ0FBQyxhQUFLLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO29CQUNyRCxPQUFPLENBQUMsS0FBSyxFQUFFLENBQUM7b0JBQ2hCLE1BQU0sQ0FBQyxPQUFPLENBQUM7Z0JBQ25CLENBQUM7Z0JBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7b0JBQ2pCLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ3ZCLENBQUM7WUFDTCxDQUFDLENBQUM7WUFFRixHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO2dCQUM3QyxFQUFFLENBQUMsQ0FBQyxJQUFJLElBQUksT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7b0JBQzdCLE1BQU0sT0FBTyxHQUFHLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7b0JBQzFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLEdBQUcsR0FBRyxJQUFHLE1BQU0sSUFBSSxDQUFDLDRCQUE0QixDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBQztvQkFDcEYsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDO2dCQUN0QixDQUFDO2dCQUNELEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDZCxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztnQkFDM0IsQ0FBQztZQUNMLENBQUM7WUFFRCxNQUFNLENBQUMsT0FBTyxDQUFDO1FBQ25CLENBQUM7S0FBQTtJQUVEOzs7O09BSUc7SUFDTyx5QkFBeUI7UUFDL0IsTUFBTSxDQUFDLENBQTRCLElBQUksQ0FBQyxPQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztZQUN0RCxLQUFLLFVBQVU7Z0JBQ1gsTUFBTSxDQUFDLFdBQVcsQ0FBQztZQUN2QixLQUFLLEtBQUs7Z0JBQ04sTUFBTSxDQUFDLEtBQUssQ0FBQztZQUNqQixLQUFLLEtBQUs7Z0JBQ04sTUFBTSxDQUFDLEtBQUssQ0FBQztZQUNqQjtnQkFDSSxNQUFNLENBQUMsU0FBUyxDQUFDO1FBQ3pCLENBQUM7SUFDTCxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNPLG1CQUFtQjtRQUN6QixNQUFNLGNBQWMsR0FBNkIsSUFBSSxDQUFDLE9BQU8sQ0FBQztRQUM5RCxNQUFNLENBQUM7WUFDSCxHQUFHLEVBQUUsS0FBSyxLQUFLLGNBQWMsQ0FBQyxFQUFFO1lBQ2hDLElBQUksRUFBRSxLQUFLLEtBQUssY0FBYyxDQUFDLEdBQUc7U0FDckMsQ0FBQztJQUNOLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNPLFlBQVksQ0FBQyxJQUFZO1FBQy9CLE1BQU0sQ0FBQyxDQUFDLENBQTRCLElBQUksQ0FBQyxPQUFRLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksS0FBSyxJQUFJLEtBQUssSUFBSSxDQUFDLENBQUM7SUFDMUYsQ0FBQztJQUVELHVFQUF1RTtJQUN2RSxtQkFBbUI7SUFFbkI7O09BRUc7SUFDVyxTQUFTOztZQUNuQixNQUFNLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztZQUN4QixNQUFNLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUN4QixDQUFDO0tBQUE7SUFFRCx1SEFBdUg7SUFFdkg7O09BRUc7SUFDVyxVQUFVOztZQUNwQixJQUFJLENBQUMsUUFBUSxDQUFDLHdCQUF3QixDQUFDLENBQUM7WUFDeEMsTUFBTSxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztZQUM5QixNQUFNLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO1lBQy9CLE1BQU0sSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDO1lBQzdCLE1BQU0sSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDO1FBQ2pDLENBQUM7S0FBQTtJQUVEOztPQUVHO0lBQ0ssZ0JBQWdCO1FBQ3BCLEVBQUUsQ0FBQyxDQUFDLFVBQUUsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUM5QixNQUFNLEtBQUssQ0FBQyxpQkFBUyxDQUFDLGdDQUFnQyxDQUFDLENBQUMsQ0FBQztRQUM3RCxDQUFDO1FBQ0QsVUFBRSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDaEMsQ0FBQztJQUVEOztPQUVHO0lBQ0ssaUJBQWlCO1FBQ3JCLElBQUksQ0FBQyxVQUFVLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztJQUN0QyxDQUFDO0lBRUQ7OztPQUdHO0lBQ0ssZUFBZTtRQUNuQixNQUFNLE1BQU0sR0FBRyxvQkFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3BDLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUM7UUFFNUIsYUFBYTtRQUNiLGVBQU8sQ0FDSCxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxZQUFZLENBQUMsRUFDL0IsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsWUFBWSxDQUFDLEVBQy9CLElBQUksQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUMvQixDQUFDO1FBRUYsU0FBUztRQUNULFVBQUUsQ0FBQyxRQUFRLENBQ1AsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsU0FBUyxDQUFDLEVBQzVCLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUM5QixDQUFDO1FBRUYsVUFBVTtRQUNWLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztZQUMzQixLQUFLLFlBQVk7Z0JBQ2IsVUFBRSxDQUFDLFFBQVEsQ0FDUCxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxxQkFBcUIsQ0FBQyxFQUN4QyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxTQUFTLENBQUMsQ0FDL0IsQ0FBQztnQkFDRixLQUFLLENBQUM7WUFDVixLQUFLLEtBQUs7Z0JBQ04sZUFBTyxDQUNILElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLGNBQWMsQ0FBQyxFQUNqQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxTQUFTLENBQUMsRUFDNUIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQ3pCLENBQUM7Z0JBQ0YsS0FBSyxDQUFDO1lBQ1Y7Z0JBQ0ksS0FBSyxDQUFDO1FBQ2QsQ0FBQztRQUVELFNBQVM7UUFDVCxVQUFFLENBQUMsUUFBUSxDQUNQLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLFNBQVMsQ0FBQyxFQUM1QixJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxRQUFRLENBQUMsQ0FDOUIsQ0FBQztRQUVGLHVCQUF1QjtRQUN2QixFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUMvQixNQUFNLEtBQUssR0FBeUI7Z0JBQ2hDLE1BQU0sRUFBNkIsSUFBSSxDQUFDLE9BQVEsQ0FBQyxNQUFNO2dCQUN2RCxLQUFLLEVBQUUsSUFBSTtnQkFDWCxRQUFRLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsSUFBSTthQUM5QyxDQUFDO1lBQ0YsZUFBTyxDQUNILElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLGtDQUFrQyxDQUFDLEVBQ3JELElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLG1CQUFtQixDQUFDLEVBQ3RDLEtBQUssRUFDTCxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsQ0FDMUIsQ0FBQztRQUNOLENBQUM7SUFDTCxDQUFDO0lBRUQ7O09BRUc7SUFDSyxlQUFlO1FBQ25CLE1BQU0sTUFBTSxHQUFHLG9CQUFZLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDekMsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRTFFLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSTtZQUN2QixVQUFFLENBQUMsUUFBUSxDQUNQLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxFQUN2QixJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FDMUIsQ0FBQztRQUNOLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztDQUNKO0FBNVlELHNDQTRZQzs7Ozs7Ozs7OztBQzFhRCxxQ0FBcUM7QUFDNUIsc0JBQUs7Ozs7Ozs7Ozs7Ozs7QUNEZCwwQ0FBMkM7QUFHM0MseUNBQWdEO0FBQ2hELHlDQUE4QztBQUM5Qyx5Q0FBZ0Q7QUFDaEQsc0NBQXdDO0FBRXhDLGlDQUF1QjtBQUN2QixpQ0FBMEI7QUFDMUIsa0NBQXlCO0FBQ3pCLGlDQUEwQjtBQUMxQixrQ0FBc0I7QUFFdEI7O0dBRUc7QUFDSCxzQkFBNkIsTUFBNEI7SUFDckQsTUFBTSxDQUFDLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7UUFDekIsS0FBSyxTQUFTO1lBQ1YsTUFBTSxDQUFDLDZCQUFtQixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3ZDLEtBQUssUUFBUTtZQUNULE1BQU0sQ0FBQywyQkFBa0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN0QyxLQUFLLFNBQVM7WUFDVixNQUFNLENBQUMsNkJBQW1CLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDdkMsS0FBSyxLQUFLO1lBQ04sTUFBTSxDQUFDLHFCQUFlLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDbkM7WUFDSSxpQkFBTSxDQUFDLEtBQUssRUFBRSw0QkFBNEIsR0FBRyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUM7WUFDakUsTUFBTSxDQUFDLElBQUksQ0FBQztJQUNwQixDQUFDO0FBQ0wsQ0FBQztBQWRELG9DQWNDOzs7Ozs7Ozs7O0FDL0JELG9DQUE2QjtBQUM3QixtQ0FBeUI7QUFDekIsZ0RBQW9EO0FBRXBELHNDQU9nQjtBQUVoQiwwQ0FHb0I7QUFFcEIsdUVBQXVFO0FBQ3ZFLG1CQUFtQjtBQUVuQjs7Ozs7R0FLRztBQUNILHFCQUE0QixLQUFhO0lBQ3JDLGlCQUFNLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQ3pCLENBQUM7QUFGRCxrQ0FFQztBQUVELHVIQUF1SDtBQUV2SDs7Ozs7R0FLRztBQUNILHNCQUE2QixNQUFjO0lBQ3ZDLEVBQUUsQ0FBQyxDQUFDLElBQUksSUFBSSxNQUFNLENBQUMsQ0FBQyxDQUFDO1FBQ2pCLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLHFCQUFVLEVBQUUsRUFBRSxXQUFXLENBQUMsQ0FBQztJQUNoRCxDQUFDO0lBQUMsSUFBSSxDQUFDLENBQUM7UUFDSixNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxxQkFBVSxFQUFFLEVBQUUsV0FBVyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ3hELENBQUM7QUFDTCxDQUFDO0FBTkQsb0NBTUM7QUFFRCx1SEFBdUg7QUFFdkg7Ozs7Ozs7R0FPRztBQUNILG9CQUEyQixNQUFlLEVBQUUsS0FBYztJQUN0RCxNQUFNLFFBQVEsR0FBRztRQUNiLE9BQU87UUFDUCxVQUFVO1FBQ1YsTUFBTTtRQUNOLE1BQU07UUFDTixlQUFlO1FBQ2YsY0FBYztRQUNkLEtBQUs7UUFDTCxPQUFPO1FBQ1AsTUFBTTtRQUNOLElBQUk7UUFDSixVQUFVO1FBQ1YsTUFBTTtRQUNOLFVBQVU7UUFDVixTQUFTO0tBQ1osQ0FBQztJQUNGLE1BQU0sR0FBRyxHQUFHLE1BQU0sSUFBSSxJQUFJLENBQUM7SUFDM0IsTUFBTSxPQUFPLEdBQUcsSUFBSSxjQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDakMsTUFBTSxHQUFHLEdBQUcsQ0FBQyxJQUFJLElBQUksS0FBSyxJQUFJLENBQUMsSUFBSSxLQUFLLElBQUksS0FBSyxHQUFHLEVBQUUsQ0FBQyxHQUFHLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztJQUNqRyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDeEMsTUFBTSxDQUFDLE9BQU8sQ0FBQztBQUNuQixDQUFDO0FBdEJELGdDQXNCQztBQWNEOzs7Ozs7O0dBT0c7QUFDSCx1QkFBOEIsSUFBWSxFQUFFLE9BQThCO0lBQ3RFLE1BQU0sR0FBRyxHQUF5QixRQUFDLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRTtRQUMzQyxHQUFHLEVBQUUsRUFBRSxDQUFDLEdBQUc7UUFDWCxHQUFHLEVBQUUsSUFBSTtLQUNaLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFFWixJQUFJLEdBQUcsSUFBSTtTQUNOLE9BQU8sQ0FBQyxXQUFXLEVBQUUsRUFBRSxDQUFDLENBQUcsYUFBYTtTQUN4QyxPQUFPLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxDQUFJLFlBQVk7U0FDdkMsT0FBTyxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FDekI7SUFFRCxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUNWLElBQUksR0FBRyxRQUFRLEdBQUcsSUFBSSxDQUFDO0lBQzNCLENBQUM7SUFDRCxFQUFFLENBQUMsQ0FBQyxJQUFJLEtBQUssR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDbkIsSUFBSSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUN6QyxDQUFDO0lBQ0QsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDVixNQUFNLE1BQU0sR0FBRyxDQUFDO1lBQ1osSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQ1gsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7Z0JBQy9CLENBQUMsSUFBSSxHQUFHLENBQUM7WUFDYixDQUFDO1lBQ0QsTUFBTSxDQUFDLENBQUMsQ0FBQztRQUNiLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFDTCxJQUFJLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDeEMsQ0FBQztJQUVELE1BQU0sQ0FBQyxJQUFJLENBQUM7QUFDaEIsQ0FBQztBQTlCRCxzQ0E4QkM7QUFpQkQ7Ozs7Ozs7O0dBUUc7QUFDSCxxQkFBNEIsT0FBZSxFQUFFLElBQWMsRUFBRSxPQUE0QjtJQUNyRixNQUFNLENBQUMsSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsTUFBTTtRQUMvQixNQUFNLEdBQUcsR0FBdUIsUUFBQyxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUU7WUFDekMsS0FBSyxFQUFFLFNBQVM7WUFDaEIsT0FBTyxFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRTtZQUN6QixNQUFNLEVBQUUsQ0FBQyxJQUFZLE9BQXdCLENBQUM7WUFDOUMsTUFBTSxFQUFFLENBQUMsSUFBWSxPQUF3QixDQUFDO1NBQ2pELEVBQUUsT0FBTyxDQUFDLENBQUM7UUFFWixZQUFLLENBQUMsT0FBTyxFQUFFLENBQUMsS0FBSyxFQUFFLGVBQWU7WUFDbEMsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztnQkFDUixXQUFXLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBQ3ZDLENBQUM7WUFFRCxNQUFNLE9BQU8sR0FBRyxHQUFHLENBQUMsT0FBTyxHQUFHLFVBQVUsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLElBQUksQ0FBQztZQUN2RixFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO2dCQUNWLE9BQU8sQ0FBQyxLQUFLLEVBQUUsQ0FBQztZQUNwQixDQUFDO1lBRUQsTUFBTSxLQUFLLEdBQUcscUJBQUssQ0FBQyxlQUFlLEVBQUUsSUFBSSxFQUFFLEdBQUcsQ0FBQztpQkFDMUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxXQUFXLENBQUM7aUJBQ3hCLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJO2dCQUNkLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7b0JBQ1YsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDdkIsQ0FBQztnQkFDRCxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDbEIsQ0FBQyxDQUFDLENBQUM7WUFFUCxFQUFFLENBQUMsQ0FBQyxNQUFNLEtBQUssR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7Z0JBQ3ZCLEtBQUssQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUk7b0JBQ3pCLEdBQUcsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7Z0JBQ2hDLENBQUMsQ0FBQyxDQUFDO2dCQUNILEtBQUssQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUk7b0JBQ3pCLEdBQUcsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7Z0JBQ2hDLENBQUMsQ0FBQyxDQUFDO1lBQ1AsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQyxDQUFDLENBQUM7QUFDUCxDQUFDO0FBdENELGtDQXNDQztBQVlEOzs7Ozs7OztHQVFHO0FBQ0gsaUJBQXdCLEdBQVcsRUFBRSxHQUFXLEVBQUUsTUFBYyxFQUFFLE9BQTZCO0lBQzNGLE1BQU0sR0FBRyxHQUFHLFFBQUMsQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFO1FBQ3JCLEdBQUcsRUFBRSxFQUFFLENBQUMsR0FBRztRQUNYLEdBQUcsRUFBRSxJQUFJO1FBQ1QsVUFBVSxFQUFFLE9BQU87S0FDdEIsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUVaLE1BQU0sR0FBRyxHQUFHLFlBQUssQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLFNBQUUsQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLENBQUMsUUFBUSxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQzFHLE1BQU0sTUFBTSxHQUFHLGFBQWEsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBRXRELFNBQUUsQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDdkIsU0FBRSxDQUFDLGFBQWEsQ0FBQyxHQUFHLEVBQUUsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQzFDLENBQUM7QUFaRCwwQkFZQztBQUVELHVIQUF1SDtBQUV2SDs7Ozs7R0FLRztBQUNIO0lBQ0ksTUFBTSxDQUFDLEdBQUcsR0FBRyxXQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsV0FBVyxFQUFFLEdBQUcsR0FBRyxDQUFDO0FBQy9DLENBQUM7QUFGRCxnQ0FFQztBQUVELHVIQUF1SDtBQUV2SDs7Ozs7R0FLRztBQUNILHFCQUE0QixHQUFXO0lBQ25DLElBQUksT0FBTyxHQUFHLElBQUksQ0FBQztJQUNuQixFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3RCLE9BQU8sR0FBRyxLQUFLLENBQUM7SUFDcEIsQ0FBQztJQUNELE1BQU0sSUFBSSxHQUFHLFFBQUMsQ0FBQyxRQUFDLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDaEMsTUFBTSxDQUFDLE9BQU8sR0FBRyxJQUFJLEdBQUcsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO0FBQzVDLENBQUM7QUFQRCxrQ0FPQztBQUVEOzs7OztHQUtHO0FBQ0gscUJBQTRCLElBQVk7SUFDcEMsNkJBQTZCO0lBQzdCLE1BQU0sQ0FBQyxJQUFJLGFBQWEsRUFBRSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3RELDRCQUE0QjtBQUNoQyxDQUFDO0FBSkQsa0NBSUM7QUFVRDs7Ozs7O0dBTUc7QUFDSCxtQkFBMEIsR0FBVyxFQUFFLE9BQTBCO0lBQzdELE1BQU0sR0FBRyxHQUFxQixRQUFDLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRTtRQUN2QyxHQUFHLEVBQUUsRUFBRSxDQUFDLEdBQUc7UUFDWCxHQUFHLEVBQUUsSUFBSTtRQUNULElBQUksRUFBRSxDQUFDO0tBQ1YsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUNaLElBQUksR0FBRyxHQUFHLEVBQUUsQ0FBQztJQUNiLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQztJQUNaLElBQUksTUFBYyxDQUFDO0lBQ25CLElBQUksSUFBWSxDQUFDO0lBRWpCLE1BQU0sTUFBTSxHQUFHLGFBQWEsQ0FBQyxHQUFHLEVBQUUsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLENBQUM7U0FDM0MsT0FBTyxDQUFDLGNBQWMsRUFBRSxVQUFVLENBQUMsQ0FBQywrQkFBK0I7U0FDbkUsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRWpCLE1BQU0sTUFBTSxHQUFHLENBQUMsR0FBVztRQUN2QixJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDWCxNQUFNLE9BQU8sR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQztRQUMvQixHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE9BQU8sRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO1lBQy9CLENBQUMsSUFBSSxHQUFHLENBQUM7UUFDYixDQUFDO1FBQ0QsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUNiLENBQUMsQ0FBQztJQUVGLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO1FBQ3JDLE1BQU0sR0FBRyxDQUFDLENBQUM7UUFDWCxJQUFJLEdBQUcsUUFBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN6QixFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQy9CLE1BQU0sR0FBRyxDQUFDLENBQUM7UUFDZixDQUFDO1FBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzlCLEVBQUUsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNWLEdBQUcsSUFBSSxDQUFDLENBQUM7WUFDYixDQUFDO1FBQ0wsQ0FBQztRQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLG1CQUFtQixDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3pDLE1BQU0sR0FBRyxDQUFDLENBQUM7UUFDZixDQUFDO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDSixNQUFNLEdBQUcsQ0FBQyxDQUFDO1FBQ2YsQ0FBQztRQUNELEdBQUcsSUFBSSxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxHQUFHLElBQUksQ0FBQztRQUNqQyxHQUFHLElBQUksTUFBTSxDQUFDO0lBQ2xCLENBQUM7SUFFRCxHQUFHLEdBQUcsR0FBRztTQUNKLE9BQU8sQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDO1NBQ3ZCLE9BQU8sQ0FBQyxTQUFTLEVBQUUsRUFBRSxDQUFDLENBQ3RCO0lBRUwsTUFBTSxDQUFDLGFBQWEsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFDbkMsQ0FBQztBQWhERCw4QkFnREM7Ozs7Ozs7QUM5VUQsMEM7Ozs7OztBQ0FBLGtDOzs7Ozs7QUNBQSx3Qzs7Ozs7O0FDQUEscUM7Ozs7OztBQ0FBLGlDOzs7Ozs7QUNBQSxrQzs7Ozs7O0FDQUEseUM7Ozs7OztBQ0FBLGlDOzs7Ozs7QUNBQSxrQzs7Ozs7O0FDQUEsbUM7Ozs7OztBQ0FBLHFDOzs7Ozs7QUNBQSxtQzs7Ozs7O0FDQUEsOEM7Ozs7OztBQ0FBLG1DIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gaWRlbnRpdHkgZnVuY3Rpb24gZm9yIGNhbGxpbmcgaGFybW9ueSBpbXBvcnRzIHdpdGggdGhlIGNvcnJlY3QgY29udGV4dFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5pID0gZnVuY3Rpb24odmFsdWUpIHsgcmV0dXJuIHZhbHVlOyB9O1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHtcbiBcdFx0XHRcdGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gXHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuIFx0XHRcdFx0Z2V0OiBnZXR0ZXJcbiBcdFx0XHR9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAzMyk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gd2VicGFjay9ib290c3RyYXAgNDU5OTRmYzUyNTMwMGJmNjZjZTEiLCJleHBvcnQgKiBmcm9tIFwiLi9pbnRlcmZhY2VzXCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL2dlbmVyYXRvci1iYXNlXCI7XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLi8uLi8uLi9zcmMvZ2VuZXJhdG9ycy9iYXNlL2luZGV4LnRzIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwicGF0aFwiKTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyBleHRlcm5hbCBcInBhdGhcIlxuLy8gbW9kdWxlIGlkID0gMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJleHBvcnQgKiBmcm9tIFwiLi9saWJzXCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL3Rvb2xzXCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL3NldHRpbmdzXCI7XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLi8uLi9zcmMvdXRpbHMvaW5kZXgudHMiLCJpbXBvcnQgKiBhcyBmcyBmcm9tIFwiZnMtZXh0cmFcIjtcclxuaW1wb3J0ICogYXMgZ2xvYiBmcm9tIFwiZ2xvYlwiO1xyXG5pbXBvcnQgKiBhcyBob2dhbiBmcm9tIFwiaG9nYW4uanNcIjtcclxuaW1wb3J0ICogYXMgX2wgZnJvbSBcImxvZGFzaFwiO1xyXG5pbXBvcnQgKiBhcyBfcyBmcm9tIFwidW5kZXJzY29yZS5zdHJpbmdcIjtcclxuaW1wb3J0ICogYXMgd2hpY2ggZnJvbSBcIndoaWNoXCI7XHJcbmltcG9ydCAqIGFzIHV1aWQgZnJvbSBcInV1aWRcIjtcclxuaW1wb3J0ICogYXMgY2hhbGsgZnJvbSBcImNoYWxrXCI7XHJcbmltcG9ydCAqIGFzIHNlbXZlclJlZ2V4IGZyb20gXCJzZW12ZXItcmVnZXhcIjtcclxuaW1wb3J0IHsgU3Bpbm5lciB9IGZyb20gXCJjbGktc3Bpbm5lclwiO1xyXG5cclxuY29uc3QgJDogSlF1ZXJ5U3RhdGljID0gKCgpID0+IHtcclxuICAgIGNvbnN0IF93aW5kb3cgPSAoKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGpzZG9tID0gcmVxdWlyZShcImpzZG9tXCIpO1xyXG4gICAgICAgIGlmIChcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBqc2RvbS5KU0RPTSkgeyAgICAvLyB2MTArXHJcbiAgICAgICAgICAgIHJldHVybiBuZXcganNkb20uSlNET00oKS53aW5kb3c7XHJcbiAgICAgICAgfSBlbHNlIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB2OS4xMi54XHJcbiAgICAgICAgICAgIHJldHVybiBqc2RvbS5qc2RvbSgpLmRlZmF1bHRWaWV3O1xyXG4gICAgICAgIH1cclxuICAgIH0pKCk7XHJcblxyXG4gICAgLy8gcGF0Y2ggc2NvcGU6XHJcbiAgICAoKHJvb3Q6IGFueSkgPT4ge1xyXG4gICAgICAgIC8qXHJcbiAgICAgICAgICoganNkb20gOS40LjAgLSA5LjEyLjAg44Gr5a6f6KOF44GV44KM44Gm44GE44KLIERPTVBhcnNlciDjga8gWE1MIOOBriBzZXJpYWxpemUg44GM44Gn44GN44Gq44GE44Gf44KBLFxyXG4gICAgICAgICAqIHhtbGRvbSDjgavnva7jgY3mj5vjgYjjgotcclxuICAgICAgICAgKiBqc2RvbSAxMC4xLjAg44G+44Gn5YuV44GL44Gq44GE44GT44Go44KS56K66KqNXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgY29uc3QgeG1sZG9tID0gcmVxdWlyZShcInhtbGRvbVwiKTtcclxuICAgICAgICByb290LkRPTVBhcnNlciA9IHhtbGRvbS5ET01QYXJzZXI7XHJcbiAgICAgICAgLy8geG1sZG9tIOOBq+OBryBkb20udG9TdHJpbmcoKSDjgYzlrp/oo4XjgZXjgozjgabjgYTjgovjgYzjgIFnbG9iYWwg44Gr44KCIGV4cG9ydCDjgZnjgotcclxuICAgICAgICAoPGFueT5nbG9iYWwpLlhNTFNlcmlhbGl6ZXIgPSByb290LlhNTFNlcmlhbGl6ZXIgPSB4bWxkb20uWE1MU2VyaWFsaXplcjtcclxuICAgIH0pKF93aW5kb3cpO1xyXG5cclxuICAgIHJldHVybiByZXF1aXJlKFwianF1ZXJ5XCIpKF93aW5kb3cpO1xyXG59KSgpO1xyXG5cclxuZXhwb3J0IHR5cGUgTWl4aW5lZFVuZGVyc2NvcmVTdGF0aWMgPSB0eXBlb2YgX3MgJiB0eXBlb2YgX2w7XHJcbmNvbnN0IF9tOiBNaXhpbmVkVW5kZXJzY29yZVN0YXRpYyA9IDxhbnk+X2wubWl4aW4oPGFueT5fcy5leHBvcnRzKCkpO1xyXG5cclxuZXhwb3J0IHtcclxuICAgIGZzLFxyXG4gICAgZ2xvYixcclxuICAgIGhvZ2FuLFxyXG4gICAgJCxcclxuICAgIF9tIGFzIF8sXHJcbiAgICB3aGljaCxcclxuICAgIHV1aWQsXHJcbiAgICBjaGFsayxcclxuICAgIHNlbXZlclJlZ2V4LFxyXG4gICAgU3Bpbm5lcixcclxufTtcclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4uLy4uL3NyYy91dGlscy9saWJzLnRzIiwiaW1wb3J0ICogYXMgcGF0aCBmcm9tIFwicGF0aFwiO1xyXG5pbXBvcnQgeyBmcywgJCB9IGZyb20gXCIuL2xpYnNcIjtcclxuXHJcbi8qKlxyXG4gKiBAaW50ZXJmYWNlIElHbG9iYWxTZXR0aW5nc1xyXG4gKiBAYnJpZWYg44Kw44Ot44O844OQ44Or6Kit5a6a44Kk44Oz44K/44O844OV44Kn44Kk44K5XHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIElHbG9iYWxTZXR0aW5ncyB7XHJcbiAgICBmb3JjZT86IGJvb2xlYW47ICAgICAgICAgICAgLy8g44Ko44Op44O857aZ57aa55SoXHJcbiAgICB2ZXJib3NlPzogYm9vbGVhbjsgICAgICAgICAgLy8g6Kmz57Sw44Ot44KwXHJcbiAgICBzaWxlbnQ/OiBib29sZWFuOyAgICAgICAgICAgLy8gc2lsZW50IG1vZGVcclxuICAgIHRhcmdldERpcj86IHN0cmluZzsgICAgICAgICAvLyDkvZzmpa3jg4fjgqPjg6zjgq/jg4jjg6pcclxuICAgIGxhbmc/OiBcImVuLVVTXCIgfCBcImphLUpQXCI7XHJcbn1cclxuXHJcbmxldCBfc2V0dGluZ3M6IElHbG9iYWxTZXR0aW5ncyA9IHtcclxuICAgIGZvcmNlOiBmYWxzZSxcclxuICAgIHZlcmJvc2U6IGZhbHNlLFxyXG4gICAgc2lsZW50OiBmYWxzZSxcclxuICAgIGxhbmc6IFwiZW4tVVNcIixcclxufTtcclxuXHJcbmxldCBfbGliUGF0aDogc3RyaW5nOyAgIC8vIGNkcC1saWIg44Gu5a2Y5Zyo44GX44Gm44GE44KLIHBhdGhcclxuXHJcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbi8vIGV4cG9ydHMgbWV0aG9kczpcclxuXHJcbi8qKlxyXG4gKiDoqK3lrprlj5blvpdcclxuICpcclxuICogQHJldHVybiB7SUdsb2JhbFNldHRpbmdzfSBvcHRpb25zIOODreOCsOOBq+S9v+eUqOOBmeOCi+OCquODl+OCt+ODp+ODs1xyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFNldHRpbmdzKCk6IElHbG9iYWxTZXR0aW5ncyB7XHJcbiAgICByZXR1cm4gJC5leHRlbmQoe30sIF9zZXR0aW5ncyk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiDoqK3lrprmjIflrppcclxuICpcclxuICogQHBhcmFtIHtJR2xvYmFsU2V0dGluZ3N9IG9wdGlvbnMg44Ot44Kw44Gr5L2/55So44GZ44KL44Kq44OX44K344On44OzXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gc2V0U2V0dGluZ3Moc2V0dGluZ3M6IElHbG9iYWxTZXR0aW5ncyk6IHZvaWQge1xyXG4gICAgaWYgKHNldHRpbmdzKSB7XHJcbiAgICAgICAgX3NldHRpbmdzLmZvcmNlICAgICA9IHNldHRpbmdzLmZvcmNlICAgICAgICB8fCBfc2V0dGluZ3MuZm9yY2U7XHJcbiAgICAgICAgX3NldHRpbmdzLnZlcmJvc2UgICA9IHNldHRpbmdzLnZlcmJvc2UgICAgICB8fCBfc2V0dGluZ3MudmVyYm9zZTtcclxuICAgICAgICBfc2V0dGluZ3Muc2lsZW50ICAgID0gc2V0dGluZ3Muc2lsZW50ICAgICAgIHx8IF9zZXR0aW5ncy5zaWxlbnQ7XHJcbiAgICAgICAgX3NldHRpbmdzLnRhcmdldERpciA9IHNldHRpbmdzLnRhcmdldERpciAgICB8fCBfc2V0dGluZ3MudGFyZ2V0RGlyO1xyXG4gICAgICAgIF9zZXR0aW5ncy5sYW5nICAgICAgPSBzZXR0aW5ncy5sYW5nICAgICAgICAgfHwgX3NldHRpbmdzLmxhbmc7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIF9zZXR0aW5ncyA9IHtcclxuICAgICAgICAgICAgZm9yY2U6IGZhbHNlLFxyXG4gICAgICAgICAgICB2ZXJib3NlOiBmYWxzZSxcclxuICAgICAgICAgICAgc2lsZW50OiBmYWxzZSxcclxuICAgICAgICAgICAgbGFuZzogXCJlbi1VU1wiLFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBcImNkcC1saWJcIiDjgYzlrZjlnKjjgZnjgovjg5HjgrnjgpLlj5blvpdcclxuICpcclxuICogQHJldHVybiB7U3RyaW5nfSBjZHAtbGliIOOBuOOBriBwYXRoXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ2V0TGliUGF0aCgpOiBzdHJpbmcge1xyXG4gICAgaWYgKG51bGwgPT0gX2xpYlBhdGgpIHtcclxuICAgICAgICBjb25zdCBUUllfQ09VTlQgPSAzO1xyXG4gICAgICAgIGxldCB0cmllZCA9IDA7XHJcbiAgICAgICAgX2xpYlBhdGggPSBfX2Rpcm5hbWU7XHJcbiAgICAgICAgd2hpbGUgKHRydWUpIHtcclxuICAgICAgICAgICAgaWYgKFRSWV9DT1VOVCA8PSB0cmllZCkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoXCJsaWIgcGF0aCBpcyBub3QgcmVzb2x2ZWQuXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF9saWJQYXRoID0gcGF0aC5qb2luKF9saWJQYXRoLCBcIi4uXCIpO1xyXG4gICAgICAgICAgICBjb25zdCBjaGVjayA9IHBhdGguam9pbihfbGliUGF0aCwgXCJjZHAtbGliXCIpO1xyXG4gICAgICAgICAgICBpZiAoZnMucGF0aEV4aXN0c1N5bmMoY2hlY2spKSB7XHJcbiAgICAgICAgICAgICAgICBfbGliUGF0aCA9IGNoZWNrO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdHJpZWQrKztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gX2xpYlBhdGg7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiDmjIflrprjgZXjgozjgZ8gdGFyZ2V0RGlyIOOCkuWPluW+l1xyXG4gKlxyXG4gKiBAcmV0dXJuIHtTdHJpbmd9IHRhcmdldERpciDjgbjjga4gcGF0aFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFRhcmdldERpcigpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIF9zZXR0aW5ncy50YXJnZXREaXI7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiDjg63jgrDlh7rliptcclxuICogY29uc29sZS5sb2coKSDjgajlkIznrYlcclxuICpcclxuICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2UgICAgICAgIOWHuuWKm+ODoeODg+OCu+ODvOOCuFxyXG4gKiBAcGFyYW0ge0FueVtdfSAgb3B0aW9uYWxQYXJhbXMg5LuY5Yqg5oOF5aCxXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gbG9nKG1lc3NhZ2U/OiBzdHJpbmcsIC4uLm9wdGlvbmFsUGFyYW1zOiBhbnlbXSk6IHZvaWQge1xyXG4gICAgaWYgKCFfc2V0dGluZ3Muc2lsZW50KSB7XHJcbiAgICAgICAgaWYgKDAgPCBvcHRpb25hbFBhcmFtcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2cobWVzc2FnZSwgb3B0aW9uYWxQYXJhbXMpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKG1lc3NhZ2UpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIOips+e0sOODreOCsOWHuuWKm1xyXG4gKiBjb25zb2xlLmRlYnVnKCkg44Go5ZCM562JXHJcbiAqXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlICAgICAgICDlh7rlipvjg6Hjg4Pjgrvjg7zjgrhcclxuICogQHBhcmFtIHtBbnlbXX0gIG9wdGlvbmFsUGFyYW1zIOS7mOWKoOaDheWgsVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGRlYnVnKG1lc3NhZ2U/OiBzdHJpbmcsIC4uLm9wdGlvbmFsUGFyYW1zOiBhbnlbXSk6IHZvaWQge1xyXG4gICAgaWYgKCFfc2V0dGluZ3Muc2lsZW50ICYmIF9zZXR0aW5ncy52ZXJib3NlKSB7XHJcbiAgICAgICAgaWYgKDAgPCBvcHRpb25hbFBhcmFtcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkRFQlVHOiBcIiArIG1lc3NhZ2UsIG9wdGlvbmFsUGFyYW1zKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiREVCVUc6IFwiICsgbWVzc2FnZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG4vKipcclxuICog5qSc6Ki8XHJcbiAqIGNvbnNvbGUuYXNzZXJ0KCkg44Go5ZCM562JXHJcbiAqXHJcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gdGVzdCAgICAgICAgICAg5qSc6Ki844GZ44KL5byPXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSAgbWVzc2FnZSAgICAgICAg5Ye65Yqb44Oh44OD44K744O844K4XHJcbiAqIEBwYXJhbSB7QW55W119ICAgb3B0aW9uYWxQYXJhbXMg5LuY5Yqg5oOF5aCxXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gYXNzZXJ0KHRlc3Q/OiBib29sZWFuLCBtZXNzYWdlPzogc3RyaW5nLCAuLi5vcHRpb25hbFBhcmFtczogYW55W10pOiB2b2lkIHtcclxuICAgIGlmICghdGVzdCkge1xyXG4gICAgICAgIGlmIChfc2V0dGluZ3MuZm9yY2UpIHtcclxuICAgICAgICAgICAgaWYgKDAgPCBvcHRpb25hbFBhcmFtcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihtZXNzYWdlLCBvcHRpb25hbFBhcmFtcyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4obWVzc2FnZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAoMCA8IG9wdGlvbmFsUGFyYW1zLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihtZXNzYWdlLCBvcHRpb25hbFBhcmFtcyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKG1lc3NhZ2UpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHByb2Nlc3MuZXhpdCgxKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbmxldCBfbGFuZzogYW55O1xyXG5cclxuLyoqXHJcbiAqIOODreODvOOCq+ODqeOCpOOCulxyXG4gKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30ga2V5IOOCreODvOaWh+Wtl+WIl1xyXG4gKiBAcmV0dXJuIOe/u+ios+OBleOCjOOBn+aWh+Wtl+WIl1xyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zbGF0ZShrZXk6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICBpZiAoIV9sYW5nKSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgX2xhbmcgPSBKU09OLnBhcnNlKGZzLnJlYWRGaWxlU3luYyhcclxuICAgICAgICAgICAgICAgIHBhdGguam9pbihnZXRMaWJQYXRoKCksIFwicmVzL2xvY2FsZXNcIiwgXCJtZXNzYWdlcy5cIiArIF9zZXR0aW5ncy5sYW5nICsgXCIuanNvblwiKSwgXCJ1dGY4XCIpLnRvU3RyaW5nKClcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICB0aHJvdyBFcnJvcihcIkxhbmd1YWdlIHJlc291cmNlIEpTT04gcGFyc2UgZXJyb3I6IFwiICsgZXJyb3IubWVzc2FnZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGxldCByZXNvdWNlID0gJC5leHRlbmQoe30sIF9sYW5nKTtcclxuICAgIGNvbnN0IHByb3BzID0ga2V5LnNwbGl0KFwiLlwiKTtcclxuICAgIHdoaWxlICgwIDwgcHJvcHMubGVuZ3RoKSB7XHJcbiAgICAgICAgY29uc3QgcHJvcCA9IHByb3BzLnNoaWZ0KCk7XHJcbiAgICAgICAgaWYgKHJlc291Y2VbcHJvcF0pIHtcclxuICAgICAgICAgICAgcmVzb3VjZSA9IHJlc291Y2VbcHJvcF07XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgYXNzZXJ0KGZhbHNlLCBcInJlc291Y2Ugbm90IGZvdW5kLiBrZXk6IFwiICsga2V5KTtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlc291Y2U7XHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4uLy4uL3NyYy91dGlscy9zZXR0aW5ncy50cyIsIi8qIHRzbGludDpkaXNhYmxlOm5vLXVudXNlZC12YXJpYWJsZSBuby11bnVzZWQtdmFycyAqL1xyXG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqL1xyXG5cclxuaW1wb3J0IHsgSUJhc2VTdHJ1Y3R1cmVDb25maWdyYXRpb24sIEdlbmVyYXRvckJhc2UgfSBmcm9tIFwiLi4vYmFzZVwiO1xyXG5pbXBvcnQgeyBJRGVza3RvcEFwcENvbmZpZ3JhdGlvbiB9IGZyb20gXCIuL2ludGVyZmFjZXNcIjtcclxuXHJcbi8qKlxyXG4gKiBAY2xhc3MgR2VuZXJhdG9yRWxlY3Ryb25cclxuICogQGJyaWVmIERlc2t0b3AgRWxlY3Ryb24g55SoIEdlbmVyYXRvciDjgq/jg6njgrlcclxuICovXHJcbmV4cG9ydCBjbGFzcyBHZW5lcmF0b3JFbGVjdHJvbiBleHRlbmRzIEdlbmVyYXRvckJhc2Uge1xyXG5cclxuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbiAgICAvLyBpbXByZW1lbnRlczogR2VuZXJhdG9yQmFzZVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5pei5a6a44GuIGRpcmVjdG9yeSDmp4vpgKDjgpLov5TljbRcclxuICAgICAqL1xyXG4gICAgZGVmYXVsdEJhc2VTdHJ1Y3R1cmUoKTogSUJhc2VTdHJ1Y3R1cmVDb25maWdyYXRpb24ge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHNyYzogXCJhcHBcIixcclxuICAgICAgICAgICAgcGtnOiBcInd3dy9hcHBcIiwgLy8gVE9ETzog5pqr5a6aXHJcbiAgICAgICAgICAgIGJ1aWx0OiBcImFwcFwiLFxyXG4gICAgICAgICAgICBkb2M6IFwiZG9jc1wiLFxyXG4gICAgICAgICAgICB0YXNrOiBcInRhc2tzXCIsXHJcbiAgICAgICAgICAgIHRlc3Q6IFwidGVzdHNcIixcclxuICAgICAgICAgICAgdHlwZXM6IFwiQHR5cGVzXCIsXHJcbiAgICAgICAgICAgIHNyY0NvbmZpZzoge1xyXG4gICAgICAgICAgICAgICAgc2NyaXB0OiBcInNjcmlwdHNcIixcclxuICAgICAgICAgICAgICAgIHN0eWxlc2hlZXQ6IFwic3R5bGVzaGVldHNcIixcclxuICAgICAgICAgICAgICAgIHRlbXBsYXRlOiBcInRlbXBsYXRlc1wiLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBjcmVhdGUgYWN0aW9uIGVudHJ5XHJcbiAgICAgKiBAcGFyYW0ge0lEZXNrdG9wQXBwQ29uZmlncmF0aW9ufSBjb25maWcg44Kz44Oz44OV44Kj44Kw6Kit5a6aXHJcbiAgICAgKi9cclxuICAgIGFzeW5jIGNyZWF0ZSgpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgICAgICAvLyBUT0RPOlxyXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChcInVuZGVyIGNvbnN0cnVjdGlvbi5cIik7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDlv4XopoHjgajjgZnjgosgdGFzayBzY3JpcHQg5LiA6Kan44KS6L+U5Y20LiBhY3Rpb246IGNyZWF0ZSDjga7jgajjgY3jgavlkbzjgbDjgozjgotcclxuICAgICAqL1xyXG4gICAgZ2V0IHRhc2tMaXN0KCk6IHN0cmluZ1tdIHtcclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICBcImJhbm5lci5qc1wiLFxyXG4gICAgICAgICAgICBcImNsZWFuLmpzXCIsXHJcbiAgICAgICAgICAgIFwic3JjbWFwLmpzXCIsXHJcbiAgICAgICAgICAgIFwiYnVpbGQtdHMtY2xlYW4uanNcIixcclxuICAgICAgICAgICAgXCJidWlsZC10cy1ub3JtYWxpemUuanNcIixcclxuICAgICAgICBdO1xyXG4gICAgfVxyXG5cclxuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbiAgICAvLyBwcml2YXRlIG1ldGhvZHM6XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBjb25maWdyYXRpb24g44Gr44Ki44Kv44K744K5XHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgZ2V0IGNvbmZpZygpOiBJRGVza3RvcEFwcENvbmZpZ3JhdGlvbiB7XHJcbiAgICAgICAgcmV0dXJuIDxJRGVza3RvcEFwcENvbmZpZ3JhdGlvbj50aGlzLl9jb25maWc7XHJcbiAgICB9XHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4uLy4uLy4uL3NyYy9nZW5lcmF0b3JzL2Rlc2t0b3AvZ2VuZXJhdG9yLWVsZWN0b3Jvbi50cyIsImltcG9ydCB7IEdlbmVyYXRvckJhc2UsIElQcm9qZWN0Q29uZmlncmF0aW9uIH0gZnJvbSBcIi4uL2Jhc2VcIjtcclxuaW1wb3J0IHsgR2VuZXJhdG9yRWxlY3Ryb24gfSBmcm9tIFwiLi9nZW5lcmF0b3ItZWxlY3Rvcm9uXCI7XHJcblxyXG5leHBvcnQgKiBmcm9tIFwiLi9pbnRlcmZhY2VzXCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL2dlbmVyYXRvci1lbGVjdG9yb25cIjtcclxuXHJcbi8qKlxyXG4gKiBnZW5lcmF0b3Ig55Sf5oiQ6Zai5pWwXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gbmV3R2VuZXJhdG9yRGVza3RvcChjb25maWc6IElQcm9qZWN0Q29uZmlncmF0aW9uKTogR2VuZXJhdG9yQmFzZSB7XHJcbiAgICByZXR1cm4gbmV3IEdlbmVyYXRvckVsZWN0cm9uKGNvbmZpZyk7XHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4uLy4uLy4uL3NyYy9nZW5lcmF0b3JzL2Rlc2t0b3AvaW5kZXgudHMiLCJpbXBvcnQgKiBhcyBwYXRoIGZyb20gXCJwYXRoXCI7XHJcbmltcG9ydCAqIGFzIG9zIGZyb20gXCJvc1wiO1xyXG5pbXBvcnQge1xyXG4gICAgSUJhc2VTdHJ1Y3R1cmVDb25maWdyYXRpb24sXHJcbiAgICBJRGVwZW5kZW5jeSxcclxuICAgIElWaXN1YWxTdHVkaW9Db25maWdyYXRpb24sXHJcbiAgICBHZW5lcmF0b3JCYXNlLFxyXG4gICAgVXRpbHMsXHJcbn0gZnJvbSBcIi4uL2Jhc2VcIjtcclxuaW1wb3J0IHsgSUxpYnJhcnlDb25maWdyYXRpb24gfSBmcm9tIFwiLi9pbnRlcmZhY2VzXCI7XHJcblxyXG5jb25zdCBmcyAgICAgICAgICAgID0gVXRpbHMuZnM7XHJcbmNvbnN0IGdsb2IgICAgICAgICAgPSBVdGlscy5nbG9iO1xyXG5jb25zdCAkICAgICAgICAgICAgID0gVXRpbHMuJDtcclxuY29uc3QgXyAgICAgICAgICAgICA9IFV0aWxzLl87XHJcbmNvbnN0IGRlYnVnICAgICAgICAgPSBVdGlscy5kZWJ1ZztcclxuY29uc3QgdGVtcGxhdGVQYXRoICA9IFV0aWxzLnRlbXBsYXRlUGF0aDtcclxuY29uc3QgY29weVRwbCAgICAgICA9IFV0aWxzLmNvcHlUcGw7XHJcblxyXG4vKipcclxuICogQGNsYXNzIEdlbmVyYXRvck1vZHVsZVxyXG4gKiBAYnJpZWYgTGlicmFyeSBNb2R1bGUg55SoIEdlbmVyYXRvciDjgq/jg6njgrlcclxuICovXHJcbmV4cG9ydCBjbGFzcyBHZW5lcmF0b3JNb2R1bGUgZXh0ZW5kcyBHZW5lcmF0b3JCYXNlIHtcclxuXHJcbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG4gICAgLy8gaW1wcmVtZW50ZXM6IEdlbmVyYXRvckJhc2VcclxuXHJcbiAgICAvKipcclxuICAgICAqIOaXouWumuOBriBkaXJlY3Rvcnkg5qeL6YCg44KS6L+U5Y20XHJcbiAgICAgKi9cclxuICAgIGRlZmF1bHRCYXNlU3RydWN0dXJlKCk6IElCYXNlU3RydWN0dXJlQ29uZmlncmF0aW9uIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBzcmM6IFwic3JjXCIsXHJcbiAgICAgICAgICAgIHBrZzogXCJkaXN0XCIsXHJcbiAgICAgICAgICAgIGJ1aWx0OiBcImJ1aWx0XCIsXHJcbiAgICAgICAgICAgIGRvYzogXCJkb2NzXCIsXHJcbiAgICAgICAgICAgIHRhc2s6IFwidGFza3NcIixcclxuICAgICAgICAgICAgdGVzdDogXCJ0ZXN0c1wiLFxyXG4gICAgICAgICAgICB0eXBlczogXCJAdHlwZXNcIixcclxuICAgICAgICAgICAgdGVtcDogXCIudGVtcFwiLFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBjcmVhdGUgYWN0aW9uIGVudHJ5XHJcbiAgICAgKiBAcGFyYW0ge0lMaWJyYXJ5Q29uZmlncmF0aW9ufSBjb25maWcg44Kz44Oz44OV44Kj44Kw6Kit5a6aXHJcbiAgICAgKi9cclxuICAgIGFzeW5jIGNyZWF0ZSgpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgICAgICBhd2FpdCB0aGlzLmVuc3VyZU1vZHVsZVByb3BzKCk7XHJcbiAgICAgICAgYXdhaXQgdGhpcy5jcmVhdGVEaXJlY3RvcnlTdHJ1Y3R1cmUoKTtcclxuICAgICAgICBhd2FpdCB0aGlzLmNyZWF0ZVByb2plY3RTZXR0aW5ncygpO1xyXG4gICAgICAgIGF3YWl0IHRoaXMuY3JlYXRlU291cmNlVGVtcGxhdGUoKTtcclxuICAgICAgICBhd2FpdCB0aGlzLmNyZWF0ZVZpc3VhbFN0dWRpb1NvbHV0aW9uKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDlv4XopoHjgajjgZnjgosgdGFzayBzY3JpcHQg5LiA6Kan44KS6L+U5Y20LiBhY3Rpb246IGNyZWF0ZSDjga7jgajjgY3jgavlkbzjgbDjgozjgotcclxuICAgICAqL1xyXG4gICAgZ2V0IHRhc2tMaXN0KCk6IHN0cmluZ1tdIHtcclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICBcImJhbm5lci5qc1wiLFxyXG4gICAgICAgICAgICBcImNsZWFuLmpzXCIsXHJcbiAgICAgICAgICAgIFwic3JjbWFwLmpzXCIsXHJcbiAgICAgICAgICAgIFwiYnVuZGxlLWZpbmFsaXplci5qc1wiLFxyXG4gICAgICAgICAgICBcInJlbWFwLWNvdmVyYWdlLmpzXCIsXHJcbiAgICAgICAgXTtcclxuICAgIH1cclxuXHJcbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG4gICAgLy8gcHJvdGVjdGVkIG1ldGhvZHM6XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDplovnmbrmmYLjga7kvp3lrZjjg6Ljgrjjg6Xjg7zjg6vjg6rjgrnjg4jjga7lj5blvpdcclxuICAgICAqIOW/heimgeOBq+W/nOOBmOOBpuOCquODvOODkOODvOODqeOCpOODiVxyXG4gICAgICpcclxuICAgICAqIEByZXR1cm4ge0lEZXBlbmRlbmN5fVxyXG4gICAgICovXHJcbiAgICBwcm90ZWN0ZWQgZ2V0IGRlZmF1bHREZXZEZXBlbmRlbmNpZXMoKTogSURlcGVuZGVuY3lbXSB7XHJcbiAgICAgICAgY29uc3QgZGVwZW5kcyA9IHN1cGVyLmRlZmF1bHREZXZEZXBlbmRlbmNpZXMuY29uY2F0KFtcclxuICAgICAgICAgICAgeyBuYW1lOiBcIkB0eXBlcy9qYXNtaW5lXCIsICAgICAgIHZlcnNpb246IHVuZGVmaW5lZCwgfSxcclxuICAgICAgICAgICAgeyBuYW1lOiBcImR0cy1idW5kbGVcIiwgICAgICAgICAgIHZlcnNpb246IHVuZGVmaW5lZCwgfSxcclxuICAgICAgICAgICAgeyBuYW1lOiBcInR5cGVzY3JpcHQtZm9ybWF0dGVyXCIsIHZlcnNpb246IHVuZGVmaW5lZCwgfSxcclxuICAgICAgICBdKTtcclxuXHJcbiAgICAgICAgY29uc3QgZXh0cmEgPSBbXTtcclxuICAgICAgICBpZiAodGhpcy5jb25maWcubm9kZWpzKSB7XHJcbiAgICAgICAgICAgIGV4dHJhLnB1c2goeyBuYW1lOiBcImphc21pbmUtbm9kZVwiLCB2ZXJzaW9uOiBcIl4yLjAuMFwiLCB9KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBleHRyYS5wdXNoKHsgbmFtZTogXCJyZXF1aXJlanNcIiwgdmVyc2lvbjogdW5kZWZpbmVkLCB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBfLnNvcnRCeShkZXBlbmRzLmNvbmNhdChleHRyYSksIChkZXBlbmQpID0+IGRlcGVuZC5uYW1lKTtcclxuICAgIH1cclxuXHJcbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG4gICAgLy8gcHJpdmF0ZSBtZXRob2RzOlxyXG5cclxuICAgIC8qKlxyXG4gICAgICogY29uZmlncmF0aW9uIOOBq+OCouOCr+OCu+OCuVxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGdldCBjb25maWcoKTogSUxpYnJhcnlDb25maWdyYXRpb24ge1xyXG4gICAgICAgIHJldHVybiA8SUxpYnJhcnlDb25maWdyYXRpb24+dGhpcy5fY29uZmlnO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogbW9kdWxlIOWQjSwgbWFpbiDjg5XjgqHjgqTjg6vlkI3jga7kv53oqLxcclxuICAgICAqIC0gMTogbW9kdWxlTmFtZSDjgYzmjIflrprjgZXjgozjgabjgYTjgovloLTlkIjjga/kvb/nlKjjgZnjgotcclxuICAgICAqIC0gMjogcHJvamVjdE5hbWUg44GM5L2/55So5Y+v6IO944Gq5aC05ZCI44Gv44Gd44KM44KS5L2/55So44GZ44KLXHJcbiAgICAgKiAtIDM6IHByb2plY3ROYW1lIOOBjOS9v+eUqOS4jeWPr+OBruWgtOWQiOOBr+OAgVwiLVwiIOOBpOOBquOBjuaWh+Wtl+WIl+OCkueUn+aIkOOBmeOCi1xyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGVuc3VyZU1vZHVsZVByb3BzKCk6IHZvaWQge1xyXG4gICAgICAgIC8vIG1vZHVsZSBuYW1lXHJcbiAgICAgICAgaWYgKG51bGwgPT0gdGhpcy5jb25maWcubW9kdWxlTmFtZSkge1xyXG4gICAgICAgICAgICBpZiAoIS9eLipbKFxcXFx8XFxzfC98OnwqfD98XCJ8PHw+fHwpXS4qJC8udGVzdCh0aGlzLmNvbmZpZy5wcm9qZWN0TmFtZSkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29uZmlnLm1vZHVsZU5hbWUgPSB0aGlzLmNvbmZpZy5wcm9qZWN0TmFtZTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29uZmlnLm1vZHVsZU5hbWUgPSBfLnRyaW0oXy5kYXNoZXJpemUodGhpcy5jb25maWcucHJvamVjdE5hbWUpLCBcIi1cIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZGVidWcoXCJtb2R1bGVOYW1lOiBcIiArIHRoaXMuY29uZmlnLm1vZHVsZU5hbWUpO1xyXG5cclxuICAgICAgICAvLyBtYWluIGZpbGUgbmFtZVxyXG4gICAgICAgIGlmIChudWxsID09IHRoaXMuY29uZmlnLm1haW5CYXNlTmFtZSkge1xyXG4gICAgICAgICAgICB0aGlzLmNvbmZpZy5tYWluQmFzZU5hbWUgPSB0aGlzLmNvbmZpZy5tb2R1bGVOYW1lO1xyXG4gICAgICAgIH1cclxuICAgICAgICBkZWJ1ZyhcIm1haW5CYXNlTmFtZTogXCIgKyB0aGlzLmNvbmZpZy5tYWluQmFzZU5hbWUpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog44OH44Kj44Os44Kv44OI44Oq5qeL5oiQ5oOF5aCx44Gu44Kz44OU44O8XHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgY3JlYXRlRGlyZWN0b3J5U3RydWN0dXJlKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuY29weVRwbERpcihcImxpYnJhcnkvc3RydWN0dXJlXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog44OX44Ot44K444Kn44Kv44OI6Kit5a6a44OV44Kh44Kk44Or44Gu5L2c5oiQXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgYXN5bmMgY3JlYXRlUHJvamVjdFNldHRpbmdzKCk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgICAgIC8vIHByb2plY3QuY29uZmlnLmpzXHJcbiAgICAgICAgY29weVRwbChcclxuICAgICAgICAgICAgcGF0aC5qb2luKHRlbXBsYXRlUGF0aChcImxpYnJhcnlcIiksIFwiX3Byb2plY3QuY29uZmlnLmpzXCIpLFxyXG4gICAgICAgICAgICBwYXRoLmpvaW4odGhpcy5yb290RGlyLCBcInByb2plY3QuY29uZmlnLmpzXCIpLFxyXG4gICAgICAgICAgICB0aGlzLl9jb25maWcsXHJcbiAgICAgICAgICAgIHsgZGVsaW1pdGVyczogXCI8JSAlPlwiIH1cclxuICAgICAgICApO1xyXG5cclxuICAgICAgICAvLyB0c2NvbmZpZ1xyXG4gICAgICAgIGlmICghdGhpcy5jb25maWcub3V0cHV0U2FtZURpcikge1xyXG4gICAgICAgICAgICAvLyBtYWluIHRzY29uZmlnLmpzb25cclxuICAgICAgICAgICAgY29weVRwbChcclxuICAgICAgICAgICAgICAgIHBhdGguam9pbih0ZW1wbGF0ZVBhdGgoXCJsaWJyYXJ5XCIpLCBcIl90c2NvbmZpZy5qc29uXCIpLFxyXG4gICAgICAgICAgICAgICAgcGF0aC5qb2luKHRoaXMucm9vdERpciwgXCJ0c2NvbmZpZy5qc29uXCIpLFxyXG4gICAgICAgICAgICAgICAgdGhpcy5fY29uZmlnLFxyXG4gICAgICAgICAgICAgICAgeyBkZWxpbWl0ZXJzOiBcIjwlICU+XCIsIGJvbTogZmFsc2UsIH1cclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgLy8gdGVzdCB0c2NvbmZpZy5qc29uXHJcbiAgICAgICAgICAgIGNvcHlUcGwoXHJcbiAgICAgICAgICAgICAgICBwYXRoLmpvaW4odGVtcGxhdGVQYXRoKFwibGlicmFyeVwiKSwgXCJfdHNjb25maWcudGVzdC5qc29uXCIpLFxyXG4gICAgICAgICAgICAgICAgcGF0aC5qb2luKHRoaXMucm9vdERpciwgdGhpcy5fY29uZmlnLnN0cnVjdHVyZUNvbmZpZy50ZXN0LCBcInVuaXRcIiwgXCJ0c2NvbmZpZy5qc29uXCIpLFxyXG4gICAgICAgICAgICAgICAgdGhpcy5fY29uZmlnLFxyXG4gICAgICAgICAgICAgICAgeyBkZWxpbWl0ZXJzOiBcIjwlICU+XCIsIGJvbTogZmFsc2UsIH1cclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBtYWluIHRzY29uZmlnLmpzb25cclxuICAgICAgICAgICAgY29weVRwbChcclxuICAgICAgICAgICAgICAgIHBhdGguam9pbih0ZW1wbGF0ZVBhdGgoXCJsaWJyYXJ5XCIpLCBcIl90c2NvbmZpZy5vdXRwdXQtc2FtZS1kaXIuanNvblwiKSxcclxuICAgICAgICAgICAgICAgIHBhdGguam9pbih0aGlzLnJvb3REaXIsIFwidHNjb25maWcuanNvblwiKSxcclxuICAgICAgICAgICAgICAgIHRoaXMuX2NvbmZpZyxcclxuICAgICAgICAgICAgICAgIHsgZGVsaW1pdGVyczogXCI8JSAlPlwiLCBib206IGZhbHNlLCB9XHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBlc2xpbnRyYy5qc29uXHJcbiAgICAgICAgY29weVRwbChcclxuICAgICAgICAgICAgcGF0aC5qb2luKHRlbXBsYXRlUGF0aChcImxpYnJhcnlcIiksIFwiX2VzbGludHJjLmpzb25cIiksXHJcbiAgICAgICAgICAgIHBhdGguam9pbih0aGlzLnJvb3REaXIsIHRoaXMuX2NvbmZpZy5zdHJ1Y3R1cmVDb25maWcudGVzdCwgXCJlc2xpbnRcIiwgXCJlc2xpbnRyYy5qc29uXCIpLFxyXG4gICAgICAgICAgICB0aGlzLnF1ZXJ5RXNMaW50RW52UGFyYW0oKSxcclxuICAgICAgICAgICAgeyBkZWxpbWl0ZXJzOiBcIjwlICU+XCIsIGJvbTogZmFsc2UsIH1cclxuICAgICAgICApO1xyXG5cclxuICAgICAgICAvLyB0ZXN0ZW1cclxuICAgICAgICBpZiAoIXRoaXMuY29uZmlnLm5vZGVqcykge1xyXG4gICAgICAgICAgICBjb3B5VHBsKFxyXG4gICAgICAgICAgICAgICAgcGF0aC5qb2luKHRlbXBsYXRlUGF0aChcImxpYnJhcnkvdG9vbHMvdGVzdGVtXCIpLCBcIl90ZXN0ZW0uanNvblwiKSxcclxuICAgICAgICAgICAgICAgIHBhdGguam9pbih0aGlzLnJvb3REaXIsIHRoaXMuX2NvbmZpZy5zdHJ1Y3R1cmVDb25maWcudGVzdCwgXCJydW5uZXJcIiwgXCJ0ZXN0ZW0uanNvblwiKSxcclxuICAgICAgICAgICAgICAgIHRoaXMuX2NvbmZpZyxcclxuICAgICAgICAgICAgICAgIHsgZGVsaW1pdGVyczogXCI8JSAlPlwiLCBib206IGZhbHNlLCB9XHJcbiAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCB0ZXN0ZW1TdHVmZlBhdGggPSB0ZW1wbGF0ZVBhdGgoXCJsaWJyYXJ5L3Rvb2xzL3Rlc3RlbS9ydW5uZXJcIik7XHJcblxyXG4gICAgICAgICAgICBnbG9iLnN5bmMoXCIqKlwiLCB7XHJcbiAgICAgICAgICAgICAgICBjd2Q6IHRlc3RlbVN0dWZmUGF0aCxcclxuICAgICAgICAgICAgICAgIG5vZGlyOiB0cnVlLFxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLmZvckVhY2goKGZpbGUpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBmcy5jb3B5U3luYyhcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGF0aC5qb2luKHRlc3RlbVN0dWZmUGF0aCwgZmlsZSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhdGguam9pbih0aGlzLnJvb3REaXIsIHRoaXMuX2NvbmZpZy5zdHJ1Y3R1cmVDb25maWcudGVzdCwgXCJydW5uZXJcIiwgZmlsZSlcclxuICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyAuZ2l0aWdub3JlXHJcbiAgICAgICAgY29weVRwbChcclxuICAgICAgICAgICAgcGF0aC5qb2luKHRlbXBsYXRlUGF0aChcImxpYnJhcnlcIiksIFwiLmdpdGlnbm9yZVwiKSxcclxuICAgICAgICAgICAgcGF0aC5qb2luKHRoaXMucm9vdERpciwgXCIuZ2l0aWdub3JlXCIpLFxyXG4gICAgICAgICAgICB0aGlzLl9jb25maWcsXHJcbiAgICAgICAgICAgIHsgYm9tOiBmYWxzZSwgfVxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIC8vIFJFQURNRS5tZFxyXG4gICAgICAgIGNvcHlUcGwoXHJcbiAgICAgICAgICAgIHBhdGguam9pbih0ZW1wbGF0ZVBhdGgoXCJsaWJyYXJ5XCIpLCBcIl9SRUFETUUubWRcIiksXHJcbiAgICAgICAgICAgIHBhdGguam9pbih0aGlzLnJvb3REaXIsIFwiUkVBRE1FLm1kXCIpLFxyXG4gICAgICAgICAgICB0aGlzLl9jb25maWcsXHJcbiAgICAgICAgICAgIHsgZGVsaW1pdGVyczogXCI8JSAlPlwiIH1cclxuICAgICAgICApO1xyXG5cclxuICAgICAgICAvLyBwYWNrYWdlLmpzb25cclxuICAgICAgICB0aGlzLmNvbmZpZy5kZXZEZXBlbmRlbmNpZXMgPSBhd2FpdCB0aGlzLnF1ZXJ5RGVwZW5kZW5jaWVzUGFyYW0odGhpcy5jb25maWcuZGV2RGVwZW5kZW5jaWVzIHx8IHRoaXMuZGVmYXVsdERldkRlcGVuZGVuY2llcyk7XHJcbiAgICAgICAgY29weVRwbChcclxuICAgICAgICAgICAgcGF0aC5qb2luKHRlbXBsYXRlUGF0aChcImxpYnJhcnlcIiksIFwiX3BhY2thZ2UuanNvblwiKSxcclxuICAgICAgICAgICAgcGF0aC5qb2luKHRoaXMucm9vdERpciwgXCJwYWNrYWdlLmpzb25cIiksXHJcbiAgICAgICAgICAgIHRoaXMuX2NvbmZpZyxcclxuICAgICAgICAgICAgeyBkZWxpbWl0ZXJzOiBcIjwlICU+XCIsIGJvbTogZmFsc2UsIH1cclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog44K944O844K544Gu6Zub5b2i5L2c5oiQXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgYXN5bmMgY3JlYXRlU291cmNlVGVtcGxhdGUoKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICAgICAgY29uc3QgX21vZHVsZSA9IHBhdGguYmFzZW5hbWUodGhpcy5fY29uZmlnLm1vZHVsZU5hbWUsIFwiLmpzXCIpO1xyXG4gICAgICAgIGNvbnN0IHBhcmFtID0ge1xyXG4gICAgICAgICAgICBzYW1wbGVDbGFzczogXy5jbGFzc2lmeShfbW9kdWxlKSxcclxuICAgICAgICAgICAgc2FtcGxlTW9kdWxlOiBfbW9kdWxlLFxyXG4gICAgICAgICAgICBidWlsdDogdGhpcy5fY29uZmlnLnN0cnVjdHVyZUNvbmZpZy5idWlsdCxcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBjb25zdCBzY3JpcHQgPSAoKCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fY29uZmlnLnN0cnVjdHVyZUNvbmZpZy5zcmNDb25maWcpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9jb25maWcuc3RydWN0dXJlQ29uZmlnLnNyY0NvbmZpZy5zY3JpcHQgfHwgXCJcIjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gXCJcIjtcclxuICAgICAgICB9KSgpO1xyXG5cclxuICAgICAgICAvLyBpbmRleC50c1xyXG4gICAgICAgIGNvcHlUcGwoXHJcbiAgICAgICAgICAgIHBhdGguam9pbih0ZW1wbGF0ZVBhdGgoXCJsaWJyYXJ5XCIpLCBcInNyY1wiLCBcIl9pbmRleC50c1wiKSxcclxuICAgICAgICAgICAgcGF0aC5qb2luKHRoaXMucm9vdERpciwgdGhpcy5fY29uZmlnLnN0cnVjdHVyZUNvbmZpZy5zcmMsIHNjcmlwdCwgX21vZHVsZSArIFwiLnRzXCIpLFxyXG4gICAgICAgICAgICBwYXJhbSxcclxuICAgICAgICAgICAgeyBkZWxpbWl0ZXJzOiBcIjwlICU+XCIgfVxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIC8vIGluZGV4LnNwZWMudHNcclxuICAgICAgICBjb3B5VHBsKFxyXG4gICAgICAgICAgICBwYXRoLmpvaW4odGVtcGxhdGVQYXRoKFwibGlicmFyeVwiKSwgXCJzcmNcIiwgXCJfaW5kZXguc3BlYy50c1wiKSxcclxuICAgICAgICAgICAgcGF0aC5qb2luKHRoaXMucm9vdERpciwgdGhpcy5fY29uZmlnLnN0cnVjdHVyZUNvbmZpZy50ZXN0LCBcInVuaXRcIiwgX21vZHVsZSArIFwiLnNwZWMudHNcIiksXHJcbiAgICAgICAgICAgIHBhcmFtLFxyXG4gICAgICAgICAgICB7IGRlbGltaXRlcnM6IFwiPCUgJT5cIiB9XHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFZpc3VhbCBTdHVkaW8g44Gu44K944Oq44Ol44O844K344On44Oz44OV44Kh44Kk44Or5L2c5oiQXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgYXN5bmMgY3JlYXRlVmlzdWFsU3R1ZGlvU29sdXRpb24oKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICAgICAgY29uc3QgdnNQYXJhbSA9ICgoKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNyZWF0ZUdVSUQgPSBVdGlscy5jcmVhdGVHVUlEO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgcGFyYW06IElWaXN1YWxTdHVkaW9Db25maWdyYXRpb24gPSAkLmV4dGVuZCh7fSwgdGhpcy5fY29uZmlnLnN0cnVjdHVyZUNvbmZpZyk7XHJcblxyXG4gICAgICAgICAgICBwYXJhbS5wcm9qZWN0TmFtZSAgICAgICA9IHRoaXMuX2NvbmZpZy5wcm9qZWN0TmFtZTtcclxuICAgICAgICAgICAgcGFyYW0ucHJvamVjdEdVSUQgICAgICAgPSBjcmVhdGVHVUlEKCk7XHJcbiAgICAgICAgICAgIHBhcmFtLnR5cGVzICAgICAgICAgICAgID0gcGFyYW0udHlwZXMucmVwbGFjZShcIkBcIiwgXCIlNDBcIik7IC8vIGVzY2FwZSBcIkBcIiB0byBcIiU0MFwiXHJcbiAgICAgICAgICAgIHBhcmFtLm1haW5CYXNlTmFtZSAgICAgID0gdGhpcy5fY29uZmlnLm1haW5CYXNlTmFtZTtcclxuICAgICAgICAgICAgcGFyYW0ubGljZW5zZSAgICAgICAgICAgPSAhdGhpcy5fY29uZmlnLnByaXZhdGU7XHJcblxyXG4gICAgICAgICAgICAvLyB0b29sc1xyXG4gICAgICAgICAgICBwYXJhbS53ZWJwYWNrID0gdGhpcy5pc0VuYWJsZVRvb2woXCJ3ZWJwYWNrXCIpO1xyXG4gICAgICAgICAgICBwYXJhbS50ZXN0ZW0gPSAhdGhpcy5jb25maWcubm9kZWpzO1xyXG5cclxuICAgICAgICAgICAgcGFyYW0ub3V0cHV0U2FtZURpciA9IHRoaXMuY29uZmlnLm91dHB1dFNhbWVEaXI7XHJcblxyXG4gICAgICAgICAgICAvLyBzZXR1cCBidWlsdCBqcyBncm91cFxyXG4gICAgICAgICAgICBwYXJhbS5qc0dyb3VwID0gW107XHJcbiAgICAgICAgICAgIGlmICghcGFyYW0ub3V0cHV0U2FtZURpcikge1xyXG4gICAgICAgICAgICAgICAgcGFyYW0uanNHcm91cC5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICByZWxhdGl2ZVBhdGg6IHBhcmFtLmJ1aWx0ICsgXCJcXFxcXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgZmlsZU5hbWU6IHBhcmFtLm1haW5CYXNlTmFtZSxcclxuICAgICAgICAgICAgICAgICAgICBkZXBlbmRlZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICBkX3RzOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgIG1hcDogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICBtaW5fbWFwOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmNvbmZpZy5taW5pZnkpIHtcclxuICAgICAgICAgICAgICAgIC8vIHNldHVwIHBrZyBncm91cFxyXG4gICAgICAgICAgICAgICAgcGFyYW0uanNHcm91cC5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICByZWxhdGl2ZVBhdGg6IHBhcmFtLnBrZyArIFwiXFxcXFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGZpbGVOYW1lOiBwYXJhbS5tYWluQmFzZU5hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgZGVwZW5kZWU6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgIGRfdHM6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgIG1hcDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgbWluX21hcDogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBzZXR1cCB0ZXN0IGpzIGdyb3VwXHJcbiAgICAgICAgICAgIHBhcmFtLnRzR3JvdXAgPSBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVsYXRpdmVQYXRoOiBwYXJhbS50ZXN0ICsgXCJcXFxcdW5pdFxcXFxcIixcclxuICAgICAgICAgICAgICAgICAgICBmaWxlTmFtZTogcGFyYW0ubWFpbkJhc2VOYW1lICsgXCIuc3BlY1wiLFxyXG4gICAgICAgICAgICAgICAgICAgIGRlcGVuZGVlOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgIG1hcDogdGhpcy5jb25maWcub3V0cHV0U2FtZURpcixcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF07XHJcbiAgICAgICAgICAgIGlmIChwYXJhbS5vdXRwdXRTYW1lRGlyKSB7XHJcbiAgICAgICAgICAgICAgICBwYXJhbS50c0dyb3VwLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgIHJlbGF0aXZlUGF0aDogcGFyYW0uYnVpbHQgKyBcIlxcXFxcIixcclxuICAgICAgICAgICAgICAgICAgICBmaWxlTmFtZTogcGFyYW0ubWFpbkJhc2VOYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgIGRlcGVuZGVlOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICBtYXA6IHRydWUsXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHBhcmFtO1xyXG4gICAgICAgIH0pKCk7XHJcblxyXG4gICAgICAgIC8vIC5zbG5cclxuICAgICAgICBjb3B5VHBsKFxyXG4gICAgICAgICAgICBwYXRoLmpvaW4odGVtcGxhdGVQYXRoKFwiYmFzZS92aXN1YWwuc3R1ZGlvXCIpLCBcIl9zb2x1dGlvbi5zbG4udHBsXCIpLFxyXG4gICAgICAgICAgICBwYXRoLmpvaW4odGhpcy5yb290RGlyLCB2c1BhcmFtLnByb2plY3ROYW1lICsgXCIuc2xuXCIpLFxyXG4gICAgICAgICAgICB2c1BhcmFtLFxyXG4gICAgICAgICAgICB7IGRlbGltaXRlcnM6IFwiPCUgJT5cIiB9XHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgLy8gLmNzcHJvalxyXG4gICAgICAgICgoKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHRvWG1sU3RyaW5nID0gKGZpbGU6IHN0cmluZykgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaG9nYW4gPSBVdGlscy5ob2dhbjtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG5vcm1hbGl6ZVRleHQgPSBVdGlscy5ub3JtYWxpemVUZXh0O1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHtcclxuICAgICAgICAgICAgICAgICAgICBlb2w6IG9zLkVPTCxcclxuICAgICAgICAgICAgICAgICAgICBib206IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgZGVsaW1pdGVyczogXCJ7eyB9fVwiLFxyXG4gICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCB0cGwgPSBwYXRoLmpvaW4odGVtcGxhdGVQYXRoKFwiYmFzZS92aXN1YWwuc3R1ZGlvXCIpLCBmaWxlKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGpzdCA9IGhvZ2FuLmNvbXBpbGUobm9ybWFsaXplVGV4dChmcy5yZWFkRmlsZVN5bmModHBsKS50b1N0cmluZygpLCB7IGVvbDogXCJcXG5cIiwgYm9tOiBmYWxzZSB9KSwgb3B0aW9ucyk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4ganN0LnJlbmRlcih2c1BhcmFtKTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHRvWG1sRE9NID0gKGZpbGU6IHN0cmluZykgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuICQoJC5wYXJzZVhNTCh0b1htbFN0cmluZyhmaWxlKSkpO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgY29uc3QgdG9YbWxOb2RlID0gKGZpbGU6IHN0cmluZykgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFV0aWxzLnN0cjJYbWxOb2RlKHRvWG1sU3RyaW5nKGZpbGUpKTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0ICRwcm9qID0gdG9YbWxET00oXCJfcHJvamVjdC5jc3Byb2oudHBsXCIpO1xyXG4gICAgICAgICAgICBjb25zdCAkZ3BUUyA9IHRvWG1sTm9kZShcIl90cy5pdGVtLmdyb3VwLnRwbFwiKTtcclxuICAgICAgICAgICAgY29uc3QgJGdwSlMgPSB0b1htbE5vZGUoXCJfanMuaXRlbS5ncm91cC50cGxcIik7XHJcblxyXG4gICAgICAgICAgICAkcHJvalxyXG4gICAgICAgICAgICAgICAgLmZpbmQoXCJJdGVtR3JvdXBcIilcclxuICAgICAgICAgICAgICAgIC5sYXN0KClcclxuICAgICAgICAgICAgICAgIC5hZnRlcigkZ3BUUylcclxuICAgICAgICAgICAgICAgIC5hZnRlcigkZ3BKUylcclxuICAgICAgICAgICAgICAgIDtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGZvcm1hdFhNTCA9IFV0aWxzLmZvcm1hdFhNTDtcclxuICAgICAgICAgICAgY29uc3QgZHN0UGF0aCA9IHBhdGguam9pbih0aGlzLnJvb3REaXIsIHZzUGFyYW0ucHJvamVjdE5hbWUgKyBcIi5jc3Byb2pcIik7XHJcbiAgICAgICAgICAgIGRlYnVnKFV0aWxzLnhtbE5vZGUyU3RyKCRwcm9qKSk7XHJcbiAgICAgICAgICAgIGZzLndyaXRlRmlsZVN5bmMoZHN0UGF0aCwgZm9ybWF0WE1MKFV0aWxzLnhtbE5vZGUyU3RyKCRwcm9qKSkpO1xyXG4gICAgICAgIH0pKCk7XHJcbiAgICB9XHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4uLy4uLy4uL3NyYy9nZW5lcmF0b3JzL2xpYnJhcnkvZ2VuZXJhdG9yLW1vZHVsZS50cyIsImltcG9ydCB7IEdlbmVyYXRvckJhc2UsIElQcm9qZWN0Q29uZmlncmF0aW9uIH0gZnJvbSBcIi4uL2Jhc2VcIjtcclxuaW1wb3J0IHsgR2VuZXJhdG9yTW9kdWxlIH0gZnJvbSBcIi4vZ2VuZXJhdG9yLW1vZHVsZVwiO1xyXG5cclxuZXhwb3J0ICogZnJvbSBcIi4vaW50ZXJmYWNlc1wiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi9nZW5lcmF0b3ItbW9kdWxlXCI7XHJcblxyXG4vKipcclxuICogZ2VuZXJhdG9yIOeUn+aIkOmWouaVsFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIG5ld0dlbmVyYXRvckxpYnJhcnkoY29uZmlnOiBJUHJvamVjdENvbmZpZ3JhdGlvbik6IEdlbmVyYXRvckJhc2Uge1xyXG4gICAgcmV0dXJuIG5ldyBHZW5lcmF0b3JNb2R1bGUoY29uZmlnKTtcclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi4vLi4vLi4vc3JjL2dlbmVyYXRvcnMvbGlicmFyeS9pbmRleC50cyIsIi8qIHRzbGludDpkaXNhYmxlOm5vLXVudXNlZC12YXJpYWJsZSBuby11bnVzZWQtdmFycyAqL1xyXG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqL1xyXG5cclxuaW1wb3J0ICogYXMgcGF0aCBmcm9tIFwicGF0aFwiO1xyXG5pbXBvcnQgKiBhcyBvcyBmcm9tIFwib3NcIjtcclxuaW1wb3J0IHtcclxuICAgIGZzLFxyXG4gICAgZ2xvYixcclxuICAgICQsXHJcbiAgICBfLFxyXG4gICAgZGVidWcsXHJcbiAgICB0ZW1wbGF0ZVBhdGgsXHJcbiAgICBjb3B5VHBsLFxyXG4gICAgZXhlY0NvbW1hbmQsXHJcbiAgICBzdHIyWG1sTm9kZSxcclxuICAgIHhtbE5vZGUyU3RyLFxyXG4gICAgZm9ybWF0WE1MLFxyXG59IGZyb20gXCIuLi8uLi91dGlsc1wiO1xyXG5pbXBvcnQge1xyXG4gICAgSUJhc2VTdHJ1Y3R1cmVDb25maWdyYXRpb24sXHJcbiAgICBJRGVwZW5kZW5jeSxcclxuICAgIElWaXN1YWxTdHVkaW9Db25maWdyYXRpb24sXHJcbiAgICBHZW5lcmF0b3JCYXNlLFxyXG59IGZyb20gXCIuLi9iYXNlXCI7XHJcbmltcG9ydCB7IElNb2JpbGVBcHBDb25maWdyYXRpb24gfSBmcm9tIFwiLi9pbnRlcmZhY2VzXCI7XHJcblxyXG4vKipcclxuICogQGNsYXNzIEdlbmVyYXRvckNvcmRvdmFcclxuICogQGJyaWVmIE1vYmlsZSBDb3Jkb3ZhIOeUqCBHZW5lcmF0b3Ig44Kv44Op44K5XHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgR2VuZXJhdG9yQ29yZG92YSBleHRlbmRzIEdlbmVyYXRvckJhc2Uge1xyXG5cclxuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbiAgICAvLyBpbXByZW1lbnRlczogR2VuZXJhdG9yQmFzZVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5pei5a6a44GuIGRpcmVjdG9yeSDmp4vpgKDjgpLov5TljbRcclxuICAgICAqL1xyXG4gICAgZGVmYXVsdEJhc2VTdHJ1Y3R1cmUoKTogSUJhc2VTdHJ1Y3R1cmVDb25maWdyYXRpb24ge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHNyYzogXCJhcHBcIixcclxuICAgICAgICAgICAgcGtnOiBcInd3d1wiLFxyXG4gICAgICAgICAgICBidWlsdDogXCJhcHBcIixcclxuICAgICAgICAgICAgZG9jOiBcImRvY3NcIixcclxuICAgICAgICAgICAgdGFzazogXCJ0YXNrc1wiLFxyXG4gICAgICAgICAgICB0ZXN0OiBcInRlc3RzXCIsXHJcbiAgICAgICAgICAgIHR5cGVzOiBcIkB0eXBlc1wiLFxyXG4gICAgICAgICAgICB0ZW1wOiBcIi50ZW1wXCIsXHJcbiAgICAgICAgICAgIGxpYjogXCJsaWJcIixcclxuICAgICAgICAgICAgZXh0ZXJuYWw6IFwiZXh0ZXJuYWxcIixcclxuICAgICAgICAgICAgcG9ydGluZzogXCJwb3J0aW5nXCIsXHJcbiAgICAgICAgICAgIHJlczogXCJyZXNcIixcclxuICAgICAgICAgICAgc3JjQ29uZmlnOiB7XHJcbiAgICAgICAgICAgICAgICBzY3JpcHQ6IFwic2NyaXB0c1wiLFxyXG4gICAgICAgICAgICAgICAgc3R5bGVzaGVldDogXCJzdHlsZXNoZWV0c1wiLFxyXG4gICAgICAgICAgICAgICAgdGVtcGxhdGU6IFwidGVtcGxhdGVzXCIsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIGNyZWF0ZSBhY3Rpb24gZW50cnlcclxuICAgICAqIEBwYXJhbSB7SUxpYnJhcnlDb25maWdyYXRpb259IGNvbmZpZyDjgrPjg7Pjg5XjgqPjgrDoqK3lrppcclxuICAgICAqL1xyXG4gICAgYXN5bmMgY3JlYXRlKCk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgICAgIGF3YWl0IHRoaXMuY3JlYXRlUHJvamVjdFN0cnVjdHVyZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5b+F6KaB44Go44GZ44KLIHRhc2sgc2NyaXB0IOS4gOimp+OCkui/lOWNtC4gYWN0aW9uOiBjcmVhdGUg44Gu44Go44GN44Gr5ZG844Gw44KM44KLXHJcbiAgICAgKi9cclxuICAgIGdldCB0YXNrTGlzdCgpOiBzdHJpbmdbXSB7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAgXCJiYW5uZXIuanNcIixcclxuICAgICAgICAgICAgXCJjbGVhbi5qc1wiLFxyXG4gICAgICAgICAgICBcInNyY21hcC5qc1wiLFxyXG4gICAgICAgICAgICBcImJ1bmRsZS1maW5hbGl6ZXIuanNcIixcclxuICAgICAgICAgICAgXCJyZW1hcC1jb3ZlcmFnZS5qc1wiLFxyXG4gICAgICAgIF07XHJcbiAgICB9XHJcblxyXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuICAgIC8vIHByb3RlY3RlZCBtZXRob2RzOlxyXG5cclxuICAgIC8qKlxyXG4gICAgICog6ZaL55m65pmC44Gu5L6d5a2Y44Oi44K444Ol44O844Or44Oq44K544OI44Gu5Y+W5b6XXHJcbiAgICAgKiDlv4XopoHjgavlv5zjgZjjgabjgqrjg7zjg5Djg7zjg6njgqTjg4lcclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJuIHtJRGVwZW5kZW5jeX1cclxuICAgICAqL1xyXG4gICAgcHJvdGVjdGVkIGdldCBkZWZhdWx0RGV2RGVwZW5kZW5jaWVzKCk6IElEZXBlbmRlbmN5W10ge1xyXG4gICAgICAgIGNvbnN0IGRlcGVuZHMgPSBzdXBlci5kZWZhdWx0RGV2RGVwZW5kZW5jaWVzLmNvbmNhdChbXHJcbiAgICAgICAgICAgIHsgbmFtZTogXCJAdHlwZXMvYmFja2JvbmVcIiwgICAgICB2ZXJzaW9uOiB1bmRlZmluZWQsIH0sXHJcbiAgICAgICAgICAgIHsgbmFtZTogXCJAdHlwZXMvamFzbWluZVwiLCAgICAgICB2ZXJzaW9uOiB1bmRlZmluZWQsIH0sXHJcbiAgICAgICAgICAgIHsgbmFtZTogXCJAdHlwZXMvanF1ZXJ5XCIsICAgICAgICB2ZXJzaW9uOiB1bmRlZmluZWQsIH0sXHJcbiAgICAgICAgICAgIHsgbmFtZTogXCJAdHlwZXMvcmVxdWlyZWpzXCIsICAgICB2ZXJzaW9uOiB1bmRlZmluZWQsIH0sXHJcbiAgICAgICAgICAgIHsgbmFtZTogXCJAdHlwZXMvanF1ZXJ5XCIsICAgICAgICB2ZXJzaW9uOiB1bmRlZmluZWQsIH0sXHJcbiAgICAgICAgICAgIHsgbmFtZTogXCJAdHlwZXMvdW5kZXJzY29yZVwiLCAgICB2ZXJzaW9uOiB1bmRlZmluZWQsIH0sXHJcbiAgICAgICAgICAgIHsgbmFtZTogXCJhdXRvcHJlZml4ZXJcIiwgICAgICAgICB2ZXJzaW9uOiB1bmRlZmluZWQsIH0sXHJcbiAgICAgICAgICAgIHsgbmFtZTogXCJjbGVhbi1jc3NcIiwgICAgICAgICAgICB2ZXJzaW9uOiB1bmRlZmluZWQsIH0sXHJcbiAgICAgICAgICAgIHsgbmFtZTogXCJmcy1leHRyYVwiLCAgICAgICAgICAgICB2ZXJzaW9uOiB1bmRlZmluZWQsIH0sXHJcbiAgICAgICAgICAgIHsgbmFtZTogXCJodG1sLW1pbmlmaWVyXCIsICAgICAgICB2ZXJzaW9uOiB1bmRlZmluZWQsIH0sXHJcbiAgICAgICAgICAgIHsgbmFtZTogXCJub2RlLXNhc3NcIiwgICAgICAgICAgICB2ZXJzaW9uOiB1bmRlZmluZWQsIH0sXHJcbiAgICAgICAgICAgIHsgbmFtZTogXCJwb3N0Y3NzLWNsaVwiLCAgICAgICAgICB2ZXJzaW9uOiB1bmRlZmluZWQsIH0sXHJcbiAgICAgICAgXSk7XHJcblxyXG4gICAgICAgIGNvbnN0IGV4dHJhID0gW107XHJcbiAgICAgICAgdGhpcy5jb25maWcuZGV2RGVwZW5kZW5jaWVzLmZvckVhY2goKGRlcGVuZCkgPT4ge1xyXG4gICAgICAgICAgICBleHRyYS5wdXNoKHsgbmFtZTogZGVwZW5kLm5hbWUsIHZlcnNpb246IGRlcGVuZC52ZXJzaW9uLCB9KTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIF8uc29ydEJ5KGRlcGVuZHMuY29uY2F0KGV4dHJhKSwgKGRlcGVuZCkgPT4gZGVwZW5kLm5hbWUpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbiAgICAvLyBwcml2YXRlIG1ldGhvZHM6XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBjb25maWdyYXRpb24g44Gr44Ki44Kv44K744K5XHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgZ2V0IGNvbmZpZygpOiBJTW9iaWxlQXBwQ29uZmlncmF0aW9uIHtcclxuICAgICAgICByZXR1cm4gPElNb2JpbGVBcHBDb25maWdyYXRpb24+dGhpcy5fY29uZmlnO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog44OX44Ot44K444Kn44Kv44OI5qeL5oiQ44Gu5L2c5oiQXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgYXN5bmMgY3JlYXRlUHJvamVjdFN0cnVjdHVyZSgpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgICAgICBjb25zdCBjb3Jkb3ZhRW5hYmxlZCA9ICgwIDwgdGhpcy5jb25maWcucGxhdGZvcm1zLmxlbmd0aCk7XHJcblxyXG4gICAgICAgIGlmIChjb3Jkb3ZhRW5hYmxlZCkge1xyXG4gICAgICAgICAgICBhd2FpdCB0aGlzLmNoZGlyKHRoaXMucm9vdERpcik7XHJcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuY3JlYXRlQ29yZG92YVNjYWZmb2xkKCk7XHJcbiAgICAgICAgICAgIGF3YWl0IHRoaXMudXBkYXRlQ29uZmlnWE1MKCk7XHJcbiAgICAgICAgICAgIGF3YWl0IHRoaXMubWVyZ2VDb3Jkb3ZhU2NhZmZvbGQoKTtcclxuICAgICAgICAgICAgYXdhaXQgdGhpcy5hZGRDb3Jkb3ZhRXh0ZW50aW9uRmlsZXMoKTtcclxuICAgICAgICAgICAgYXdhaXQgdGhpcy5hZGRDb3Jkb3ZhUGxhdGZvcm1zKCk7XHJcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuY2hkaXIoXCIuLlwiKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBUT0RPOlxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvL19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18vL1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogY29yZG92YSDjgpLnlKjjgYTjgZ/jg5fjg63jgrjjgqfjgq/jg4jkvZzmiJBcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBhc3luYyBjcmVhdGVDb3Jkb3ZhU2NhZmZvbGQoKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICAgICAgdGhpcy5wcm9ncmVzcyhcIm1vYmlsZS5jcmVhdGUuY29yZG92YS5jcmVhdGVDb3Jkb3ZhU2NhZmZvbGRcIik7XHJcbiAgICAgICAgZGVidWcoXCJjcmVhdGVDb3Jkb3ZhU2NhZmZvbGRcIik7XHJcblxyXG4gICAgICAgIC8vIGAkIGNvcmRvdmEgY3JlYXRlIGNvb2wtbW9iaWxlIGNvbS5zb255LmNkcC5jb29sbW9iaWxlIFwiQ29vbCBNb2JpbGVcImBcclxuICAgICAgICBhd2FpdCBleGVjQ29tbWFuZChcImNvcmRvdmFcIiwgW1wiY3JlYXRlXCIsIHRoaXMuY29uZmlnLnByb2plY3ROYW1lLCB0aGlzLmNvbmZpZy5hcHBJZCwgdGhpcy5jb25maWcuYXBwTmFtZV0pO1xyXG5cclxuICAgICAgICAvLyByZW1vdmUgZmlsZXNcclxuICAgICAgICBnbG9iLnN5bmMoXCJ3d3cvKiovKlwiLCB7XHJcbiAgICAgICAgICAgIGN3ZDogdGhpcy5jb25maWcucHJvamVjdE5hbWUsXHJcbiAgICAgICAgfSkuZm9yRWFjaCgoZmlsZSkgPT4ge1xyXG4gICAgICAgICAgICBmcy5yZW1vdmVTeW5jKHBhdGguam9pbih0aGlzLmNvbmZpZy5wcm9qZWN0TmFtZSwgZmlsZSkpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGZzLnJlbW92ZVN5bmMocGF0aC5qb2luKHRoaXMuY29uZmlnLnByb2plY3ROYW1lLCBcInJlc1wiKSk7XHJcbiAgICAgICAgZnMucmVtb3ZlU3luYyhwYXRoLmpvaW4odGhpcy5jb25maWcucHJvamVjdE5hbWUsIFwiLm5wbWlnbm9yZVwiKSk7XHJcblxyXG4gICAgICAgIC8vIG1vdmUgcm9vdCBkaXJlY3RvcnlcclxuICAgICAgICBmcy5jb3B5U3luYyh0aGlzLmNvbmZpZy5wcm9qZWN0TmFtZSwgXCIuL1wiKTtcclxuICAgICAgICBmcy5yZW1vdmVTeW5jKHRoaXMuY29uZmlnLnByb2plY3ROYW1lKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIGNvbmZpZy54bWwg44Gu5L+u5q2jXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgYXN5bmMgdXBkYXRlQ29uZmlnWE1MKCk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgICAgIHRoaXMucHJvZ3Jlc3MoXCJtb2JpbGUuY3JlYXRlLmNvcmRvdmEudXBkYXRlQ29uZmlnWG1sXCIpO1xyXG4gICAgICAgIGRlYnVnKFwidXBkYXRlQ29uZmlnWE1MXCIpO1xyXG5cclxuICAgICAgICBjb25zdCBjb25maWdYbWxQYXRoID0gcGF0aC5qb2luKHByb2Nlc3MuY3dkKCksIFwiY29uZmlnLnhtbFwiKTtcclxuICAgICAgICBjb25zdCAkY29uZmlnWG1sRG9tID0gJChzdHIyWG1sTm9kZShmcy5yZWFkRmlsZVN5bmMoY29uZmlnWG1sUGF0aCkudG9TdHJpbmcoKSkpO1xyXG5cclxuICAgICAgICAkY29uZmlnWG1sRG9tXHJcbiAgICAgICAgICAgIC5maW5kKFwid2lkZ2V0XCIpXHJcbiAgICAgICAgICAgIC5hdHRyKFwidmVyc2lvblwiLCB0aGlzLmNvbmZpZy52ZXJzaW9uKVxyXG4gICAgICAgICAgICAucHJlcGVuZChzdHIyWG1sTm9kZShgXHJcbiAgICAgICAgICAgICAgICA8cHJlZmVyZW5jZSBuYW1lPVwiRGlzYWxsb3dPdmVyc2Nyb2xsXCIgdmFsdWU9XCJ0cnVlXCIvPlxyXG4gICAgICAgICAgICAgICAgPHByZWZlcmVuY2UgbmFtZT1cIktleWJvYXJkRGlzcGxheVJlcXVpcmVzVXNlckFjdGlvblwiIHZhbHVlPVwiZmFsc2VcIi8+XHJcbiAgICAgICAgICAgICAgICA8cHJlZmVyZW5jZSBuYW1lPVwiQmFja2dyb3VuZENvbG9yXCIgdmFsdWU9XCIweGZmMDAwMDAwXCIgLz5cclxuICAgICAgICAgICAgYCkpXHJcbiAgICAgICAgICAgIDtcclxuXHJcbiAgICAgICAgLy8gcmVtb3ZlIGNvcmRvdmEgdGVhbSBpbmZvcm1hdGlvblxyXG4gICAgICAgICRjb25maWdYbWxEb21cclxuICAgICAgICAgICAgLmZpbmQoXCJkZXNjcmlwdGlvblwiKVxyXG4gICAgICAgICAgICAucmVtb3ZlKCk7XHJcbiAgICAgICAgJGNvbmZpZ1htbERvbVxyXG4gICAgICAgICAgICAuZmluZChcImF1dGhvclwiKVxyXG4gICAgICAgICAgICAucmVtb3ZlKCk7XHJcblxyXG4gICAgICAgIGZzLndyaXRlRmlsZVN5bmMoY29uZmlnWG1sUGF0aCwgZm9ybWF0WE1MKHhtbE5vZGUyU3RyKCRjb25maWdYbWxEb20pKSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBhc3luYyBtZXJnZUNvcmRvdmFTY2FmZm9sZCgpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgICAgICBkZWJ1ZyhcIm1lcmdlQ29yZG92YVNjYWZmb2xkXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgYXN5bmMgYWRkQ29yZG92YUV4dGVudGlvbkZpbGVzKCk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgICAgIGRlYnVnKFwiYWRkQ29yZG92YUV4dGVudGlvbkZpbGVzXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgYXN5bmMgYWRkQ29yZG92YVBsYXRmb3JtcygpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgICAgICBkZWJ1ZyhcImFkZENvcmRvdmFQbGF0Zm9ybXNcIik7XHJcbiAgICB9XHJcblxyXG4gICAgLy9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fLy9cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi4vLi4vLi4vc3JjL2dlbmVyYXRvcnMvbW9iaWxlL2dlbmVyYXRvci1jb3Jkb3ZhLnRzIiwiaW1wb3J0IHsgR2VuZXJhdG9yQmFzZSwgSVByb2plY3RDb25maWdyYXRpb24gfSBmcm9tIFwiLi4vYmFzZVwiO1xyXG5pbXBvcnQgeyBHZW5lcmF0b3JDb3Jkb3ZhIH0gZnJvbSBcIi4vZ2VuZXJhdG9yLWNvcmRvdmFcIjtcclxuXHJcbmV4cG9ydCAqIGZyb20gXCIuL2ludGVyZmFjZXNcIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vZ2VuZXJhdG9yLWNvcmRvdmFcIjtcclxuXHJcbi8qKlxyXG4gKiBnZW5lcmF0b3Ig55Sf5oiQ6Zai5pWwXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gbmV3R2VuZXJhdG9yTW9iaWxlKGNvbmZpZzogSVByb2plY3RDb25maWdyYXRpb24pOiBHZW5lcmF0b3JCYXNlIHtcclxuICAgIHJldHVybiBuZXcgR2VuZXJhdG9yQ29yZG92YShjb25maWcpO1xyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLi8uLi8uLi9zcmMvZ2VuZXJhdG9ycy9tb2JpbGUvaW5kZXgudHMiLCIvKiB0c2xpbnQ6ZGlzYWJsZTpuby11bnVzZWQtdmFyaWFibGUgbm8tdW51c2VkLXZhcnMgKi9cclxuLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cclxuXHJcbmltcG9ydCB7IElCYXNlU3RydWN0dXJlQ29uZmlncmF0aW9uLCBHZW5lcmF0b3JCYXNlIH0gZnJvbSBcIi4uL2Jhc2VcIjtcclxuaW1wb3J0IHsgSVdlYkFwcENvbmZpZ3JhdGlvbiB9IGZyb20gXCIuL2ludGVyZmFjZXNcIjtcclxuXHJcbi8qKlxyXG4gKiBAY2xhc3MgR2VuZXJhdG9yQnJvd3NlclxyXG4gKiBAYnJpZWYgV2ViIEJyb3dzZXIg55SoIEdlbmVyYXRvciDjgq/jg6njgrlcclxuICovXHJcbmV4cG9ydCBjbGFzcyBHZW5lcmF0b3JCcm93c2VyIGV4dGVuZHMgR2VuZXJhdG9yQmFzZSB7XHJcblxyXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuICAgIC8vIGltcHJlbWVudGVzOiBHZW5lcmF0b3JCYXNlXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDml6Llrprjga4gZGlyZWN0b3J5IOani+mAoOOCkui/lOWNtFxyXG4gICAgICovXHJcbiAgICBkZWZhdWx0QmFzZVN0cnVjdHVyZSgpOiBJQmFzZVN0cnVjdHVyZUNvbmZpZ3JhdGlvbiB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgc3JjOiBcImFwcFwiLFxyXG4gICAgICAgICAgICBwa2c6IFwid3d3XCIsXHJcbiAgICAgICAgICAgIGJ1aWx0OiBcImFwcFwiLFxyXG4gICAgICAgICAgICBkb2M6IFwiZG9jc1wiLFxyXG4gICAgICAgICAgICB0YXNrOiBcInRhc2tzXCIsXHJcbiAgICAgICAgICAgIHRlc3Q6IFwidGVzdHNcIixcclxuICAgICAgICAgICAgdHlwZXM6IFwiQHR5cGVzXCIsXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIGNyZWF0ZSBhY3Rpb24gZW50cnlcclxuICAgICAqIEBwYXJhbSB7SUxpYnJhcnlDb25maWdyYXRpb259IGNvbmZpZyDjgrPjg7Pjg5XjgqPjgrDoqK3lrppcclxuICAgICAqL1xyXG4gICAgYXN5bmMgY3JlYXRlKCk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgICAgIC8vIFRPRE86XHJcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KFwidW5kZXIgY29uc3RydWN0aW9uLlwiKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOW/heimgeOBqOOBmeOCiyB0YXNrIHNjcmlwdCDkuIDopqfjgpLov5TljbQuIGFjdGlvbjogY3JlYXRlIOOBruOBqOOBjeOBq+WRvOOBsOOCjOOCi1xyXG4gICAgICovXHJcbiAgICBnZXQgdGFza0xpc3QoKTogc3RyaW5nW10ge1xyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgIFwiYmFubmVyLmpzXCIsXHJcbiAgICAgICAgICAgIFwiY2xlYW4uanNcIixcclxuICAgICAgICAgICAgXCJzcmNtYXAuanNcIixcclxuICAgICAgICAgICAgXCJidWlsZC10cy1jbGVhbi5qc1wiLFxyXG4gICAgICAgICAgICBcImJ1aWxkLXRzLW5vcm1hbGl6ZS5qc1wiLFxyXG4gICAgICAgIF07XHJcbiAgICB9XHJcblxyXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuICAgIC8vIHByaXZhdGUgbWV0aG9kczpcclxuXHJcbiAgICAvKipcclxuICAgICAqIGNvbmZpZ3JhdGlvbiDjgavjgqLjgq/jgrvjgrlcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBnZXQgY29uZmlnKCk6IElXZWJBcHBDb25maWdyYXRpb24ge1xyXG4gICAgICAgIHJldHVybiA8SVdlYkFwcENvbmZpZ3JhdGlvbj50aGlzLl9jb25maWc7XHJcbiAgICB9XHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4uLy4uLy4uL3NyYy9nZW5lcmF0b3JzL3dlYi9nZW5lcmF0b3ItYnJvd3Nlci50cyIsImltcG9ydCB7IEdlbmVyYXRvckJhc2UsIElQcm9qZWN0Q29uZmlncmF0aW9uIH0gZnJvbSBcIi4uL2Jhc2VcIjtcclxuaW1wb3J0IHsgR2VuZXJhdG9yQnJvd3NlciB9IGZyb20gXCIuL2dlbmVyYXRvci1icm93c2VyXCI7XHJcblxyXG5leHBvcnQgKiBmcm9tIFwiLi9pbnRlcmZhY2VzXCI7XHJcbmV4cG9ydCAqIGZyb20gXCIuL2dlbmVyYXRvci1icm93c2VyXCI7XHJcblxyXG4vKipcclxuICogZ2VuZXJhdG9yIOeUn+aIkOmWouaVsFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIG5ld0dlbmVyYXRvcldlYihjb25maWc6IElQcm9qZWN0Q29uZmlncmF0aW9uKTogR2VuZXJhdG9yQmFzZSB7XHJcbiAgICByZXR1cm4gbmV3IEdlbmVyYXRvckJyb3dzZXIoY29uZmlnKTtcclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi4vLi4vLi4vc3JjL2dlbmVyYXRvcnMvd2ViL2luZGV4LnRzIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwib3NcIik7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gZXh0ZXJuYWwgXCJvc1wiXG4vLyBtb2R1bGUgaWQgPSAxM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJpbXBvcnQgKiBhcyBVdGlscyBmcm9tIFwiLi91dGlsc1wiO1xyXG5leHBvcnQgeyBVdGlscyB9O1xyXG5cclxuaW1wb3J0IHtcclxuICAgIElTb3VyY2VEaXJjdG9yeUNvbmZpZ3JhdGlvbixcclxuICAgIElCYXNlU3RydWN0dXJlQ29uZmlncmF0aW9uLFxyXG4gICAgSVByb2plY3RDb25maWdyYXRpb24sXHJcbiAgICBJQnVpbGRUYXJnZXRDb25maWdyYXRpb24sXHJcbiAgICBJTGlicmFyeUNvbmZpZ3JhdGlvbixcclxuICAgIElFeHRlcm5hbE1vZHVsZUluZm8sXHJcbiAgICBJRXh0ZXJuYWxNb2R1bGVzLFxyXG4gICAgSU1vYmlsZUFwcENvbmZpZ3JhdGlvbixcclxuICAgIElEZXNrdG9wQXBwQ29uZmlncmF0aW9uLFxyXG4gICAgSVdlYkFwcENvbmZpZ3JhdGlvbixcclxuICAgIC8vLy9cclxuICAgIG5ld0dlbmVyYXRvclxyXG59IGZyb20gXCIuL2dlbmVyYXRvcnNcIjtcclxuXHJcbmV4cG9ydCB7XHJcbiAgICBJU291cmNlRGlyY3RvcnlDb25maWdyYXRpb24sXHJcbiAgICBJQmFzZVN0cnVjdHVyZUNvbmZpZ3JhdGlvbixcclxuICAgIElQcm9qZWN0Q29uZmlncmF0aW9uLFxyXG4gICAgSUJ1aWxkVGFyZ2V0Q29uZmlncmF0aW9uLFxyXG4gICAgSUxpYnJhcnlDb25maWdyYXRpb24sXHJcbiAgICBJRXh0ZXJuYWxNb2R1bGVJbmZvLFxyXG4gICAgSUV4dGVybmFsTW9kdWxlcyxcclxuICAgIElNb2JpbGVBcHBDb25maWdyYXRpb24sXHJcbiAgICBJRGVza3RvcEFwcENvbmZpZ3JhdGlvbixcclxuICAgIElXZWJBcHBDb25maWdyYXRpb24sXHJcbn07XHJcblxyXG4vL19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18vL1xyXG5cclxuLyoqXHJcbiAqIEBjbGFzcyBDRFBMaWJcclxuICogQGJyaWVmIENEUCBib2lsZXJwbGF0ZSDnlJ/miJDmqZ/og73jgpLmj5DkvpvjgZnjgovjgq/jg6njgrlcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENEUExpYiB7XHJcblxyXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuICAgIC8vIHB1YmljIG1ldGhvZHM6XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBtYWluIGNvbW1hbmRcclxuICAgICAqL1xyXG4gICAgcHVibGljIHN0YXRpYyBleGVjdXRlKGNvbmZpZzogSVByb2plY3RDb25maWdyYXRpb24pOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgICAgICBVdGlscy5zZXRTZXR0aW5ncyhjb25maWcuc2V0dGluZ3MpO1xyXG4gICAgICAgIHJldHVybiBuZXdHZW5lcmF0b3IoY29uZmlnKS5ydW4oKTtcclxuICAgIH1cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi4vc3JjL2NkcC1saWIudHMiLCJpbXBvcnQgKiBhcyBwYXRoIGZyb20gXCJwYXRoXCI7XHJcbmltcG9ydCB7XHJcbiAgICBmcyxcclxuICAgIGdsb2IsXHJcbiAgICBjaGFsayxcclxuICAgIF8sXHJcbiAgICAkLFxyXG4gICAgLy8vL1xyXG4gICAgZXhlY0NvbW1hbmQsXHJcbiAgICBnZXRTcGlubmVyLFxyXG4gICAgZ2V0VGFyZ2V0RGlyLFxyXG4gICAgdGVtcGxhdGVQYXRoLFxyXG4gICAgY29weVRwbCxcclxuICAgIGxvZyxcclxuICAgIGRlYnVnLFxyXG4gICAgdHJhbnNsYXRlLFxyXG59IGZyb20gXCIuLi8uLi91dGlsc1wiO1xyXG5cclxuaW1wb3J0IHtcclxuICAgIElCYXNlU3RydWN0dXJlQ29uZmlncmF0aW9uLFxyXG4gICAgSURlcGVuZGVuY3ksXHJcbiAgICBJUHJvamVjdENvbmZpZ3JhdGlvbixcclxuICAgIElCdWlsZFRhcmdldENvbmZpZ3JhdGlvbixcclxuICAgIElXZWJwYWNrQ29uZmlncmF0aW9uLFxyXG59IGZyb20gXCIuL2ludGVyZmFjZXNcIjtcclxuXHJcbi8qKlxyXG4gKiBAY2xhc3MgR2VuZXJhdG9yQmFzZVxyXG4gKiBAYnJpZWYg44GZ44G544Gm44GuIEdlbmVyYXRvciDjga7ml6Llrprjgq/jg6njgrlcclxuICovXHJcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBHZW5lcmF0b3JCYXNlIHtcclxuXHJcbiAgICBwcml2YXRlIF9wcm9qZWN0Um9vdERpcjogc3RyaW5nO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogY29uc3RydWN0b3JcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge0lQcm9qZWN0Q29uZmlncmF0aW9ufSBjb25maWcg44Kz44Oz44OV44Kj44KwXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBfY29uZmlnOiBJUHJvamVjdENvbmZpZ3JhdGlvbikge1xyXG4gICAgICAgIHRoaXMuX3Byb2plY3RSb290RGlyID0gZ2V0VGFyZ2V0RGlyKCkgP1xyXG4gICAgICAgICAgICBnZXRUYXJnZXREaXIoKSA6XHJcbiAgICAgICAgICAgIHBhdGguam9pbihwcm9jZXNzLmN3ZCgpLCB0aGlzLl9jb25maWcucHJvamVjdE5hbWUpO1xyXG5cclxuICAgICAgICB0aGlzLl9jb25maWcuc3RydWN0dXJlQ29uZmlnID0gJC5leHRlbmQoe30sIHRoaXMuZGVmYXVsdEJhc2VTdHJ1Y3R1cmUoKSwgdGhpcy5fY29uZmlnLnN0cnVjdHVyZUNvbmZpZyk7XHJcblxyXG4gICAgICAgIHRoaXMuX2NvbmZpZy5wcml2YXRlID0gXCJOT05FXCIgPT09IHRoaXMuX2NvbmZpZy5saWNlbnNlO1xyXG5cclxuICAgICAgICAoPElCdWlsZFRhcmdldENvbmZpZ3JhdGlvbj50aGlzLl9jb25maWcpLm91dHB1dFNhbWVEaXJcclxuICAgICAgICAgICAgPSB0aGlzLl9jb25maWcuc3RydWN0dXJlQ29uZmlnLnNyYyA9PT0gdGhpcy5fY29uZmlnLnN0cnVjdHVyZUNvbmZpZy5idWlsdDtcclxuXHJcbiAgICAgICAgKDxJQnVpbGRUYXJnZXRDb25maWdyYXRpb24+dGhpcy5fY29uZmlnKS5ub2RlanMgPSAoKGVudjogc3RyaW5nKSA9PiB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAoZW52KSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwibm9kZVwiOlxyXG4gICAgICAgICAgICAgICAgY2FzZSBcImVsZWN0cm9uXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pKCg8SUJ1aWxkVGFyZ2V0Q29uZmlncmF0aW9uPnRoaXMuX2NvbmZpZykuZW52KTtcclxuXHJcbiAgICAgICAgZGVidWcoSlNPTi5zdHJpbmdpZnkodGhpcy5fY29uZmlnLCBudWxsLCA0KSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuICAgIC8vIHB1YmljIG1ldGhvZHM6XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDlh6bnkIbplovlp4sgKOOCqOODs+ODiOODqilcclxuICAgICAqXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBydW4oKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICAgICAgc3dpdGNoICh0aGlzLl9jb25maWcuYWN0aW9uKSB7XHJcbiAgICAgICAgICAgIGNhc2UgXCJjcmVhdGVcIjpcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnJ1bkNyZWF0ZSgpO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KFwidW5rbm93biBhY3Rpb246IFwiICsgdGhpcy5fY29uZmlnLmFjdGlvbik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbiAgICAvLyBhYnN0cmFjdCBtZXRob2RzOlxyXG5cclxuICAgIC8vIOaXouWumuOBriBkaXJlY3Rvcnkg5qeL6YCg44KS6L+U5Y20XHJcbiAgICBhYnN0cmFjdCBkZWZhdWx0QmFzZVN0cnVjdHVyZSgpOiBJQmFzZVN0cnVjdHVyZUNvbmZpZ3JhdGlvbjtcclxuXHJcbiAgICAvLyBhY3Rpb246IGNyZWF0ZSDjga7jgajjgY3jgavlkbzjgbDjgozjgotcclxuICAgIGFic3RyYWN0IGFzeW5jIGNyZWF0ZSgpOiBQcm9taXNlPHZvaWQ+O1xyXG5cclxuICAgIC8vIOW/heimgeOBqOOBmeOCiyB0YXNrIHNjcmlwdCDkuIDopqfjgpLov5TljbQuIGFjdGlvbjogY3JlYXRlIOOBruOBqOOBjeOBq+WRvOOBsOOCjOOCi1xyXG4gICAgYWJzdHJhY3QgZ2V0IHRhc2tMaXN0KCk6IHN0cmluZ1tdO1xyXG5cclxuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbiAgICAvLyBwcm90ZWN0ZWQgbWV0aG9kczpcclxuXHJcbiAgICAvKipcclxuICAgICAqIOmAsuaNl+ODhuOCreOCueODiOOCkumAmuefpVxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBrZXkg44Ot44O844Kr44Op44Kk44K644Oq44K944O844K544Kt44O844KS5oyH5a6aXHJcbiAgICAgKi9cclxuICAgIHByb3RlY3RlZCBwcm9ncmVzcyhrZXk6IHN0cmluZyk6IHZvaWQge1xyXG4gICAgICAgIGxvZyhjaGFsay5jeWFuKHRyYW5zbGF0ZShrZXkpKSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiB3b3JrIGRpcmVjdG9yeSDjga7lpInmm7RcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZGlyZWN0b3J5IHRhcmdldCBkaXJlY3RvcnkuXHJcbiAgICAgKi9cclxuICAgIHByb3RlY3RlZCBjaGRpcihkaXJlY3Rvcnk6IHN0cmluZyk6IHZvaWQge1xyXG4gICAgICAgIHByb2Nlc3MuY2hkaXIoZGlyZWN0b3J5KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIHByb2plY3Qgcm9vdCBkaXJlY3Rvcnkg44Gu5Y+W5b6XXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGRpcmVjdG9yeSB0YXJnZXQgZGlyZWN0b3J5LlxyXG4gICAgICovXHJcbiAgICBwcm90ZWN0ZWQgZ2V0IHJvb3REaXIoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fcHJvamVjdFJvb3REaXI7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiB0ZW1wbGF0ZSBkaXJlY3Rvcnkg44KS5oyH5a6a44GX44Gm6YWN5LiL44Gu44OV44Kh44Kk44Or44KS44Kz44OU44O8XHJcbiAgICAgKiBJQmFzZVN0cnVjdHVyZUNvbmZpZ3JhdGlvbiDjga7oqK3lrprjgYzlj43mmKDjgZXjgozjgotcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gdGFyZ2V0ICDjgr/jg7zjgrLjg4Pjg4jjgpLmjIflrpouIG51bGwg44Gu5aC05ZCI44Gv44CBdGVtcGxhdGVzIOOCkui/lOWNtFxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGRzdFJvb3Qg44Kz44OU44O85YWI44KS5oyH5a6aLiDmjIflrprjgYznhKHjgYTloLTlkIjjga8gcm9vdERpciDjgYzoqK3lrppcclxuICAgICAqL1xyXG4gICAgcHJvdGVjdGVkIGNvcHlUcGxEaXIodGFyZ2V0OiBzdHJpbmcsIGRzdFJvb3Q/OiBzdHJpbmcsIG9wdGlvbnM/OiBnbG9iLklPcHRpb25zKTogdm9pZCB7XHJcbiAgICAgICAgZHN0Um9vdCA9IGRzdFJvb3QgfHwgdGhpcy5yb290RGlyO1xyXG4gICAgICAgIG9wdGlvbnMgPSAkLmV4dGVuZCh7XHJcbiAgICAgICAgICAgIGN3ZDogdGVtcGxhdGVQYXRoKHRhcmdldCksXHJcbiAgICAgICAgICAgIG5vZGlyOiB0cnVlLFxyXG4gICAgICAgICAgICBkb3Q6IHRydWUsXHJcbiAgICAgICAgfSwgb3B0aW9ucyk7XHJcblxyXG4gICAgICAgIGdsb2Iuc3luYyhcIioqXCIsIG9wdGlvbnMpXHJcbiAgICAgICAgICAgIC5mb3JFYWNoKChmaWxlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBkc3QgPSBwYXRoLmpvaW4oZHN0Um9vdCxcclxuICAgICAgICAgICAgICAgICAgICBmaWxlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9zcmMvLCAgICAgdGhpcy5fY29uZmlnLnN0cnVjdHVyZUNvbmZpZy5zcmMpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9wa2cvLCAgICAgdGhpcy5fY29uZmlnLnN0cnVjdHVyZUNvbmZpZy5wa2cpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9idWlsdC8sICAgdGhpcy5fY29uZmlnLnN0cnVjdHVyZUNvbmZpZy5idWlsdClcclxuICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL2RvYy8sICAgICB0aGlzLl9jb25maWcuc3RydWN0dXJlQ29uZmlnLmRvYylcclxuICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL3Rhc2svLCAgICB0aGlzLl9jb25maWcuc3RydWN0dXJlQ29uZmlnLnRhc2spXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC90ZXN0LywgICAgdGhpcy5fY29uZmlnLnN0cnVjdHVyZUNvbmZpZy50ZXN0KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvdHlwZXMvLCAgIHRoaXMuX2NvbmZpZy5zdHJ1Y3R1cmVDb25maWcudHlwZXMpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC90ZW1wLywgICAgdGhpcy5fY29uZmlnLnN0cnVjdHVyZUNvbmZpZy50ZW1wKVxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgIGZzLmNvcHlTeW5jKHBhdGguam9pbih0ZW1wbGF0ZVBhdGgodGFyZ2V0KSwgZmlsZSksIGRzdCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBub2RlIG1vZHVsZSDjga4gdmVyc2lvbiDlj5blvpdcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge1Byb21pc2U8c3RyaW5nPn0gdmVyc2lvbiB0ZXh0XHJcbiAgICAgKi9cclxuICAgIHByb3RlY3RlZCBxdWVyeU5vZGVNb2R1bGVMYXRlc3RWZXJzaW9uKG5hbWU6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nPiB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgICAgbGV0IHZlcnNpb246IHN0cmluZztcclxuICAgICAgICAgICAgZXhlY0NvbW1hbmQoXCJucG1cIiwgW1wiaW5mb1wiLCBuYW1lLCBcInZlcnNpb25cIl0sIHtcclxuICAgICAgICAgICAgICAgIHN0ZGlvOiBcInBpcGVcIixcclxuICAgICAgICAgICAgICAgIHNwaW5uZXI6IG51bGwsXHJcbiAgICAgICAgICAgICAgICBzdGRvdXQ6IChkYXRhOiBzdHJpbmcpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB2ZXJzaW9uID0gXy50cmltKGRhdGEpO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC50aGVuKCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHZlcnNpb24pO1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC5jYXRjaCgocmVhc29uKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KHJlYXNvbik7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOaXouWumuOBrumWi+eZuuaZguOBruS+neWtmOODouOCuOODpeODvOODq+ODquOCueODiOOBruWPluW+l1xyXG4gICAgICog5b+F6KaB44Gr5b+c44GY44Gm44Kq44O844OQ44O844Op44Kk44OJXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybiB7SURlcGVuZGVuY3l9XHJcbiAgICAgKi9cclxuICAgIHByb3RlY3RlZCBnZXQgZGVmYXVsdERldkRlcGVuZGVuY2llcygpOiBJRGVwZW5kZW5jeVtdIHtcclxuICAgICAgICBjb25zdCBiYXNlID0gW1xyXG4gICAgICAgICAgICB7IG5hbWU6IFwiY29udmVydC1zb3VyY2UtbWFwXCIsICAgdmVyc2lvbjogdW5kZWZpbmVkLCB9LFxyXG4gICAgICAgICAgICB7IG5hbWU6IFwiZGVsXCIsICAgICAgICAgICAgICAgICAgdmVyc2lvbjogdW5kZWZpbmVkLCB9LFxyXG4gICAgICAgICAgICB7IG5hbWU6IFwiZXNsaW50XCIsICAgICAgICAgICAgICAgdmVyc2lvbjogdW5kZWZpbmVkLCB9LFxyXG4gICAgICAgICAgICB7IG5hbWU6IFwibnBtLXJ1bi1hbGxcIiwgICAgICAgICAgdmVyc2lvbjogdW5kZWZpbmVkLCB9LFxyXG4gICAgICAgICAgICB7IG5hbWU6IFwicGxhdG9cIiwgICAgICAgICAgICAgICAgdmVyc2lvbjogdW5kZWZpbmVkLCB9LFxyXG4gICAgICAgICAgICB7IG5hbWU6IFwic291cmNlLW1hcFwiLCAgICAgICAgICAgdmVyc2lvbjogdW5kZWZpbmVkLCB9LFxyXG4gICAgICAgICAgICB7IG5hbWU6IFwic291cmNlLW1hcC1sb2FkZXJcIiwgICAgdmVyc2lvbjogdW5kZWZpbmVkLCB9LFxyXG4gICAgICAgICAgICB7IG5hbWU6IFwidHNsaW50XCIsICAgICAgICAgICAgICAgdmVyc2lvbjogdW5kZWZpbmVkLCB9LFxyXG4gICAgICAgICAgICB7IG5hbWU6IFwidHlwZWRvY1wiLCAgICAgICAgICAgICAgdmVyc2lvbjogdW5kZWZpbmVkLCB9LFxyXG4gICAgICAgICAgICB7IG5hbWU6IFwidHlwZXNjcmlwdFwiLCAgICAgICAgICAgdmVyc2lvbjogdW5kZWZpbmVkLCB9LFxyXG4gICAgICAgIF07XHJcbiAgICAgICAgY29uc3QgbWluaWZ5ID0gW1xyXG4gICAgICAgICAgICB7IG5hbWU6IFwidWdsaWZ5LWpzXCIsICAgIHZlcnNpb246IHVuZGVmaW5lZCwgZXM6IFtcImVzNVwiXSwgICAgfSxcclxuICAgICAgICAgICAgeyBuYW1lOiBcInVnbGlmeS1lc1wiLCAgICB2ZXJzaW9uOiB1bmRlZmluZWQsIGVzOiBbXCJlczIwMTVcIl0sIH0sXHJcbiAgICAgICAgXTtcclxuXHJcbiAgICAgICAgbGV0IGV4dHJhID0gW107XHJcbiAgICAgICAgaWYgKCg8SUJ1aWxkVGFyZ2V0Q29uZmlncmF0aW9uPnRoaXMuX2NvbmZpZykubWluaWZ5KSB7XHJcbiAgICAgICAgICAgIGV4dHJhID0gZXh0cmEuY29uY2F0KG1pbmlmeSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmlzRW5hYmxlVG9vbChcIndlYnBhY2tcIikpIHtcclxuICAgICAgICAgICAgZXh0cmEucHVzaCh7IG5hbWU6IFwid2VicGFja1wiLCB2ZXJzaW9uOiB1bmRlZmluZWQsIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5pc0VuYWJsZVRvb2woXCJueWNcIikpIHtcclxuICAgICAgICAgICAgZXh0cmEucHVzaCh7IG5hbWU6IFwibnljXCIsIHZlcnNpb246IHVuZGVmaW5lZCwgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmlzRW5hYmxlVG9vbChcInRlc3RlbVwiKSkge1xyXG4gICAgICAgICAgICBleHRyYS5wdXNoKHsgbmFtZTogXCJ0ZXN0ZW1cIiwgdmVyc2lvbjogdW5kZWZpbmVkLCB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuaXNFbmFibGVUb29sKFwicGhhbnRvbWpzLXByZWJ1aWx0XCIpKSB7XHJcbiAgICAgICAgICAgIGV4dHJhLnB1c2goeyBuYW1lOiBcInBoYW50b21qcy1wcmVidWlsdFwiLCB2ZXJzaW9uOiB1bmRlZmluZWQsIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIF8uc29ydEJ5KGJhc2UuY29uY2F0KGV4dHJhKSwgKGRlcGVuZCkgPT4gZGVwZW5kLm5hbWUpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogZGVwZW5kZW5jaWVzIOOBriB0ZW1wbGF0ZSBwYXJhbWFldGVyIOOCkuWPluW+l1xyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSAge0lEZXBlbmRlbmN5W119IGRlcGVuZGVuY2llcyDkvp3lrZjplqLkv4Ljg6rjgrnjg4hcclxuICAgICAqIEByZXR1cm4ge3sgbmFtZTogc3RyaW5nOyB2ZXJzaW9uOiBzdHJpbmc7IGxhc3Q/OiBib29sZWFuOyB9W119IOODhuODs+ODl+ODrOODvOODiOODkeODqeODoeODvOOCv+OBq+aMh+WumuOBmeOCi+mFjeWIl1xyXG4gICAgICovXHJcbiAgICBwcm90ZWN0ZWQgYXN5bmMgcXVlcnlEZXBlbmRlbmNpZXNQYXJhbShkZXBlbmRlbmNpZXM6IElEZXBlbmRlbmN5W10pOiBQcm9taXNlPHsgbmFtZTogc3RyaW5nOyB2ZXJzaW9uOiBzdHJpbmc7IGxhc3Q/OiBib29sZWFuIH1bXT4ge1xyXG4gICAgICAgIHRoaXMucHJvZ3Jlc3MoXCJiYXNlLmNyZWF0ZS5xdWVyeVZlcnNpb25cIik7XHJcblxyXG4gICAgICAgIGNvbnN0IGRlcGVuZHMgPSA8eyBuYW1lOiBzdHJpbmc7IHZlcnNpb246IHN0cmluZzsgbGFzdD86IGJvb2xlYW47IH1bXT5kZXBlbmRlbmNpZXNcclxuICAgICAgICAgICAgLmZpbHRlcigoZGVwZW5kKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAobnVsbCA9PSBkZXBlbmQuZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICEhZGVwZW5kLmVzLmZpbmQoKGVzVmVyc2lvbikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKDxJQnVpbGRUYXJnZXRDb25maWdyYXRpb24+dGhpcy5fY29uZmlnKS5lcyA9PT0gZXNWZXJzaW9uO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgZGVidWcoSlNPTi5zdHJpbmdpZnkoZGVwZW5kcywgbnVsbCwgNCkpO1xyXG5cclxuICAgICAgICBjb25zdCBwcm9ncmVzcyA9IChjb250ZXh0OiBhbnkpOiBhbnkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoXCJzdHJpbmdcIiA9PT0gdHlwZW9mIGNvbnRleHQgJiYgIXRoaXMuX2NvbmZpZy5zZXR0aW5ncy5zaWxlbnQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHNwaW5uZXIgPSBnZXRTcGlubmVyKGNoYWxrLnllbGxvdyhjb250ZXh0KSwgNSk7XHJcbiAgICAgICAgICAgICAgICBzcGlubmVyLnN0YXJ0KCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gc3Bpbm5lcjtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChjb250ZXh0KSB7XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0LnN0b3AodHJ1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gMCwgbiA9IGRlcGVuZHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChudWxsID09IGRlcGVuZHNbaV0udmVyc2lvbikge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc3Bpbm5lciA9IHByb2dyZXNzKGRlcGVuZHNbaV0ubmFtZSk7XHJcbiAgICAgICAgICAgICAgICBkZXBlbmRzW2ldLnZlcnNpb24gPSBcIl5cIiArIGF3YWl0IHRoaXMucXVlcnlOb2RlTW9kdWxlTGF0ZXN0VmVyc2lvbihkZXBlbmRzW2ldLm5hbWUpO1xyXG4gICAgICAgICAgICAgICAgcHJvZ3Jlc3Moc3Bpbm5lcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGkgPT09IG4gLSAxKSB7XHJcbiAgICAgICAgICAgICAgICBkZXBlbmRzW2ldLmxhc3QgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gZGVwZW5kcztcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIHdlYnBhY2suY29uZmlnLmpzIOOBriB0ZW1wbGF0ZSBwYXJhbWFldGVyIOOCkuWPluW+l1xyXG4gICAgICpcclxuICAgICAqIEByZXR1cm4ge1N0cmluZ30gbGlicmFyeVRhcmdldCDjgavmjIflrprjgZnjgovmloflrZfliJdcclxuICAgICAqL1xyXG4gICAgcHJvdGVjdGVkIHF1ZXJ5V2VicGFja0xpYnJhcnlUYXJnZXQoKTogc3RyaW5nIHtcclxuICAgICAgICBzd2l0Y2ggKCg8SUJ1aWxkVGFyZ2V0Q29uZmlncmF0aW9uPnRoaXMuX2NvbmZpZykubW9kdWxlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgXCJjb21tb25qc1wiOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiY29tbW9uanMyXCI7XHJcbiAgICAgICAgICAgIGNhc2UgXCJhbWRcIjpcclxuICAgICAgICAgICAgICAgIHJldHVybiBcImFtZFwiO1xyXG4gICAgICAgICAgICBjYXNlIFwidW1kXCI6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJ1bWRcIjtcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogZXNsaW50cmMg44GuIGVudiDjgavmjIflrprjgZnjgosgdGVtcGxhdGUgcGFyYW1hZXRlciDjgpLlj5blvpdcclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IGVudiDjgavmjIflrprjgZnjgovjg4bjg7Pjg5fjg6zjg7zjg4jjg5Hjg6njg6Hjg7zjgr/jgqrjg5bjgrjjgqfjgq/jg4hcclxuICAgICAqL1xyXG4gICAgcHJvdGVjdGVkIHF1ZXJ5RXNMaW50RW52UGFyYW0oKTogYW55IHtcclxuICAgICAgICBjb25zdCBjb21waWxlU2V0dGluZyA9IDxJQnVpbGRUYXJnZXRDb25maWdyYXRpb24+dGhpcy5fY29uZmlnO1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGVzNjogXCJlczVcIiAhPT0gY29tcGlsZVNldHRpbmcuZXMsXHJcbiAgICAgICAgICAgIG5vZGU6IFwid2ViXCIgIT09IGNvbXBpbGVTZXR0aW5nLmVudixcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogSUJ1aWxkVGFyZ2V0Q29uZmlncmF0aW9uLnRvb2xzIOODl+ODreODkeODhuOCo+OBruaMh+WumueKtuazgeOCkuWPluW+l1xyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSAge1N0cmluZ30gIG5hbWUg44OE44O844Or5ZCN44KS5oyH5a6aXHJcbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufSB0cnVlOiDmjIflrprjgZXjgozjgabjgYTjgosgLyBmYWxzZTog5oyH5a6a44GV44KM44Gm44GE44Gq44GEXHJcbiAgICAgKi9cclxuICAgIHByb3RlY3RlZCBpc0VuYWJsZVRvb2wobmFtZTogc3RyaW5nKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuICEhKDxJQnVpbGRUYXJnZXRDb25maWdyYXRpb24+dGhpcy5fY29uZmlnKS50b29scy5maW5kKCh0b29sKSA9PiBuYW1lID09PSB0b29sKTtcclxuICAgIH1cclxuXHJcbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG4gICAgLy8gcHJpdmF0ZSBtZXRob2RzOlxyXG5cclxuICAgIC8qKlxyXG4gICAgICogY3JlYXRlIOWHpueQhuOBruOCqOODs+ODiOODqlxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGFzeW5jIHJ1bkNyZWF0ZSgpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgICAgICBhd2FpdCB0aGlzLmNyZWF0ZUJhc2UoKTtcclxuICAgICAgICBhd2FpdCB0aGlzLmNyZWF0ZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXy8vXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDlhbHpgJrjga4gY3JlYXRlIOWHpueQhlxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGFzeW5jIGNyZWF0ZUJhc2UoKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICAgICAgdGhpcy5wcm9ncmVzcyhcImJhc2UuY3JlYXRlLmZvdW5kYXRpb25cIik7XHJcbiAgICAgICAgYXdhaXQgdGhpcy5jcmVhdGVQcm9qZWN0RGlyKCk7XHJcbiAgICAgICAgYXdhaXQgdGhpcy5jb3B5QmFzZVN0cnVjdHVyZSgpO1xyXG4gICAgICAgIGF3YWl0IHRoaXMuY29weUNvbW1vbkZpbGVzKCk7XHJcbiAgICAgICAgYXdhaXQgdGhpcy5jb3B5VGFza1NjcmlwdHMoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOODl+ODreOCuOOCp+OCr+ODiOODh+OCo+ODrOOCr+ODiOODquOBruS9nOaIkFxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGNyZWF0ZVByb2plY3REaXIoKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKGZzLmV4aXN0c1N5bmModGhpcy5yb290RGlyKSkge1xyXG4gICAgICAgICAgICB0aHJvdyBFcnJvcih0cmFuc2xhdGUoXCJiYXNlLmNyZWF0ZS5lcnJvci5hbHJlYWR5RXhpc3RcIikpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmcy5ta2RpcnNTeW5jKHRoaXMucm9vdERpcik7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDlhbHpgJrmp4vmiJDmg4XloLHjga7jgrPjg5Tjg7xcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBjb3B5QmFzZVN0cnVjdHVyZSgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmNvcHlUcGxEaXIoXCJiYXNlL3N0cnVjdHVyZVwiKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOWfuuacrOODleOCoeOCpOODq+OBruOCs+ODlOODvFxyXG4gICAgICogdGVtcGxhdGUg44Gu44Kz44OU44O844KC6KGM44GGXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgY29weUNvbW1vbkZpbGVzKCk6IHZvaWQge1xyXG4gICAgICAgIGNvbnN0IHNyY0RpciA9IHRlbXBsYXRlUGF0aChcImJhc2VcIik7XHJcbiAgICAgICAgY29uc3QgZHN0RGlyID0gdGhpcy5yb290RGlyO1xyXG5cclxuICAgICAgICAvLyAubnBtaWdub3JlXHJcbiAgICAgICAgY29weVRwbChcclxuICAgICAgICAgICAgcGF0aC5qb2luKHNyY0RpciwgXCIubnBtaWdub3JlXCIpLFxyXG4gICAgICAgICAgICBwYXRoLmpvaW4oZHN0RGlyLCBcIi5ucG1pZ25vcmVcIiksXHJcbiAgICAgICAgICAgIHRoaXMuX2NvbmZpZy5zdHJ1Y3R1cmVDb25maWdcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICAvLyBCQU5ORVJcclxuICAgICAgICBmcy5jb3B5U3luYyhcclxuICAgICAgICAgICAgcGF0aC5qb2luKHNyY0RpciwgXCJfQkFOTkVSXCIpLFxyXG4gICAgICAgICAgICBwYXRoLmpvaW4oZHN0RGlyLCBcIkJBTk5FUlwiKSxcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICAvLyBMSUNFTlNFXHJcbiAgICAgICAgc3dpdGNoICh0aGlzLl9jb25maWcubGljZW5zZSkge1xyXG4gICAgICAgICAgICBjYXNlIFwiQXBhY2hlLTIuMFwiOlxyXG4gICAgICAgICAgICAgICAgZnMuY29weVN5bmMoXHJcbiAgICAgICAgICAgICAgICAgICAgcGF0aC5qb2luKHNyY0RpciwgXCJfTElDRU5TRS5BcGFjaGUtMi4wXCIpLFxyXG4gICAgICAgICAgICAgICAgICAgIHBhdGguam9pbihkc3REaXIsIFwiTElDRU5TRVwiKSxcclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBcIk1JVFwiOlxyXG4gICAgICAgICAgICAgICAgY29weVRwbChcclxuICAgICAgICAgICAgICAgICAgICBwYXRoLmpvaW4oc3JjRGlyLCBcIl9MSUNFTlNFLk1JVFwiKSxcclxuICAgICAgICAgICAgICAgICAgICBwYXRoLmpvaW4oZHN0RGlyLCBcIkxJQ0VOU0VcIiksXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY29uZmlnLmNvcHlyaWdodFxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBOT1RJQ0VcclxuICAgICAgICBmcy5jb3B5U3luYyhcclxuICAgICAgICAgICAgcGF0aC5qb2luKHNyY0RpciwgXCJfTk9USUNFXCIpLFxyXG4gICAgICAgICAgICBwYXRoLmpvaW4oZHN0RGlyLCBcIk5PVElDRVwiKSxcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICAvLyBidWlsZCB0b29sczogd2VicGFja1xyXG4gICAgICAgIGlmICh0aGlzLmlzRW5hYmxlVG9vbChcIndlYnBhY2tcIikpIHtcclxuICAgICAgICAgICAgY29uc3QgcGFyYW06IElXZWJwYWNrQ29uZmlncmF0aW9uID0ge1xyXG4gICAgICAgICAgICAgICAgbm9kZWpzOiAoPElCdWlsZFRhcmdldENvbmZpZ3JhdGlvbj50aGlzLl9jb25maWcpLm5vZGVqcyxcclxuICAgICAgICAgICAgICAgIGd1aWRlOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgdGFza1BhdGg6IHRoaXMuX2NvbmZpZy5zdHJ1Y3R1cmVDb25maWcudGFzayxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgY29weVRwbChcclxuICAgICAgICAgICAgICAgIHBhdGguam9pbihzcmNEaXIsIFwidG9vbHMvd2VicGFjay9fd2VicGFjay5jb25maWcuanNcIiksXHJcbiAgICAgICAgICAgICAgICBwYXRoLmpvaW4oZHN0RGlyLCBcIndlYnBhY2suY29uZmlnLmpzXCIpLFxyXG4gICAgICAgICAgICAgICAgcGFyYW0sXHJcbiAgICAgICAgICAgICAgICB7IGRlbGltaXRlcnM6IFwiPCUgJT5cIiB9XHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogdGFzayBzY3JpcHQg44Gu44Kz44OU44O8XHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgY29weVRhc2tTY3JpcHRzKCk6IHZvaWQge1xyXG4gICAgICAgIGNvbnN0IHNyY0RpciA9IHRlbXBsYXRlUGF0aChcImJhc2UvdGFza1wiKTtcclxuICAgICAgICBjb25zdCBkc3REaXIgPSBwYXRoLmpvaW4odGhpcy5yb290RGlyLCB0aGlzLl9jb25maWcuc3RydWN0dXJlQ29uZmlnLnRhc2spO1xyXG5cclxuICAgICAgICB0aGlzLnRhc2tMaXN0LmZvckVhY2goKHRhc2spID0+IHtcclxuICAgICAgICAgICAgZnMuY29weVN5bmMoXHJcbiAgICAgICAgICAgICAgICBwYXRoLmpvaW4oc3JjRGlyLCB0YXNrKSxcclxuICAgICAgICAgICAgICAgIHBhdGguam9pbihkc3REaXIsIHRhc2spLFxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLi8uLi8uLi9zcmMvZ2VuZXJhdG9ycy9iYXNlL2dlbmVyYXRvci1iYXNlLnRzIiwiaW1wb3J0ICogYXMgVXRpbHMgZnJvbSBcIi4uLy4uL3V0aWxzXCI7XHJcbmV4cG9ydCB7IFV0aWxzIH07XHJcblxyXG4vKipcclxuICogQGludGVyZmFjZSBJU291cmNlRGlyY3RvcnlDb25maWdyYXRpb25cclxuICogQGJyaWVmIOOCveODvOOCueODh+OCo+ODrOOCr+ODiOODquOBruOCs+ODs+ODleOCo+OCruODpeODrOODvOOCt+ODp+ODs+ioreWumlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBJU291cmNlRGlyY3RvcnlDb25maWdyYXRpb24ge1xyXG4gICAgc2NyaXB0Pzogc3RyaW5nOyAgICAgICAgICAgIC8vIGpzKHRzKSDjg5XjgqHjgqTjg6vkv53lrZjlhYhcclxuICAgIHN0eWxlc2hlZXQ/OiBzdHJpbmc7ICAgICAgICAvLyBjc3MoY3NzKSDjg5XjgqHjgqTjg6vkv53lrZjlhYhcclxuICAgIHRlbXBsYXRlPzogc3RyaW5nOyAgICAgICAgICAvLyBodG1sKHRlbXBsYXRlKSDjg5XjgqHjgqTjg6vkv53lrZjlhYhcclxufVxyXG5cclxuLyoqXHJcbiAqIEBpbnRlcmZhY2UgSUJhc2VTdHJ1Y3R1cmVDb25maWdyYXRpb25cclxuICogQGJyaWVmIOODl+ODreOCuOOCp+OCr+ODiOODh+OCo+ODrOOCr+ODiOODquOBruOCs+ODs+ODleOCo+OCruODpeODrOODvOOCt+ODp+ODs+ioreWumlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBJQmFzZVN0cnVjdHVyZUNvbmZpZ3JhdGlvbiB7XHJcbiAgICBzcmM/OiBzdHJpbmc7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIOOCveODvOOCueOCs+ODvOODieOBruODq+ODvOODiOODh+OCo+ODrOOCr+ODiOODquWQjVxyXG4gICAgcGtnPzogc3RyaW5nOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyDjg5Hjg4PjgrHjg7zjgrjlhYjjg4fjgqPjg6zjgq/jg4jjg6rlkI1cclxuICAgIGJ1aWx0Pzogc3RyaW5nOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8g44Kz44Oz44OR44Kk44Or5YWI44OH44Kj44Os44Kv44OI44Oq5ZCNXHJcbiAgICBkb2M/OiBzdHJpbmc7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIOODieOCreODpeODoeODs+ODiOODh+OCo+ODrOOCr+ODiOODquWQjVxyXG4gICAgdGFzaz86IHN0cmluZzsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyDjgr/jgrnjgq/jg4fjgqPjg6zjgq/jg4jjg6rlkI1cclxuICAgIHRlc3Q/OiBzdHJpbmc7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8g44OG44K544OI44OH44Kj44Os44Kv44OI44Oq5ZCNXHJcbiAgICB0eXBlcz86IHN0cmluZzsgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFR5cGVTY3JpcHQg5Z6L5a6a576p44OH44Kj44Os44Kv44OI44Oq5ZCNXHJcbiAgICB0ZW1wPzogc3RyaW5nOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIOS9nOalreODh+OCo+ODrOOCr+ODiOODquWQjVxyXG4gICAgc3JjQ29uZmlnPzogSVNvdXJjZURpcmN0b3J5Q29uZmlncmF0aW9uOyAgICAvLyBJU291cmNlRGlyY3RvcnlDb25maWdyYXRpb25cclxuICAgIGxpYj86IHN0cmluZzsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaW50ZXJuYWwgbGlicmFyeSBtb2R1bGUg44OH44Kj44Os44Kv44OI44Oq5ZCNXHJcbiAgICBleHRlcm5hbD86IHN0cmluZzsgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGV4dGVybmFsIG1vZHVsZSDjg4fjgqPjg6zjgq/jg4jjg6rlkI1cclxuICAgIHBvcnRpbmc/OiBzdHJpbmc7ICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcG9ydGluZyBtb2R1bGUg44OH44Kj44Os44Kv44OI44Oq5ZCNXHJcbiAgICByZXM/OiBzdHJpbmc7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIOODquOCveODvOOCueODh+OCo+ODrOOCr+ODiOODquWQjVxyXG59XHJcblxyXG4vKipcclxuICogQGludGVyZmFjZSBJRGVwZW5kZW5jeVxyXG4gKiBAYnJpZWYgcGFja2FnZS5qc29uIOOBq+aMh+WumuOBmeOCiyBkZXBlbmRlbmNpZXMg5oOF5aCx44KS5qC857SN44GZ44KL44Kk44Oz44K/44O844OV44Kn44Kk44K5XHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIElEZXBlbmRlbmN5IHtcclxuICAgIG5hbWU6IHN0cmluZzsgICAgICAgICAgIC8vIG1vZHVsZSBuYW1lIGV4KSBcInR5cGVzY3JpcHRcIlxyXG4gICAgdmVyc2lvbj86IHN0cmluZzsgICAgICAgLy8g5oyH5a6a44OQ44O844K444On44OzLiDnhKHmjIflrprjga7loLTlkIjjga/mnIDmlrDjg5Djg7zjgrjjg6fjg7NcclxuICAgIGVzPzogc3RyaW5nW107ICAgICAgICAgIC8vIOaMh+WumuOBleOCjOOBnyBFUyB2ZXJzaW9uIOOBruOBqOOBjeOBruOBv+acieWKueOBq+OBmeOCi1xyXG59XHJcblxyXG4vKipcclxuICogQGludGVyZmFjZSBJUHJvamVjdENvbmZpZ3JhdGlvblxyXG4gKiBAYnJpZWYg44OX44Ot44K444Kn44Kv44OI5YWx6YCa44Gu44Kz44Oz44OV44Kj44Ku44Ol44Os44O844K344On44Oz6Kit5a6aXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIElQcm9qZWN0Q29uZmlncmF0aW9uIHtcclxuICAgIHByb2plY3ROYW1lOiBzdHJpbmc7ICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIOODl+ODreOCuOOCp+OCr+ODiOWQjSBleCkgXCJjZHAtbGliXCJcclxuICAgIHByb2plY3RUeXBlOiBzdHJpbmc7ICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIOODl+ODreOCuOOCp+OCr+ODiOeorumhniBleCkgXCJsaWJyYXJ5XCJcclxuICAgIGFjdGlvbjogc3RyaW5nOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGV4KSBcImNyZWF0ZVwiXHJcbiAgICB2ZXJzaW9uOiBzdHJpbmc7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyDjg5Djg7zjgrjjg6fjg7MgZXgpIFwiMS4wLjBcIlxyXG4gICAgbGljZW5zZTogc3RyaW5nOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8g44Op44Kk44K744Oz44K5IGV4KSBcIkFwYWNoZS0yLjBcIlxyXG4gICAgcHJpdmF0ZT86IGJvb2xlYW47ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcHJpdmF0ZSDjg5Hjg4PjgrHjg7zjgrjjga7loLTlkIggdHJ1ZVxyXG4gICAgc2V0dGluZ3M6IFV0aWxzLklHbG9iYWxTZXR0aW5nczsgICAgICAgICAgICAgICAgLy8g44Ot44Kw44Kq44OX44K344On44OzXHJcbiAgICBtb2R1bGVOYW1lPzogc3RyaW5nOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpbXBvcnQg44Gr5oyH5a6a44GZ44KLIOODouOCuOODpeODvOODq+WQjSBleCkgXCJjZHAtbGliXCJcclxuICAgIG1haW5CYXNlTmFtZT86IHN0cmluZzsgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIOODoeOCpOODs+ODleOCoeOCpOODq+WQjSBleCkgXCJjZHAtbGliXCIgLyBcImluZGV4XCJcclxuICAgIG5hbWVzcGFjZT86IHN0cmluZzsgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIOODq+ODvOODiOWQjeWJjeepuumWk1xyXG4gICAgc3RydWN0dXJlQ29uZmlnPzogSUJhc2VTdHJ1Y3R1cmVDb25maWdyYXRpb247ICAgLy8gSUJhc2VTdHJ1Y3R1cmVDb25maWdyYXRpb25cclxuICAgIGNvcHlyaWdodD86IHN0cmluZzsgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIOOCs+ODlOODvOODqeOCpOODiOaWh+Wtl+WIlyBleCkgXCJDb3B5cmlnaHQgKGMpIDIwMTcgU29ueSBDb3Jwb3JhdGlvblwiXHJcbiAgICBkZXZEZXBlbmRlbmNpZXM/OiBJRGVwZW5kZW5jeVtdOyAgICAgICAgICAgICAgICAvLyDplovnmbrnlKjkvp3lrZjjg6Ljgrjjg6Xjg7zjg6vmg4XloLFcclxufVxyXG5cclxuLyoqXHJcbiAqIEBpbnRlcmZhY2UgSUJ1aWxkVGFyZ2V0Q29uZmlncmF0aW9uXHJcbiAqIEBicmllZiDjg5Pjg6vjg4njgr/jg7zjgrLjg4Pjg4jjgrPjg7Pjg5XjgqPjgq7jg6Xjg6zjg7zjgrfjg6fjg7PoqK3lrppcclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgSUJ1aWxkVGFyZ2V0Q29uZmlncmF0aW9uIHtcclxuICAgIGVzPzogXCJlczVcIiB8IFwiZXMyMDE1XCI7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBUeXBlU2NyaXB0IOOBriB0cmFuc3BpbGUgdGFyZ2V0XHJcbiAgICBtb2R1bGU/OiBcIm5vbmVcIiB8IFwiY29tbW9uanNcIiB8IFwiYW1kXCIgfCBcInVtZFwiOyAgICAgICAgICAgICAgIC8vIEphdmFTY3JpcHQgbW9kdWxlIHN5c3RlbVxyXG4gICAgZW52PzogXCJ3ZWJcIiB8IFwibm9kZVwiIHwgXCJlbGVjdHJvblwiIHwgXCJlbGVjdHJvbi1yZW5kZXJlclwiOyAgICAvLyDlrp/ooYznkrDlooPjga4gdGFyZ2V0XHJcbiAgICBub2RlanM/OiBib29sZWFuOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBcIm5vZGVcIiB8IFwiZWxlY3Ryb25cIiDjga7loLTlkIjjgasgdHJ1ZVxyXG4gICAgbWluaWZ5PzogYm9vbGVhbjsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8g44Oq44Oq44O844K55pmC44GrIG1pbmlmeSDjgZnjgovloLTlkIjjga8gdHJ1ZVxyXG4gICAgLy8gYnVpbGQgdG9vbFxyXG4gICAgdG9vbHM/OiBzdHJpbmdbXTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8g5pei5a6a44GuIGJ1aWxkIHRvb2wgZXgpIFtcIndlYnBhY2tcIl1cclxuICAgIG91dHB1dFNhbWVEaXI/OiBib29sZWFuOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNyYyDjgaggYnVpbHQg44GM5ZCM44GY44OH44Kj44Os44Kv44OI44Oq44Gr44Gq44KL5aC05ZCIIHRydWVcclxufVxyXG5cclxuLyoqXHJcbiAqIEBpbnRlcmZhY2UgSVdlYnBhY2tDb25maWdyYXRpb25cclxuICogQGJyaWVmIFdlYnBhY2sg55So44Kz44Oz44OV44Kj44Ku44Ol44Os44O844K344On44Oz6Kit5a6aXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIElXZWJwYWNrQ29uZmlncmF0aW9uIHtcclxuICAgIG5vZGVqczogYm9vbGVhbjsgICAgLy8gXCJub2RlXCIgfCBcImVsZWN0cm9uXCIg44Gu5aC05ZCI44GrIHRydWVcclxuICAgIGd1aWRlOiBib29sZWFuOyAgICAgLy8gZ3VpZGUg44Kz44Oh44Oz44OI44KS5LuY5Yqg44GZ44KL5aC05ZCI44GvIHRydWUg44KS5oyH5a6aXHJcbiAgICB0YXNrUGF0aDogc3RyaW5nOyAgIC8vICd0YXNrJyDjg4fjgqPjg6zjgq/jg4jjg6rlkI1cclxufVxyXG5cclxuLyoqXHJcbiAqIEBpbnRlcmZhY2UgSVZpc3VhbFN0dWRpb0NvbmZpZ3JhdGlvblxyXG4gKiBAYnJpZWYgVmlzdWFsIFN0dWRpbyDnlKjjgrPjg7Pjg5XjgqPjgq7jg6Xjg6zjg7zjgrfjg6fjg7PoqK3lrppcclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgSVZpc3VhbFN0dWRpb0NvbmZpZ3JhdGlvbiBleHRlbmRzIElCYXNlU3RydWN0dXJlQ29uZmlncmF0aW9uIHtcclxuICAgIHByb2plY3ROYW1lOiBzdHJpbmc7ICAgICAgICAvLyDjg5fjg63jgrjjgqfjgq/jg4jlkI0gZXgpIFwiY2RwLWxpYlwiXHJcbiAgICBwcm9qZWN0R1VJRDogc3RyaW5nOyAgICAgICAgLy8g44OX44Ot44K444Kn44Kv44OIIEdVSUQgZXgpIHs1MUI0MTM1OS04RDJDLTQyREYtODQxNC1FODVCMDI5OTMyMzh9XHJcbiAgICBtYWluQmFzZU5hbWU6IHN0cmluZzsgICAgICAgLy8g44Oh44Kk44Oz44OV44Kh44Kk44Or5ZCNIGV4KSBcImNkcC1saWJcIiAvIGluZGV4XHJcbiAgICBsaWNlbnNlOiBib29sZWFuOyAgICAgICAgICAgLy8gTElDRU5TRSDjgpLov73liqDjgZnjgovloLTlkIjjga8gdHJ1ZVxyXG4gICAgd2VicGFjazogYm9vbGVhbjsgICAgICAgICAgIC8vIHdlYnBhY2suY29uZmlnLmpzIOOCkui/veWKoOOBmeOCi+WgtOWQiOOBryB0cnVlXHJcbiAgICB0ZXN0ZW06IGJvb2xlYW47ICAgICAgICAgICAgLy8gdGVzdGVtIHJ1bm5lciDjgpLov73liqDjgZnjgovloLTlkIjjga8gdHJ1ZVxyXG4gICAgb3V0cHV0U2FtZURpcjogYm9vbGVhbjsgICAgIC8vIHNyYyDjgaggYnVpbHQg44GM5ZCM44GY44OH44Kj44Os44Kv44OI44Oq44Gr44Gq44KL5aC05ZCIIHRydWVcclxuICAgIHRzR3JvdXA6IHtcclxuICAgICAgICByZWxhdGl2ZVBhdGg6IHN0cmluZzsgICAvLyBcImhvZ2Vob2dlXFxcIlxyXG4gICAgICAgIGZpbGVOYW1lOiBzdHJpbmc7ICAgICAgIC8vIFwiY2RwLWxpYlwiXHJcbiAgICAgICAgZGVwZW5kZWU6IGJvb2xlYW47ICAgICAgLy8g5L6d5a2Y5YWI44KS6L+95Yqg44GZ44KL5aC05ZCIIHRydWVcclxuICAgICAgICBtYXA6IGJvb2xlYW47ICAgICAgICAgICAvLyAubWFwIOODleOCoeOCpOODq+OBjOOBguOCi+WgtOWQiCB0cnVlXHJcbiAgICB9W107XHJcbiAgICBqc0dyb3VwOiB7XHJcbiAgICAgICAgcmVsYXRpdmVQYXRoOiBzdHJpbmc7ICAgLy8gXCJob2dlaG9nZVxcXCJcclxuICAgICAgICBmaWxlTmFtZTogc3RyaW5nOyAgICAgICAvLyBcImNkcC1saWJcIlxyXG4gICAgICAgIGRlcGVuZGVlOiBib29sZWFuOyAgICAgIC8vIOS+neWtmOWFiOOCkui/veWKoOOBmeOCi+WgtOWQiCB0cnVlXHJcbiAgICAgICAgZF90czogYm9vbGVhbjsgICAgICAgICAgLy8gLmQudHMg44OV44Kh44Kk44Or44GM44GC44KL5aC05ZCIIHRydWVcclxuICAgICAgICBtYXA6IGJvb2xlYW47ICAgICAgICAgICAvLyAubWFwIOODleOCoeOCpOODq+OBjOOBguOCi+WgtOWQiCB0cnVlXHJcbiAgICAgICAgbWluX21hcDogYm9vbGVhbjsgICAgICAgLy8gLm1pbiAubWFwIOODleOCoeOCpOODq+OBjOOBguOCi+WgtOWQiCB0cnVlXHJcbiAgICB9W107XHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4uLy4uLy4uL3NyYy9nZW5lcmF0b3JzL2Jhc2UvaW50ZXJmYWNlcy50cyIsImltcG9ydCB7IGFzc2VydCB9IGZyb20gXCIuLi91dGlscy9zZXR0aW5nc1wiO1xyXG5cclxuaW1wb3J0IHsgR2VuZXJhdG9yQmFzZSwgSVByb2plY3RDb25maWdyYXRpb24gfSBmcm9tIFwiLi9iYXNlXCI7XHJcbmltcG9ydCB7IG5ld0dlbmVyYXRvckxpYnJhcnkgfSBmcm9tIFwiLi9saWJyYXJ5XCI7XHJcbmltcG9ydCB7IG5ld0dlbmVyYXRvck1vYmlsZSB9IGZyb20gXCIuL21vYmlsZVwiO1xyXG5pbXBvcnQgeyBuZXdHZW5lcmF0b3JEZXNrdG9wIH0gZnJvbSBcIi4vZGVza3RvcFwiO1xyXG5pbXBvcnQgeyBuZXdHZW5lcmF0b3JXZWIgfSBmcm9tIFwiLi93ZWJcIjtcclxuXHJcbmV4cG9ydCAqIGZyb20gXCIuL2Jhc2VcIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vbGlicmFyeVwiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi9tb2JpbGVcIjtcclxuZXhwb3J0ICogZnJvbSBcIi4vZGVza3RvcFwiO1xyXG5leHBvcnQgKiBmcm9tIFwiLi93ZWJcIjtcclxuXHJcbi8qKlxyXG4gKiBnZW5lcmF0b3Ig55Sf5oiQ6Zai5pWwXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gbmV3R2VuZXJhdG9yKGNvbmZpZzogSVByb2plY3RDb25maWdyYXRpb24pOiBHZW5lcmF0b3JCYXNlIHtcclxuICAgIHN3aXRjaCAoY29uZmlnLnByb2plY3RUeXBlKSB7XHJcbiAgICAgICAgY2FzZSBcImxpYnJhcnlcIjpcclxuICAgICAgICAgICAgcmV0dXJuIG5ld0dlbmVyYXRvckxpYnJhcnkoY29uZmlnKTtcclxuICAgICAgICBjYXNlIFwibW9iaWxlXCI6XHJcbiAgICAgICAgICAgIHJldHVybiBuZXdHZW5lcmF0b3JNb2JpbGUoY29uZmlnKTtcclxuICAgICAgICBjYXNlIFwiZGVza3RvcFwiOlxyXG4gICAgICAgICAgICByZXR1cm4gbmV3R2VuZXJhdG9yRGVza3RvcChjb25maWcpO1xyXG4gICAgICAgIGNhc2UgXCJ3ZWJcIjpcclxuICAgICAgICAgICAgcmV0dXJuIG5ld0dlbmVyYXRvcldlYihjb25maWcpO1xyXG4gICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgIGFzc2VydChmYWxzZSwgXCJ1bnN1cHBvcnRlZCBwcm9qZWN0IGtpbmQ6IFwiICsgY29uZmlnLnByb2plY3RUeXBlKTtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4uLy4uL3NyYy9nZW5lcmF0b3JzL2luZGV4LnRzIiwiaW1wb3J0ICogYXMgcGF0aCBmcm9tIFwicGF0aFwiO1xyXG5pbXBvcnQgKiBhcyBvcyBmcm9tIFwib3NcIjtcclxuaW1wb3J0IHsgc3Bhd24sIFNwYXduT3B0aW9ucyB9IGZyb20gXCJjaGlsZF9wcm9jZXNzXCI7XHJcblxyXG5pbXBvcnQge1xyXG4gICAgZnMsXHJcbiAgICBob2dhbixcclxuICAgICQsXHJcbiAgICB3aGljaCxcclxuICAgIHV1aWQsXHJcbiAgICBTcGlubmVyLFxyXG59IGZyb20gXCIuL2xpYnNcIjtcclxuXHJcbmltcG9ydCB7XHJcbiAgICBhc3NlcnQsXHJcbiAgICBnZXRMaWJQYXRoLFxyXG59IGZyb20gXCIuL3NldHRpbmdzXCI7XHJcblxyXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG4vLyBleHBvcnRzIG1ldGhvZHM6XHJcblxyXG4vKipcclxuICogSGFuZGxlIGNvbW1hbmQgbGluZSBlcnJvciBhbmQga2lsbCBwcm9jZXNzLlxyXG4gKiBXaGVuIHRoZSBhcHBsaWNhdGlvbiByZWNlaXZlZCBlcnJvciBmcm9tIGNsaSwgcGxlYXNlIGNhbGwgdGhpcyBtZXRob2QuXHJcbiAqXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBlcnJvciAgZXJyb3IgaW5mb3JtYXRpb24uXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gaGFuZGxlRXJyb3IoZXJyb3I6IHN0cmluZyk6IHZvaWQge1xyXG4gICAgYXNzZXJ0KGZhbHNlLCBlcnJvcik7XHJcbn1cclxuXHJcbi8vX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXy8vXHJcblxyXG4vKipcclxuICogXCJ0ZW1wbGF0ZXNcIiDjg4fjgqPjg6zjgq/jg4jjg6rjgYvjgonjga7jg5HjgrnjgpLlj5blvpcuXHJcbiAqXHJcbiAqIEBwYXJhbSAge1N0cmluZ30gdGFyZ2V0IOOCv+ODvOOCsuODg+ODiOOCkuaMh+Wumi4gbnVsbCDjga7loLTlkIjjga/jgIF0ZW1wbGF0ZXMg44KS6L+U5Y20XHJcbiAqIEByZXR1cm4ge1N0cmluZ30gdGVtcGxhdGVzL2hvZ2Vob2dlXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gdGVtcGxhdGVQYXRoKHRhcmdldDogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgIGlmIChudWxsID09IHRhcmdldCkge1xyXG4gICAgICAgIHJldHVybiBwYXRoLmpvaW4oZ2V0TGliUGF0aCgpLCBcInRlbXBsYXRlc1wiKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIHBhdGguam9pbihnZXRMaWJQYXRoKCksIFwidGVtcGxhdGVzXCIsIHRhcmdldCk7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXy8vXHJcblxyXG4vKipcclxuICogR2V0IHNwaW5uZXIgaW5zdGFuY2UuXHJcbiAqIENMSSBoZWxwZXIuXHJcbiAqXHJcbiAqIEBwYXJhbSAge1N0cmluZ30gIFtmb3JtYXRdICBzcGlubmVyIGZvcm1hdCBzdHJpbmcuXHJcbiAqIEBwYXJhbSAge051bWJlcn0gIFtpbmRleF0gICBzcGlubmVyIGluZGV4IGRlZmluZWQgYnkgY2xpLXNwaW5uZXIuIChkZWZhdWx0OiByYW5kb20gWzAtMjldKVxyXG4gKiBAcmV0dXJuIHtTcGlubmVyfSBjbGktc3Bpbm5lciBpbnN0YW5jZS5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRTcGlubmVyKGZvcm1hdD86IHN0cmluZywgaW5kZXg/OiBudW1iZXIpOiB7IHN0YXJ0OiAoKSA9PiB2b2lkOyBzdG9wOiAoY2xlYW4/OiBib29sZWFuKSA9PiB2b2lkOyB9IHtcclxuICAgIGNvbnN0IHNwaW5uZXJzID0gW1xyXG4gICAgICAgIFwifC8tXFxcXFwiLFxyXG4gICAgICAgIFwi4pSk4pSY4pS04pSU4pSc4pSM4pSs4pSQXCIsXHJcbiAgICAgICAgXCLil6Lil6Pil6Til6VcIixcclxuICAgICAgICBcIuKWjOKWgOKWkOKWhFwiLFxyXG4gICAgICAgIFwi4paJ4paK4paL4paM4paN4paO4paP4paO4paN4paM4paL4paK4paJXCIsXHJcbiAgICAgICAgXCLiloHiloPiloTiloXilobilofilojilofilobiloXiloTiloNcIixcclxuICAgICAgICBcIuKYseKYsuKYtFwiLFxyXG4gICAgICAgIFwiLm9PQCpcIixcclxuICAgICAgICBcIuKXkOKXk+KXkeKXklwiLFxyXG4gICAgICAgIC8vLy9cclxuICAgICAgICBcIuKXoeKXoSDiipniipkg4peg4pegXCIsXHJcbiAgICAgICAgXCLilqDilqHilqrilqtcIixcclxuICAgICAgICBcIuKGkOKGluKGkeKGl+KGkuKGmOKGk+KGmVwiLFxyXG4gICAgICAgIFwiLm9PwrBPby5cIixcclxuICAgIF07XHJcbiAgICBjb25zdCBmbXQgPSBmb3JtYXQgfHwgXCIlc1wiO1xyXG4gICAgY29uc3Qgc3Bpbm5lciA9IG5ldyBTcGlubmVyKGZtdCk7XHJcbiAgICBjb25zdCBpZHggPSAobnVsbCAhPSBpbmRleCAmJiAwIDw9IGluZGV4ICYmIGluZGV4IDwgMTQpID8gaW5kZXggOiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMCk7XHJcbiAgICBzcGlubmVyLnNldFNwaW5uZXJTdHJpbmcoc3Bpbm5lcnNbaWR4XSk7XHJcbiAgICByZXR1cm4gc3Bpbm5lcjtcclxufVxyXG5cclxuLy9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fLy9cclxuXHJcbi8qKlxyXG4gKiBAaW50ZXJmYWNlIE5vcm1hbGl6ZVRleHRPcHRpb25zXHJcbiAqIEBicmllZiBub3JtYWxpemVUZXh0KCkg44Gr5oyH5a6a44GZ44KL44Kq44OX44K344On44OzXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIE5vcm1hbGl6ZVRleHRPcHRpb25zIHtcclxuICAgIGVvbD86IHN0cmluZzsgICAvLyBkZWZhdWx0OiBvcy5FT0xcclxuICAgIGJvbT86IGJvb2xlYW47ICAvLyBkZWZhdWx0OiB0cnVlXHJcbiAgICB0YWI/OiBudW1iZXI7ICAgLy8gdGFiIOOCkuWkieaPm+OBmeOCi+OCueODmuODvOOCueOBruaVsOOCkuaMh+Wumi4gZGVmYXVsdDog5aSJ5o+b44GX44Gq44GEXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBOb3JtYWxpemUgdGV4dCBsaW5lLWZlZWQuXHJcbiAqIGZvciB3aW5kb3dzIGdpdCB1c2VyLlxyXG4gKlxyXG4gKiBAcGFyYW0gIHtTdHJpbmd9ICAgICAgICAgICAgICAgdGV4dCAgICAgIGlucHV0IHRleHQuXHJcbiAqIEBwYXJhbSAge05vcm1hbGl6ZVRleHRPcHRpb25zfSBbb3B0aW9uc10gb3B0aW9uLlxyXG4gKiBAcmV0dXJuIHtTdHJpbmd9IG5vcm1hbGl6ZWQgdGV4dC5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBub3JtYWxpemVUZXh0KHRleHQ6IHN0cmluZywgb3B0aW9ucz86IE5vcm1hbGl6ZVRleHRPcHRpb25zKTogc3RyaW5nIHtcclxuICAgIGNvbnN0IG9wdDogTm9ybWFsaXplVGV4dE9wdGlvbnMgPSAkLmV4dGVuZCh7fSwge1xyXG4gICAgICAgIGVvbDogb3MuRU9MLFxyXG4gICAgICAgIGJvbTogdHJ1ZSxcclxuICAgIH0sIG9wdGlvbnMpO1xyXG5cclxuICAgIHRleHQgPSB0ZXh0XHJcbiAgICAgICAgLnJlcGxhY2UoL15cXHVmZWZmL2dtLCBcIlwiKSAgIC8vIHJlbW92ZSBib21cclxuICAgICAgICAucmVwbGFjZSgvXFxyXFxuL2dtLCBcIlxcblwiKSAgICAvLyBvbmNlIFwiXFxuXCJcclxuICAgICAgICAucmVwbGFjZSgvXFxyL2dtLCBcIlxcblwiKVxyXG4gICAgO1xyXG5cclxuICAgIGlmIChvcHQuYm9tKSB7XHJcbiAgICAgICAgdGV4dCA9IFwiXFx1ZmVmZlwiICsgdGV4dDtcclxuICAgIH1cclxuICAgIGlmIChcIlxcblwiICE9PSBvcHQuZW9sKSB7XHJcbiAgICAgICAgdGV4dCA9IHRleHQucmVwbGFjZSgvXFxuL2dtLCBvcHQuZW9sKTtcclxuICAgIH1cclxuICAgIGlmIChvcHQudGFiKSB7XHJcbiAgICAgICAgY29uc3Qgc3BhY2VzID0gKCgpID0+IHtcclxuICAgICAgICAgICAgbGV0IHMgPSBcIlwiO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG9wdC50YWI7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgcyArPSBcIiBcIjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gcztcclxuICAgICAgICB9KSgpO1xyXG4gICAgICAgIHRleHQgPSB0ZXh0LnJlcGxhY2UoL1xcdC9nbSwgc3BhY2VzKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdGV4dDtcclxufVxyXG5cclxuLy9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fLy9cclxuXHJcbi8qKlxyXG4gKiBAaW50ZXJmYWNlIEV4ZWNDb21tYW5kT3B0aW9uc1xyXG4gKiBAYnJpZWYgZXhlY0NvbW1hbmQoKSDjgavmjIflrprjgZnjgovjgqrjg5fjgrfjg6fjg7NcclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgRXhlY0NvbW1hbmRPcHRpb25zIGV4dGVuZHMgU3Bhd25PcHRpb25zIHtcclxuICAgIHNwaW5uZXI/OiB7XHJcbiAgICAgICAgZm9ybWF0Pzogc3RyaW5nOyAgICAvLyBleCkgXCIlc1wiXHJcbiAgICAgICAgaW5kZXg/OiBudW1iZXI7ICAgICAvLyAwIC0gOSDjga7mlbDlgKTjgpLmjIflrppcclxuICAgIH07XHJcbiAgICBzdGRvdXQ/OiAoZGF0YTogc3RyaW5nKSA9PiB2b2lkO1xyXG4gICAgc3RkZXJyPzogKGRhdGE6IHN0cmluZykgPT4gdm9pZDtcclxufVxyXG5cclxuLyoqXHJcbiAqIEV4ZWN1dGUgY29tbWFuZCBsaW5lIGJ5IHNwYXduLlxyXG4gKiBjYWxsIHNwYXduLiBpZiBlcnJvciBvY2N1cmVkLCBjdWkgaXMga2lsbGVkIHByb2NjZXNzLlxyXG4gKlxyXG4gKiBAcGFyYW0gICB7U3RyaW5nfSAgICAgICAgICAgICAgIGNvbW1hbmQgICAgbWFpbiBjb21tYW5kLiBleCkgXCJjb3Jkb3ZhXCJcclxuICogQHBhcmFtICAge1N0cmluZ1tdfSAgICAgICAgICAgICBhcmdzICAgICAgIGNvbW1hbmQgYXJncy4gZXgpIFtcInBsdWdpblwiLCBcImFkZFwiLCBwbHVnaW5OYW1lXVxyXG4gKiBAcGFyYW0gICB7RXhlY0NvbW1hbmRPcHRpb25zfSAgIFtvcHRpb25zXSAgY2xpLXNwaW5uZXJcInMgb3B0aW9ucy5cclxuICogQHJldHVybnMge051bWJlcn0gZXJyb3IgY29kZVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGV4ZWNDb21tYW5kKGNvbW1hbmQ6IHN0cmluZywgYXJnczogc3RyaW5nW10sIG9wdGlvbnM/OiBFeGVjQ29tbWFuZE9wdGlvbnMpOiBQcm9taXNlPG51bWJlcj4ge1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICBjb25zdCBvcHQ6IEV4ZWNDb21tYW5kT3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCB7XHJcbiAgICAgICAgICAgIHN0ZGlvOiBcImluaGVyaXRcIixcclxuICAgICAgICAgICAgc3Bpbm5lcjogeyBmb3JtYXQ6IFwiJXNcIiB9LFxyXG4gICAgICAgICAgICBzdGRvdXQ6IChkYXRhOiBzdHJpbmcpOiB2b2lkID0+IHsgLyogbm9vcCAqLyB9LFxyXG4gICAgICAgICAgICBzdGRlcnI6IChkYXRhOiBzdHJpbmcpOiB2b2lkID0+IHsgLyogbm9vcCAqLyB9LFxyXG4gICAgICAgIH0sIG9wdGlvbnMpO1xyXG5cclxuICAgICAgICB3aGljaChjb21tYW5kLCAoZXJyb3IsIHJlc29sdmVkQ29tbWFuZCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgIGhhbmRsZUVycm9yKEpTT04uc3RyaW5naWZ5KGVycm9yKSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHNwaW5uZXIgPSBvcHQuc3Bpbm5lciA/IGdldFNwaW5uZXIob3B0LnNwaW5uZXIuZm9ybWF0LCBvcHQuc3Bpbm5lci5pbmRleCkgOiBudWxsO1xyXG4gICAgICAgICAgICBpZiAoc3Bpbm5lcikge1xyXG4gICAgICAgICAgICAgICAgc3Bpbm5lci5zdGFydCgpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb25zdCBjaGlsZCA9IHNwYXduKHJlc29sdmVkQ29tbWFuZCwgYXJncywgb3B0KVxyXG4gICAgICAgICAgICAgICAgLm9uKFwiZXJyb3JcIiwgaGFuZGxlRXJyb3IpXHJcbiAgICAgICAgICAgICAgICAub24oXCJjbG9zZVwiLCAoY29kZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzcGlubmVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNwaW5uZXIuc3RvcCh0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShjb2RlKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgaWYgKFwicGlwZVwiID09PSBvcHQuc3RkaW8pIHtcclxuICAgICAgICAgICAgICAgIGNoaWxkLnN0ZG91dC5vbihcImRhdGFcIiwgKGRhdGEpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBvcHQuc3Rkb3V0KGRhdGEudG9TdHJpbmcoKSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIGNoaWxkLnN0ZGVyci5vbihcImRhdGFcIiwgKGRhdGEpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBvcHQuc3RkZXJyKGRhdGEudG9TdHJpbmcoKSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbn1cclxuXHJcbi8vX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXy8vXHJcblxyXG4vKipcclxuICogQGludGVyZmFjZSBDb3B5VGVtcGxhdGVPcHRpb25zXHJcbiAqIEBicmllZiBjb3B5VHBsKCkg44Gr5oyH5a6a44GZ44KL44Kq44OX44K344On44OzXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIENvcHlUZW1wbGF0ZU9wdGlvbnMgZXh0ZW5kcyBOb3JtYWxpemVUZXh0T3B0aW9ucyB7XHJcbiAgICBkZWxpbWl0ZXJzPzogXCJ7eyB9fVwiIHwgXCI8JSAlPlwiOyAvLyB0ZW1wbGF0ZSDjgavkvb/nlKjjgZnjgosgZGVsaW1pdGVyLiBkZWZhdWx0OiBcInt7IH19XCJcclxufVxyXG5cclxuLyoqXHJcbiAqIENvcHkgdGVtcGxhdGUgd2l0aCBob2dhbi5cclxuICogc3luYyBmdW5jdGlvblxyXG4gKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gICAgICAgICAgICAgICBzcmMgICAgICAgc291cmNlIGZpbGUgcGF0aC5cclxuICogQHBhcmFtIHtTdHJpbmd9ICAgICAgICAgICAgICAgZHN0ICAgICAgIGRlc3RpbmF0aW9uIGZpbGUgcGF0aC5cclxuICogQHBhcmFtIHtPYmplY3R9ICAgICAgICAgICAgICAgcGFyYW1zICAgIHRlbXBsYXRlIHBhcmFtZXRlcnMuXHJcbiAqIEBwYXJhbSB7Q29weVRlbXBsYXRlT3B0aW9uc30gIFtvcHRpb25zXSBvcHRpb25zIG9iamVjdC5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBjb3B5VHBsKHNyYzogc3RyaW5nLCBkc3Q6IHN0cmluZywgcGFyYW1zOiBPYmplY3QsIG9wdGlvbnM/OiBDb3B5VGVtcGxhdGVPcHRpb25zKTogdm9pZCB7XHJcbiAgICBjb25zdCBvcHQgPSAkLmV4dGVuZCh7fSwge1xyXG4gICAgICAgIGVvbDogb3MuRU9MLFxyXG4gICAgICAgIGJvbTogdHJ1ZSxcclxuICAgICAgICBkZWxpbWl0ZXJzOiBcInt7IH19XCIsXHJcbiAgICB9LCBvcHRpb25zKTtcclxuXHJcbiAgICBjb25zdCBqc3QgPSBob2dhbi5jb21waWxlKG5vcm1hbGl6ZVRleHQoZnMucmVhZEZpbGVTeW5jKHNyYykudG9TdHJpbmcoKSwgeyBlb2w6IFwiXFxuXCIsIGJvbTogZmFsc2UgfSksIG9wdCk7XHJcbiAgICBjb25zdCBvdXRwdXQgPSBub3JtYWxpemVUZXh0KGpzdC5yZW5kZXIocGFyYW1zKSwgb3B0KTtcclxuXHJcbiAgICBmcy5lbnN1cmVGaWxlU3luYyhkc3QpO1xyXG4gICAgZnMud3JpdGVGaWxlU3luYyhkc3QsIG91dHB1dCwgXCJ1dGY4XCIpO1xyXG59XHJcblxyXG4vL19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18vL1xyXG5cclxuLyoqXHJcbiAqIEdVSUQgZ2VuZXJhdGUuXHJcbiAqIHJldHVybmVkIGFzIFdpbmRvd3MgcmVnaXN0cnkgdHlwZSBmb3JtYXQuXHJcbiAqXHJcbiAqIEByZXR1cm4ge1N0cmluZ31cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVHVUlEKCk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gXCJ7XCIgKyB1dWlkLnY0KCkudG9VcHBlckNhc2UoKSArIFwifVwiO1xyXG59XHJcblxyXG4vL19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18vL1xyXG5cclxuLyoqXHJcbiAqIENyZWF0ZSBYTUwgRE9NIG5vZGUuXHJcbiAqXHJcbiAqIEBwYXJhbSAgIHN0ciAgc3RyaW5nIHhtbCBmb3JtYXQuIGV4KSAnPHByZWZlcmVuY2UgbmFtZT1cIkRpc2FsbG93T3ZlcnNjcm9sbFwiIHZhbHVlPVwidHJ1ZVwiLz4nXHJcbiAqIEByZXR1cm5zIFhNTCBOb2RlIGluc3RhbmNlXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gc3RyMlhtbE5vZGUoc3RyOiBzdHJpbmcpOiBKUXVlcnkge1xyXG4gICAgbGV0IGZ1bGxYTUwgPSB0cnVlO1xyXG4gICAgaWYgKCEvPD94bWwvaS50ZXN0KHN0cikpIHtcclxuICAgICAgICBmdWxsWE1MID0gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBjb25zdCAkeG1sID0gJCgkLnBhcnNlWE1MKHN0cikpO1xyXG4gICAgcmV0dXJuIGZ1bGxYTUwgPyAkeG1sIDogJHhtbC5jaGlsZHJlbigpO1xyXG59XHJcblxyXG4vKipcclxuICogQ3JlYXRlIFhNTCBzdHJpbmcgZnJvbSBET00gbm9kZS5cclxuICpcclxuICogQHBhcmFtICB7U3RyaW5nfSBzdHIgIHN0cmluZyB4bWwgZm9ybWF0LiBleCkgJzxwcmVmZXJlbmNlIG5hbWU9XCJEaXNhbGxvd092ZXJzY3JvbGxcIiB2YWx1ZT1cInRydWVcIi8+J1xyXG4gKiBAcmV0dXJuIHtqUXVlcnl9IFhNTCBOb2RlIGluc3RhbmNlXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24geG1sTm9kZTJTdHIoJHhtbDogSlF1ZXJ5KTogc3RyaW5nIHtcclxuICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLXVuZGVmICovXHJcbiAgICByZXR1cm4gbmV3IFhNTFNlcmlhbGl6ZXIoKS5zZXJpYWxpemVUb1N0cmluZygkeG1sWzBdKTtcclxuICAgIC8qIGVzbGludC1lbmFibGUgbm8tdW5kZWYgKi9cclxufVxyXG5cclxuLyoqXHJcbiAqIEBpbnRlcmZhY2UgRm9ybWF0WG1sT3B0aW9uc1xyXG4gKiBAYnJpZWYgZm9ybWF0WE1MKCkg44Gr5oyH5a6a44GZ44KL44Kq44OX44K344On44OzXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIEZvcm1hdFhtbE9wdGlvbnMgZXh0ZW5kcyBOb3JtYWxpemVUZXh0T3B0aW9ucyB7XHJcbiAgICBzdGVwPzogbnVtYmVyOyAgIC8vIOepuueZveOCueODmuODvOOCueaVsC4gZGVmYXVsdDogMlxyXG59XHJcblxyXG4vKipcclxuICogWE1MIGZvcm1hdHRlci5cclxuICpcclxuICogQHBhcmFtICB7U3RyaW5nfSAgICAgICAgICAgc3RyICAgICAgIHN0cmluZyB4bWwgZm9ybWF0LiBleCkgJzxwcmVmZXJlbmNlIG5hbWU9XCJEaXNhbGxvd092ZXJzY3JvbGxcIiB2YWx1ZT1cInRydWVcIi8+J1xyXG4gKiBAcGFyYW0gIHtGb3JtYXRYbWxPcHRpb25zfSBbb3B0aW9uc10gb3B0aW9ucyBvYmplY3QuXHJcbiAqIEByZXR1cm4ge1N0cmluZ30gZm9ybWF0dGVkIFhNTFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdFhNTChzdHI6IHN0cmluZywgb3B0aW9ucz86IEZvcm1hdFhtbE9wdGlvbnMpOiBzdHJpbmcge1xyXG4gICAgY29uc3Qgb3B0OiBGb3JtYXRYbWxPcHRpb25zID0gJC5leHRlbmQoe30sIHtcclxuICAgICAgICBlb2w6IG9zLkVPTCxcclxuICAgICAgICBib206IHRydWUsXHJcbiAgICAgICAgc3RlcDogMixcclxuICAgIH0sIG9wdGlvbnMpO1xyXG4gICAgbGV0IHhtbCA9IFwiXCI7XHJcbiAgICBsZXQgcGFkID0gMDtcclxuICAgIGxldCBpbmRlbnQ6IG51bWJlcjtcclxuICAgIGxldCBub2RlOiBzdHJpbmc7XHJcblxyXG4gICAgY29uc3Qgc3RyQXJyID0gbm9ybWFsaXplVGV4dChzdHIsIHsgZW9sOiBcIlxcblwiIH0pXHJcbiAgICAgICAgLnJlcGxhY2UoLyg+KSg8KShcXC8qKS9nLCBcIiQxXFxuJDIkM1wiKSAvLyBpbnNlcnQgTEYgdG8gZWFjaCBub2RlIG9uY2UuXHJcbiAgICAgICAgLnNwbGl0KFwiXFxuXCIpO1xyXG5cclxuICAgIGNvbnN0IHNwYWNlcyA9IChsZW46IG51bWJlcikgPT4ge1xyXG4gICAgICAgIGxldCBzID0gXCJcIjtcclxuICAgICAgICBjb25zdCBfaW5kZW50ID0gbGVuICogb3B0LnN0ZXA7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBfaW5kZW50OyBpKyspIHtcclxuICAgICAgICAgICAgcyArPSBcIiBcIjtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHM7XHJcbiAgICB9O1xyXG5cclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3RyQXJyLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgaW5kZW50ID0gMDtcclxuICAgICAgICBub2RlID0gJC50cmltKHN0ckFycltpXSk7XHJcbiAgICAgICAgaWYgKG5vZGUubWF0Y2goLy4rPFxcL1xcd1tePl0qPiQvKSkge1xyXG4gICAgICAgICAgICBpbmRlbnQgPSAwO1xyXG4gICAgICAgIH0gZWxzZSBpZiAobm9kZS5tYXRjaCgvXjxcXC9cXHcvKSkge1xyXG4gICAgICAgICAgICBpZiAocGFkID4gMCkge1xyXG4gICAgICAgICAgICAgICAgcGFkIC09IDE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2UgaWYgKG5vZGUubWF0Y2goL148XFx3W14+XSpbXi9dPi4qJC8pKSB7XHJcbiAgICAgICAgICAgIGluZGVudCA9IDE7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaW5kZW50ID0gMDtcclxuICAgICAgICB9XHJcbiAgICAgICAgeG1sICs9IHNwYWNlcyhwYWQpICsgbm9kZSArIFwiXFxuXCI7XHJcbiAgICAgICAgcGFkICs9IGluZGVudDtcclxuICAgIH1cclxuXHJcbiAgICB4bWwgPSB4bWxcclxuICAgICAgICAucmVwbGFjZSgvXFxuXFxuL2dtLCBcIlxcblwiKVxyXG4gICAgICAgIC5yZXBsYWNlKC9eICtcXG4vZ20sIFwiXCIpXHJcbiAgICAgICAgO1xyXG5cclxuICAgIHJldHVybiBub3JtYWxpemVUZXh0KHhtbCwgb3B0KTtcclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi4vLi4vc3JjL3V0aWxzL3Rvb2xzLnRzIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiY2hpbGRfcHJvY2Vzc1wiKTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyBleHRlcm5hbCBcImNoaWxkX3Byb2Nlc3NcIlxuLy8gbW9kdWxlIGlkID0gMTlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiY2hhbGtcIik7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gZXh0ZXJuYWwge1wiY29tbW9uanNcIjpcImNoYWxrXCIsXCJjb21tb25qczJcIjpcImNoYWxrXCJ9XG4vLyBtb2R1bGUgaWQgPSAyMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJjbGktc3Bpbm5lclwiKTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyBleHRlcm5hbCB7XCJjb21tb25qc1wiOlwiY2xpLXNwaW5uZXJcIixcImNvbW1vbmpzMlwiOlwiY2xpLXNwaW5uZXJcIn1cbi8vIG1vZHVsZSBpZCA9IDIxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImZzLWV4dHJhXCIpO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIGV4dGVybmFsIHtcImNvbW1vbmpzXCI6XCJmcy1leHRyYVwiLFwiY29tbW9uanMyXCI6XCJmcy1leHRyYVwifVxuLy8gbW9kdWxlIGlkID0gMjJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiZ2xvYlwiKTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyBleHRlcm5hbCB7XCJjb21tb25qc1wiOlwiZ2xvYlwiLFwiY29tbW9uanMyXCI6XCJnbG9iXCJ9XG4vLyBtb2R1bGUgaWQgPSAyM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJqc2RvbVwiKTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyBleHRlcm5hbCB7XCJjb21tb25qc1wiOlwianNkb21cIixcImNvbW1vbmpzMlwiOlwianNkb21cIn1cbi8vIG1vZHVsZSBpZCA9IDI0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInNlbXZlci1yZWdleFwiKTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyBleHRlcm5hbCB7XCJjb21tb25qc1wiOlwic2VtdmVyLXJlZ2V4XCIsXCJjb21tb25qczJcIjpcInNlbXZlci1yZWdleFwifVxuLy8gbW9kdWxlIGlkID0gMjVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwidXVpZFwiKTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyBleHRlcm5hbCB7XCJjb21tb25qc1wiOlwidXVpZFwiLFwiY29tbW9uanMyXCI6XCJ1dWlkXCJ9XG4vLyBtb2R1bGUgaWQgPSAyNlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJ3aGljaFwiKTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyBleHRlcm5hbCB7XCJjb21tb25qc1wiOlwid2hpY2hcIixcImNvbW1vbmpzMlwiOlwid2hpY2hcIn1cbi8vIG1vZHVsZSBpZCA9IDI3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInhtbGRvbVwiKTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyBleHRlcm5hbCB7XCJjb21tb25qc1wiOlwieG1sZG9tXCIsXCJjb21tb25qczJcIjpcInhtbGRvbVwifVxuLy8gbW9kdWxlIGlkID0gMjhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiaG9nYW4uanNcIik7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gZXh0ZXJuYWwge1wicm9vdFwiOlwiSG9nYW5cIixcImNvbW1vbmpzXCI6XCJob2dhbi5qc1wiLFwiY29tbW9uanMyXCI6XCJob2dhbi5qc1wiLFwiYW1kXCI6XCJob2dhbi5qc1wifVxuLy8gbW9kdWxlIGlkID0gMjlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwibG9kYXNoXCIpO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIGV4dGVybmFsIHtcInJvb3RcIjpcIl9cIixcImNvbW1vbmpzXCI6XCJsb2Rhc2hcIixcImNvbW1vbmpzMlwiOlwibG9kYXNoXCJ9XG4vLyBtb2R1bGUgaWQgPSAzMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJ1bmRlcnNjb3JlLnN0cmluZ1wiKTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyBleHRlcm5hbCB7XCJyb290XCI6XCJfXCIsXCJjb21tb25qc1wiOlwidW5kZXJzY29yZS5zdHJpbmdcIixcImNvbW1vbmpzMlwiOlwidW5kZXJzY29yZS5zdHJpbmdcIn1cbi8vIG1vZHVsZSBpZCA9IDMxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImpxdWVyeVwiKTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyBleHRlcm5hbCB7XCJyb290XCI6XCJqUXVlcnlcIixcImNvbW1vbmpzXCI6XCJqcXVlcnlcIixcImNvbW1vbmpzMlwiOlwianF1ZXJ5XCIsXCJhbWRcIjpcImpxdWVyeVwifVxuLy8gbW9kdWxlIGlkID0gMzJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl19"]}