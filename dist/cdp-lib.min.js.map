{"version":3,"sources":["dist/cdp-lib.js"],"names":["module","exports","modules","installedModules","__webpack_require__","moduleId","i","l","call","m","c","value","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","getDefault","getModuleExports","object","property","prototype","hasOwnProperty","p","s","__export","require","fs","glob","hogan","_l","_s","which","uuid","chalk","semverRegex","cli_spinner_1","Spinner","$","_window","jsdom","JSDOM","window","defaultView","root","xmldom","DOMParser","global","XMLSerializer","_m","mixin","_","path","libs_1","_settings","force","verbose","silent","lang","_libPath","getSettings","extend","setSettings","settings","targetDir","getLibPath","TRY_COUNT","tried","__dirname","Error","join","check","pathExistsSync","getTargetDir","log","message","optionalParams","length","console","debug","error","assert","test","warn","process","exit","_lang","translate","key","JSON","parse","readFileSync","toString","resouce","props","split","prop","shift","__awaiter","this","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","step","next","e","rejected","result","done","then","apply","base_1","GeneratorElectron","GeneratorBase","[object Object]","src","pkg","built","doc","task","types","srcConfig","script","stylesheet","template","taskList","config","_config","generator_electoron_1","newGeneratorDesktop","os","Utils","templatePath","copyTpl","GeneratorModule","temp","ensureModuleProps","createDirectoryStructure","createProjectSettings","createSourceTemplate","createVisualStudioSolution","defaultDevDependencies","depends","super","concat","version","undefined","extra","nodejs","push","isEnableTool","sortBy","depend","moduleName","projectName","trim","dasherize","mainBaseName","copyTplDir","rootDir","delimiters","outputSameDir","bom","structureConfig","queryEsLintEnvParam","testemStuffPath","sync","cwd","nodir","forEach","file","copySync","devDependencies","queryDependenciesParam","_module","basename","param","sampleClass","classify","sampleModule","vsParam","createGUID","projectGUID","replace","license","private","webpack","testem","jsGroup","relativePath","fileName","dependee","d_ts","map","min_map","minify","tsGroup","createProj","toXmlString","normalizeText","options","eol","EOL","tpl","jst","compile","render","toXmlDOM","parseXML","toXmlNode","str2XmlNode","$proj","$gpTS","$gpJS","find","last","after","formatXML","dstPath","xmlNode2Str","writeFileSync","generator_module_1","newGeneratorLibrary","GeneratorCordova","generator_cordova_1","newGeneratorMobile","GeneratorBrowser","generator_browser_1","newGeneratorWeb","generators_1","CDPLib","newGenerator","run","default","utils_1","_projectRootDir","defaultBaseStructure","env","stringify","action","runCreate","cyan","directory","chdir","target","dstRoot","dot","dst","execCommand","stdio","spinner","stdout","data","catch","reason","base","es","dependencies","progress","filter","esVersion","context","getSpinner","yellow","start","stop","queryNodeModuleLatestVersion","compileSetting","es6","node","tools","tool","createBase","create","createProjectDir","copyBaseStructure","copyCommonFiles","copyTaskScripts","existsSync","mkdirsSync","srcDir","dstDir","copyright","guide","taskPath","settings_1","library_1","mobile_1","desktop_1","web_1","projectType","child_process_1","handleError","format","index","spinners","fmt","idx","Math","floor","random","setSpinnerString","text","opt","tab","spaces","command","args","stderr","resolvedCommand","child","spawn","on","code","params","output","ensureFileSync","v4","toUpperCase","str","children","$xml","serializeToString","xml","pad","indent","strArr","len","_indent","match"],"mappings":"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","sourcesContent":["﻿/*!\n * cdp-lib.js 0.0.1\n *\n * Date: 2017-05-26T12:48:08.061Z\n */\n\nmodule.exports =\n/******/ (function(modules) { // webpackBootstrap\n/******/     // The module cache\n/******/     var installedModules = {};\n/******/\n/******/     // The require function\n/******/     function __webpack_require__(moduleId) {\n/******/\n/******/         // Check if module is in cache\n/******/         if(installedModules[moduleId]) {\n/******/             return installedModules[moduleId].exports;\n/******/         }\n/******/         // Create a new module (and put it into the cache)\n/******/         var module = installedModules[moduleId] = {\n/******/             i: moduleId,\n/******/             l: false,\n/******/             exports: {}\n/******/         };\n/******/\n/******/         // Execute the module function\n/******/         modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/         // Flag the module as loaded\n/******/         module.l = true;\n/******/\n/******/         // Return the exports of the module\n/******/         return module.exports;\n/******/     }\n/******/\n/******/\n/******/     // expose the modules object (__webpack_modules__)\n/******/     __webpack_require__.m = modules;\n/******/\n/******/     // expose the module cache\n/******/     __webpack_require__.c = installedModules;\n/******/\n/******/     // identity function for calling harmony imports with the correct context\n/******/     __webpack_require__.i = function(value) { return value; };\n/******/\n/******/     // define getter function for harmony exports\n/******/     __webpack_require__.d = function(exports, name, getter) {\n/******/         if(!__webpack_require__.o(exports, name)) {\n/******/             Object.defineProperty(exports, name, {\n/******/                 configurable: false,\n/******/                 enumerable: true,\n/******/                 get: getter\n/******/             });\n/******/         }\n/******/     };\n/******/\n/******/     // getDefaultExport function for compatibility with non-harmony modules\n/******/     __webpack_require__.n = function(module) {\n/******/         var getter = module && module.__esModule ?\n/******/             function getDefault() { return module['default']; } :\n/******/             function getModuleExports() { return module; };\n/******/         __webpack_require__.d(getter, 'a', getter);\n/******/         return getter;\n/******/     };\n/******/\n/******/     // Object.prototype.hasOwnProperty.call\n/******/     __webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/     // __webpack_public_path__\n/******/     __webpack_require__.p = \"\";\n/******/\n/******/     // Load entry module and return exports\n/******/     return __webpack_require__(__webpack_require__.s = 33);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(__webpack_require__(16));\n__export(__webpack_require__(15));\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports) {\n\nmodule.exports = require(\"path\");\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(__webpack_require__(3));\n__export(__webpack_require__(18));\n__export(__webpack_require__(4));\n\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst fs = __webpack_require__(22);\nexports.fs = fs;\nconst glob = __webpack_require__(23);\nexports.glob = glob;\nconst hogan = __webpack_require__(29);\nexports.hogan = hogan;\nconst _l = __webpack_require__(30);\nconst _s = __webpack_require__(31);\nconst which = __webpack_require__(27);\nexports.which = which;\nconst uuid = __webpack_require__(26);\nexports.uuid = uuid;\nconst chalk = __webpack_require__(20);\nexports.chalk = chalk;\nconst semverRegex = __webpack_require__(25);\nexports.semverRegex = semverRegex;\nconst cli_spinner_1 = __webpack_require__(21);\nexports.Spinner = cli_spinner_1.Spinner;\nconst $ = (() => {\n    const _window = (() => {\n        const jsdom = __webpack_require__(24);\n        if (\"function\" === typeof jsdom.JSDOM) {\n            return new jsdom.JSDOM().window;\n        }\n        else {\n            return jsdom.jsdom().defaultView;\n        }\n    })();\n    // patch scope:\n    ((root) => {\n        /*\n         * jsdom 9.4.0 - 9.12.0 に実装されている DOMParser は XML の serialize ができないため,\n         * xmldom に置き換える\n         * jsdom 10.1.0 まで動かないことを確認\n         */\n        const xmldom = __webpack_require__(28);\n        root.DOMParser = xmldom.DOMParser;\n        // xmldom には dom.toString() が実装されているが、global にも export する\n        global.XMLSerializer = root.XMLSerializer = xmldom.XMLSerializer;\n    })(_window);\n    return __webpack_require__(32)(_window);\n})();\nexports.$ = $;\nconst _m = _l.mixin(_s.exports());\nexports._ = _m;\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst path = __webpack_require__(1);\nconst libs_1 = __webpack_require__(3);\nlet _settings = {\n    force: false,\n    verbose: false,\n    silent: false,\n    lang: \"en-US\",\n};\nlet _libPath; // cdp-lib の存在している path\n///////////////////////////////////////////////////////////////////////\n// exports methods:\n/**\n * 設定取得\n *\n * @return {IGlobalSettings} options ログに使用するオプション\n */\nfunction getSettings() {\n    return libs_1.$.extend({}, _settings);\n}\nexports.getSettings = getSettings;\n/**\n * 設定指定\n *\n * @param {IGlobalSettings} options ログに使用するオプション\n */\nfunction setSettings(settings) {\n    if (settings) {\n        _settings.force = settings.force || _settings.force;\n        _settings.verbose = settings.verbose || _settings.verbose;\n        _settings.silent = settings.silent || _settings.silent;\n        _settings.targetDir = settings.targetDir || _settings.targetDir;\n        _settings.lang = settings.lang || _settings.lang;\n    }\n    else {\n        _settings = {\n            force: false,\n            verbose: false,\n            silent: false,\n            lang: \"en-US\",\n        };\n    }\n}\nexports.setSettings = setSettings;\n/**\n * \"cdp-lib\" が存在するパスを取得\n *\n * @return {String} cdp-lib への path\n */\nfunction getLibPath() {\n    if (null == _libPath) {\n        const TRY_COUNT = 3;\n        let tried = 0;\n        _libPath = __dirname;\n        while (true) {\n            if (TRY_COUNT <= tried) {\n                throw Error(\"lib path is not resolved.\");\n            }\n            _libPath = path.join(_libPath, \"..\");\n            const check = path.join(_libPath, \"cdp-lib\");\n            if (libs_1.fs.pathExistsSync(check)) {\n                _libPath = check;\n                break;\n            }\n            tried++;\n        }\n    }\n    return _libPath;\n}\nexports.getLibPath = getLibPath;\n/**\n * 指定された targetDir を取得\n *\n * @return {String} targetDir への path\n */\nfunction getTargetDir() {\n    return _settings.targetDir;\n}\nexports.getTargetDir = getTargetDir;\n/**\n * ログ出力\n * console.log() と同等\n *\n * @param {String} message        出力メッセージ\n * @param {Any[]}  optionalParams 付加情報\n */\nfunction log(message, ...optionalParams) {\n    if (!_settings.silent) {\n        if (0 < optionalParams.length) {\n            console.log(message, optionalParams);\n        }\n        else {\n            console.log(message);\n        }\n    }\n}\nexports.log = log;\n/**\n * 詳細ログ出力\n * console.debug() と同等\n *\n * @param {String} message        出力メッセージ\n * @param {Any[]}  optionalParams 付加情報\n */\nfunction debug(message, ...optionalParams) {\n    if (!_settings.silent && _settings.verbose) {\n        if (0 < optionalParams.length) {\n            console.error(\"DEBUG: \" + message, optionalParams);\n        }\n        else {\n            console.error(\"DEBUG: \" + message);\n        }\n    }\n}\nexports.debug = debug;\n/**\n * 検証\n * console.assert() と同等\n *\n * @param {Boolean} test           検証する式\n * @param {String}  message        出力メッセージ\n * @param {Any[]}   optionalParams 付加情報\n */\nfunction assert(test, message, ...optionalParams) {\n    if (!test) {\n        if (_settings.force) {\n            if (0 < optionalParams.length) {\n                console.warn(message, optionalParams);\n            }\n            else {\n                console.warn(message);\n            }\n        }\n        else {\n            if (0 < optionalParams.length) {\n                console.error(message, optionalParams);\n            }\n            else {\n                console.error(message);\n            }\n            process.exit(1);\n        }\n    }\n}\nexports.assert = assert;\nlet _lang;\n/**\n * ローカライズ\n *\n * @param {String} key キー文字列\n * @return 翻訳された文字列\n */\nfunction translate(key) {\n    if (!_lang) {\n        try {\n            _lang = JSON.parse(libs_1.fs.readFileSync(path.join(getLibPath(), \"res/locales\", \"messages.\" + _settings.lang + \".json\"), \"utf8\").toString());\n        }\n        catch (error) {\n            throw Error(\"Language resource JSON parse error: \" + error.message);\n        }\n    }\n    let resouce = libs_1.$.extend({}, _lang);\n    const props = key.split(\".\");\n    while (0 < props.length) {\n        const prop = props.shift();\n        if (resouce[prop]) {\n            resouce = resouce[prop];\n        }\n        else {\n            assert(false, \"resouce not found. key: \" + key);\n            return null;\n        }\n    }\n    return resouce;\n}\nexports.translate = translate;\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/* tslint:disable:no-unused-variable no-unused-vars */\n/* eslint-disable no-unused-vars */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst base_1 = __webpack_require__(0);\n/**\n * @class GeneratorElectron\n * @brief Desktop Electron 用 Generator クラス\n */\nclass GeneratorElectron extends base_1.GeneratorBase {\n    ///////////////////////////////////////////////////////////////////////\n    // imprementes: GeneratorBase\n    /**\n     * 既定の directory 構造を返却\n     */\n    defaultBaseStructure() {\n        return {\n            src: \"app\",\n            pkg: \"www/app\",\n            built: \"app\",\n            doc: \"docs\",\n            task: \"tasks\",\n            test: \"tests\",\n            types: \"@types\",\n            srcConfig: {\n                script: \"scripts\",\n                stylesheet: \"stylesheets\",\n                template: \"templates\",\n            },\n        };\n    }\n    /**\n     * create action entry\n     * @param {IDesktopAppConfigration} config コンフィグ設定\n     */\n    create() {\n        return __awaiter(this, void 0, void 0, function* () {\n            // TODO:\n            return Promise.reject(\"under construction.\");\n        });\n    }\n    /**\n     * 必要とする task script 一覧を返却. action: create のときに呼ばれる\n     */\n    get taskList() {\n        return [\n            \"banner.js\",\n            \"clean.js\",\n            \"srcmap.js\",\n            \"build-ts-clean.js\",\n            \"build-ts-normalize.js\",\n        ];\n    }\n    ///////////////////////////////////////////////////////////////////////\n    // private methods:\n    /**\n     * configration にアクセス\n     */\n    get config() {\n        return this._config;\n    }\n}\nexports.GeneratorElectron = GeneratorElectron;\n\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst generator_electoron_1 = __webpack_require__(5);\n__export(__webpack_require__(5));\n/**\n * generator 生成関数\n */\nfunction newGeneratorDesktop(config) {\n    return new generator_electoron_1.GeneratorElectron(config);\n}\nexports.newGeneratorDesktop = newGeneratorDesktop;\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/* tslint:disable:no-unused-variable no-unused-vars */\n/* eslint-disable no-unused-vars */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst path = __webpack_require__(1);\nconst os = __webpack_require__(13);\nconst base_1 = __webpack_require__(0);\nconst fs = base_1.Utils.fs;\nconst glob = base_1.Utils.glob;\nconst $ = base_1.Utils.$;\nconst _ = base_1.Utils._;\nconst debug = base_1.Utils.debug;\nconst templatePath = base_1.Utils.templatePath;\nconst copyTpl = base_1.Utils.copyTpl;\n/**\n * @class GeneratorModule\n * @brief Library Module 用 Generator クラス\n */\nclass GeneratorModule extends base_1.GeneratorBase {\n    ///////////////////////////////////////////////////////////////////////\n    // imprementes: GeneratorBase\n    /**\n     * 既定の directory 構造を返却\n     */\n    defaultBaseStructure() {\n        return {\n            src: \"src\",\n            pkg: \"dist\",\n            built: \"built\",\n            doc: \"docs\",\n            task: \"tasks\",\n            test: \"tests\",\n            types: \"@types\",\n            temp: \".temp\",\n        };\n    }\n    /**\n     * create action entry\n     * @param {ILibraryConfigration} config コンフィグ設定\n     */\n    create() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.ensureModuleProps();\n            yield this.createDirectoryStructure();\n            yield this.createProjectSettings();\n            yield this.createSourceTemplate();\n            yield this.createVisualStudioSolution();\n        });\n    }\n    /**\n     * 必要とする task script 一覧を返却. action: create のときに呼ばれる\n     */\n    get taskList() {\n        return [\n            \"banner.js\",\n            \"clean.js\",\n            \"srcmap.js\",\n            \"bundle-finalizer.js\",\n            \"remap-coverage.js\",\n        ];\n    }\n    ///////////////////////////////////////////////////////////////////////\n    // protected methods:\n    /**\n     * 開発時の依存モジュールリストの取得\n     * 必要に応じてオーバーライド\n     *\n     * @return {IDependency}\n     */\n    get defaultDevDependencies() {\n        const depends = super.defaultDevDependencies.concat([\n            { name: \"@types/jasmine\", version: undefined, },\n        ]);\n        let extra = [];\n        if (this.config.nodejs) {\n            extra.push({ name: \"jasmine-node\", version: \"^2.0.0\", });\n        }\n        else {\n            extra.push({ name: \"requirejs\", version: \"^2.0.0\", });\n        }\n        if (this.isEnableTool(\"testem\")) {\n            extra.push({ name: \"testem\", version: undefined, });\n        }\n        if (this.isEnableTool(\"phantomjs-prebuilt\")) {\n            extra.push({ name: \"phantomjs-prebuilt\", version: undefined, });\n        }\n        return _.sortBy(depends.concat(extra), (depend) => depend.name);\n    }\n    ///////////////////////////////////////////////////////////////////////\n    // private methods:\n    /**\n     * configration にアクセス\n     */\n    get config() {\n        return this._config;\n    }\n    /**\n     * module 名, main ファイル名の保証\n     * - 1: moduleName が指定されている場合は使用する\n     * - 2: projectName が使用可能な場合はそれを使用する\n     * - 3: projectName が使用不可の場合は、\"-\" つなぎ文字列を生成する\n     */\n    ensureModuleProps() {\n        // module name\n        if (null == this.config.moduleName) {\n            if (!/^.*[(\\\\|\\s|/|:|\\*|?|\\\"|<|>|\\|)].*$/.test(this.config.projectName)) {\n                this.config.moduleName = this.config.projectName;\n            }\n            else {\n                this.config.moduleName = _.trim(_.dasherize(this.config.projectName), \"-\");\n            }\n        }\n        debug(\"moduleName: \" + this.config.moduleName);\n        // main file name\n        if (null == this.config.mainBaseName) {\n            this.config.mainBaseName = this.config.moduleName;\n        }\n        debug(\"mainBaseName: \" + this.config.mainBaseName);\n    }\n    /**\n     * ディレクトリ構成情報のコピー\n     */\n    createDirectoryStructure() {\n        this.copyTplDir(\"library/structure\");\n    }\n    /**\n     * プロジェクト設定ファイルの作成\n     */\n    createProjectSettings() {\n        return __awaiter(this, void 0, void 0, function* () {\n            // project.config.js\n            copyTpl(path.join(templatePath(\"library\"), \"_project.config.js\"), path.join(this.rootDir, \"project.config.js\"), this._config, { delimiters: \"<% %>\" });\n            // tsconfig\n            if (!this.config.outputSameDir) {\n                // main tsconfig.json\n                copyTpl(path.join(templatePath(\"library\"), \"_tsconfig.json\"), path.join(this.rootDir, \"tsconfig.json\"), this._config, { delimiters: \"<% %>\", bom: false, });\n                // test tsconfig.json\n                copyTpl(path.join(templatePath(\"library\"), \"_tsconfig.test.json\"), path.join(this.rootDir, this._config.structureConfig.test, \"unit\", \"tsconfig.json\"), this._config, { delimiters: \"<% %>\", bom: false, });\n            }\n            else {\n                // main tsconfig.json\n                copyTpl(path.join(templatePath(\"library\"), \"_tsconfig.output-same-dir.json\"), path.join(this.rootDir, \"tsconfig.json\"), this._config, { delimiters: \"<% %>\", bom: false, });\n            }\n            // eslintrc.json\n            copyTpl(path.join(templatePath(\"library\"), \"_eslintrc.json\"), path.join(this.rootDir, this._config.structureConfig.test, \"eslint\", \"eslintrc.json\"), this.queryEsLintEnvParam(), { delimiters: \"<% %>\", bom: false, });\n            // testem\n            if (!this.config.nodejs) {\n                copyTpl(path.join(templatePath(\"base/tools/testem\"), \"_testem.json\"), path.join(this.rootDir, this._config.structureConfig.test, \"runner\", \"testem.json\"), this._config, { delimiters: \"<% %>\", bom: false, });\n                const testemStuffPath = templatePath(\"base/tools/testem/files\");\n                glob.sync(\"**\", {\n                    cwd: testemStuffPath,\n                    nodir: true,\n                })\n                    .forEach((file) => {\n                    fs.copySync(path.join(testemStuffPath, file), path.join(this.rootDir, this._config.structureConfig.test, \"runner\", file));\n                });\n            }\n            // .gitignore\n            copyTpl(path.join(templatePath(\"library\"), \".gitignore\"), path.join(this.rootDir, \".gitignore\"), this._config, { bom: false, });\n            // README.md\n            copyTpl(path.join(templatePath(\"library\"), \"_README.md\"), path.join(this.rootDir, \"README.md\"), this._config, { delimiters: \"<% %>\" });\n            // package.json\n            this.config.devDependencies = yield this.queryDependenciesParam(this.config.devDependencies || this.defaultDevDependencies);\n            copyTpl(path.join(templatePath(\"library\"), \"_package.json\"), path.join(this.rootDir, \"package.json\"), this._config, { delimiters: \"<% %>\", bom: false, });\n        });\n    }\n    /**\n     * ソースの雛形作成\n     */\n    createSourceTemplate() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const _module = path.basename(this._config.moduleName, \".js\");\n            const param = {\n                sampleClass: _.classify(_module),\n                sampleModule: _module,\n                built: this._config.structureConfig.built,\n            };\n            const script = (() => {\n                if (this._config.structureConfig.srcConfig) {\n                    return this._config.structureConfig.srcConfig.script || \"\";\n                }\n                return \"\";\n            })();\n            // index.ts\n            copyTpl(path.join(templatePath(\"library\"), \"src\", \"_index.ts\"), path.join(this.rootDir, this._config.structureConfig.src, script, _module + \".ts\"), param, { delimiters: \"<% %>\" });\n            // index.spec.ts\n            copyTpl(path.join(templatePath(\"library\"), \"src\", \"_index.spec.ts\"), path.join(this.rootDir, this._config.structureConfig.test, \"unit\", _module + \".spec.ts\"), param, { delimiters: \"<% %>\" });\n        });\n    }\n    /**\n     * Visual Studio のソリューションファイル作成\n     */\n    createVisualStudioSolution() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const vsParam = (() => {\n                const createGUID = base_1.Utils.createGUID;\n                const param = $.extend({}, this._config.structureConfig);\n                param.projectName = this._config.projectName;\n                param.projectGUID = createGUID();\n                param.types = param.types.replace(\"@\", \"%40\"); // escape \"@\" to \"%40\"\n                param.mainBaseName = this._config.mainBaseName;\n                param.license = !this._config.private;\n                // tools\n                param.webpack = this.isEnableTool(\"webpack\");\n                param.testem = !this.config.nodejs;\n                param.outputSameDir = this.config.outputSameDir;\n                // setup built js group\n                param.jsGroup = [];\n                if (!param.outputSameDir) {\n                    param.jsGroup.push({\n                        relativePath: param.built + \"\\\\\",\n                        fileName: param.mainBaseName,\n                        dependee: true,\n                        d_ts: true,\n                        map: true,\n                        min_map: false,\n                    });\n                }\n                if (this.config.minify) {\n                    // setup pkg group\n                    param.jsGroup.push({\n                        relativePath: param.pkg + \"\\\\\",\n                        fileName: param.mainBaseName,\n                        dependee: false,\n                        d_ts: false,\n                        map: false,\n                        min_map: true,\n                    });\n                }\n                // setup test js group\n                param.tsGroup = [\n                    {\n                        relativePath: param.test + \"\\\\unit\\\\\",\n                        fileName: param.mainBaseName + \".spec\",\n                        dependee: true,\n                        map: this.config.outputSameDir,\n                    },\n                ];\n                if (param.outputSameDir) {\n                    param.tsGroup.push({\n                        relativePath: param.built + \"\\\\\",\n                        fileName: param.mainBaseName,\n                        dependee: false,\n                        map: true,\n                    });\n                }\n                return param;\n            })();\n            // .sln\n            copyTpl(path.join(templatePath(\"base/visual.studio\"), \"_solution.sln.tpl\"), path.join(this.rootDir, vsParam.projectName + \".sln\"), vsParam, { delimiters: \"<% %>\" });\n            // .csproj\n            const createProj = (() => {\n                const toXmlString = (file) => {\n                    const hogan = base_1.Utils.hogan;\n                    const normalizeText = base_1.Utils.normalizeText;\n                    const options = {\n                        eol: os.EOL,\n                        bom: true,\n                        delimiters: \"{{ }}\",\n                    };\n                    const tpl = path.join(templatePath(\"base/visual.studio\"), file);\n                    const jst = hogan.compile(normalizeText(fs.readFileSync(tpl).toString(), { eol: \"\\n\", bom: false }), options);\n                    return jst.render(vsParam);\n                };\n                const toXmlDOM = (file) => {\n                    return $($.parseXML(toXmlString(file)));\n                };\n                const toXmlNode = (file) => {\n                    return base_1.Utils.str2XmlNode(toXmlString(file));\n                };\n                const $proj = toXmlDOM(\"_project.csproj.tpl\");\n                const $gpTS = toXmlNode(\"_ts.item.group.tpl\");\n                const $gpJS = toXmlNode(\"_js.item.group.tpl\");\n                $proj\n                    .find(\"ItemGroup\")\n                    .last()\n                    .after($gpTS)\n                    .after($gpJS);\n                const formatXML = base_1.Utils.formatXML;\n                const dstPath = path.join(this.rootDir, vsParam.projectName + \".csproj\");\n                debug(base_1.Utils.xmlNode2Str($proj));\n                fs.writeFileSync(dstPath, formatXML(base_1.Utils.xmlNode2Str($proj)));\n            })();\n        });\n    }\n}\nexports.GeneratorModule = GeneratorModule;\n\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst generator_module_1 = __webpack_require__(7);\n__export(__webpack_require__(7));\n/**\n * generator 生成関数\n */\nfunction newGeneratorLibrary(config) {\n    return new generator_module_1.GeneratorModule(config);\n}\nexports.newGeneratorLibrary = newGeneratorLibrary;\n\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/* tslint:disable:no-unused-variable no-unused-vars */\n/* eslint-disable no-unused-vars */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst base_1 = __webpack_require__(0);\n/**\n * @class GeneratorCordova\n * @brief Mobile Cordova 用 Generator クラス\n */\nclass GeneratorCordova extends base_1.GeneratorBase {\n    ///////////////////////////////////////////////////////////////////////\n    // imprementes: GeneratorBase\n    /**\n     * 既定の directory 構造を返却\n     */\n    defaultBaseStructure() {\n        return {\n            src: \"app\",\n            pkg: \"www\",\n            built: \"app\",\n            doc: \"docs\",\n            task: \"tasks\",\n            test: \"tests\",\n            types: \"@types\",\n        };\n    }\n    /**\n     * create action entry\n     * @param {ILibraryConfigration} config コンフィグ設定\n     */\n    create() {\n        return __awaiter(this, void 0, void 0, function* () {\n            // TODO:\n            return Promise.reject(\"under construction.\");\n        });\n    }\n    /**\n     * 必要とする task script 一覧を返却. action: create のときに呼ばれる\n     */\n    get taskList() {\n        return [\n            \"banner.js\",\n            \"clean.js\",\n            \"srcmap.js\",\n            \"build-ts-clean.js\",\n            \"build-ts-normalize.js\",\n        ];\n    }\n    ///////////////////////////////////////////////////////////////////////\n    // private methods:\n    /**\n     * configration にアクセス\n     */\n    get config() {\n        return this._config;\n    }\n}\nexports.GeneratorCordova = GeneratorCordova;\n\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst generator_cordova_1 = __webpack_require__(9);\n__export(__webpack_require__(9));\n/**\n * generator 生成関数\n */\nfunction newGeneratorMobile(config) {\n    return new generator_cordova_1.GeneratorCordova(config);\n}\nexports.newGeneratorMobile = newGeneratorMobile;\n\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/* tslint:disable:no-unused-variable no-unused-vars */\n/* eslint-disable no-unused-vars */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst base_1 = __webpack_require__(0);\n/**\n * @class GeneratorBrowser\n * @brief Web Browser 用 Generator クラス\n */\nclass GeneratorBrowser extends base_1.GeneratorBase {\n    ///////////////////////////////////////////////////////////////////////\n    // imprementes: GeneratorBase\n    /**\n     * 既定の directory 構造を返却\n     */\n    defaultBaseStructure() {\n        return {\n            src: \"app\",\n            pkg: \"www\",\n            built: \"app\",\n            doc: \"docs\",\n            task: \"tasks\",\n            test: \"tests\",\n            types: \"@types\",\n        };\n    }\n    /**\n     * create action entry\n     * @param {ILibraryConfigration} config コンフィグ設定\n     */\n    create() {\n        return __awaiter(this, void 0, void 0, function* () {\n            // TODO:\n            return Promise.reject(\"under construction.\");\n        });\n    }\n    /**\n     * 必要とする task script 一覧を返却. action: create のときに呼ばれる\n     */\n    get taskList() {\n        return [\n            \"banner.js\",\n            \"clean.js\",\n            \"srcmap.js\",\n            \"build-ts-clean.js\",\n            \"build-ts-normalize.js\",\n        ];\n    }\n    ///////////////////////////////////////////////////////////////////////\n    // private methods:\n    /**\n     * configration にアクセス\n     */\n    get config() {\n        return this._config;\n    }\n}\nexports.GeneratorBrowser = GeneratorBrowser;\n\n\n/***/ }),\n/* 12 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst generator_browser_1 = __webpack_require__(11);\n__export(__webpack_require__(11));\n/**\n * generator 生成関数\n */\nfunction newGeneratorWeb(config) {\n    return new generator_browser_1.GeneratorBrowser(config);\n}\nexports.newGeneratorWeb = newGeneratorWeb;\n\n\n/***/ }),\n/* 13 */\n/***/ (function(module, exports) {\n\nmodule.exports = require(\"os\");\n\n/***/ }),\n/* 14 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Utils = __webpack_require__(2);\nexports.Utils = Utils;\nconst generators_1 = __webpack_require__(17);\n//___________________________________________________________________________________________________________________//\n/**\n * @class CDPLib\n * @brief CDP boilerplate 生成機能を提供するクラス\n */\nclass CDPLib {\n    ///////////////////////////////////////////////////////////////////////\n    // pubic methods:\n    /**\n     * main command\n     */\n    static execute(config) {\n        Utils.setSettings(config.settings);\n        return generators_1.newGenerator(config).run();\n    }\n}\nexports.default = CDPLib;\n\n\n/***/ }),\n/* 15 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst path = __webpack_require__(1);\nconst utils_1 = __webpack_require__(2);\n/**\n * @class GeneratorBase\n * @brief すべての Generator の既定クラス\n */\nclass GeneratorBase {\n    /**\n     * constructor\n     *\n     * @param {IProjectConfigration} config コンフィグ\n     */\n    constructor(_config) {\n        this._config = _config;\n        this._projectRootDir = utils_1.getTargetDir() ?\n            utils_1.getTargetDir() :\n            path.join(process.cwd(), this._config.projectName);\n        this._config.structureConfig = utils_1.$.extend({}, this.defaultBaseStructure(), this._config.structureConfig);\n        this._config.private = \"NONE\" === this._config.license;\n        this._config.outputSameDir\n            = this._config.structureConfig.src === this._config.structureConfig.built;\n        this._config.nodejs = ((env) => {\n            switch (env) {\n                case \"node\":\n                case \"electron\":\n                    return true;\n                default:\n                    return false;\n            }\n        })(this._config.env);\n        utils_1.debug(JSON.stringify(this._config, null, 4));\n    }\n    ///////////////////////////////////////////////////////////////////////\n    // pubic methods:\n    /**\n     * 処理開始 (エントリ)\n     *\n     */\n    run() {\n        switch (this._config.action) {\n            case \"create\":\n                return this.runCreate();\n            default:\n                return Promise.reject(\"unknown action: \" + this._config.action);\n        }\n    }\n    ///////////////////////////////////////////////////////////////////////\n    // protected methods:\n    /**\n     * 進捗テキストを通知\n     *\n     * @param {String} key ローカライズリソースキーを指定\n     */\n    progress(key) {\n        utils_1.log(utils_1.chalk.cyan(utils_1.translate(key)));\n    }\n    /**\n     * work directory の変更\n     *\n     * @param {String} directory target directory.\n     */\n    chdir(directory) {\n        process.chdir(directory);\n    }\n    /**\n     * project root directory の取得\n     *\n     * @param {String} directory target directory.\n     */\n    get rootDir() {\n        return this._projectRootDir;\n    }\n    /**\n     * template directory を指定して配下のファイルをコピー\n     * IBaseStructureConfigration の設定が反映される\n     *\n     * @param {String} target  ターゲットを指定. null の場合は、templates を返却\n     * @param {String} dstRoot コピー先を指定. 指定が無い場合は rootDir が設定\n     */\n    copyTplDir(target, dstRoot, options) {\n        dstRoot = dstRoot || this.rootDir;\n        options = utils_1.$.extend({\n            cwd: utils_1.templatePath(target),\n            nodir: true,\n            dot: true,\n        }, options);\n        utils_1.glob.sync(\"**\", options)\n            .forEach((file) => {\n            const dst = path.join(dstRoot, file\n                .replace(/src/, this._config.structureConfig.src)\n                .replace(/pkg/, this._config.structureConfig.pkg)\n                .replace(/built/, this._config.structureConfig.built)\n                .replace(/doc/, this._config.structureConfig.doc)\n                .replace(/task/, this._config.structureConfig.task)\n                .replace(/test/, this._config.structureConfig.test)\n                .replace(/types/, this._config.structureConfig.types)\n                .replace(/temp/, this._config.structureConfig.temp));\n            utils_1.fs.copySync(path.join(utils_1.templatePath(target), file), dst);\n        });\n    }\n    /**\n     * node module の version 取得\n     *\n     * @param {Promise<string>} version text\n     */\n    queryNodeModuleLatestVersion(name) {\n        return new Promise((resolve, reject) => {\n            let version;\n            utils_1.execCommand(\"npm\", [\"info\", name, \"version\"], {\n                stdio: \"pipe\",\n                spinner: null,\n                stdout: (data) => {\n                    version = utils_1._.trim(data);\n                },\n            })\n                .then(() => {\n                resolve(version);\n            })\n                .catch((reason) => {\n                reject(reason);\n            });\n        });\n    }\n    /**\n     * 既定の開発時の依存モジュールリストの取得\n     * 必要に応じてオーバーライド\n     *\n     * @return {IDependency}\n     */\n    get defaultDevDependencies() {\n        const base = [\n            { name: \"convert-source-map\", version: undefined, },\n            { name: \"del\", version: undefined, },\n            { name: \"dts-bundle\", version: undefined, },\n            { name: \"eslint\", version: undefined, },\n            { name: \"npm-run-all\", version: undefined, },\n            { name: \"plato\", version: undefined, },\n            { name: \"source-map\", version: undefined, },\n            { name: \"source-map-loader\", version: undefined, },\n            { name: \"tslint\", version: undefined, },\n            { name: \"typedoc\", version: undefined, },\n            { name: \"typescript\", version: undefined, },\n            { name: \"typescript-formatter\", version: undefined, },\n        ];\n        const minify = [\n            { name: \"uglify-js\", version: undefined, es: [\"es5\"], },\n            { name: \"uglify-es\", version: undefined, es: [\"es2015\"], },\n        ];\n        let extra = [];\n        if (this._config.minify) {\n            extra = extra.concat(minify);\n        }\n        if (this.isEnableTool(\"webpack\")) {\n            extra.push({ name: \"webpack\", version: undefined, });\n        }\n        if (this.isEnableTool(\"nyc\")) {\n            extra.push({ name: \"nyc\", version: undefined, });\n        }\n        return utils_1._.sortBy(base.concat(extra), (depend) => depend.name);\n    }\n    /**\n     * dependencies の template paramaeter を取得\n     *\n     * @param  {IDependency[]} dependencies 依存関係リスト\n     * @return {{ name: string; version: string; last?: boolean; }[]} テンプレートパラメータに指定する配列\n     */\n    queryDependenciesParam(dependencies) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.progress(\"base.create.queryVersion\");\n            const depends = dependencies\n                .filter((depend) => {\n                if (null == depend.es) {\n                    return true;\n                }\n                else {\n                    return !!depend.es.find((esVersion) => {\n                        return this._config.es === esVersion;\n                    });\n                }\n            });\n            utils_1.debug(JSON.stringify(depends, null, 4));\n            const progress = (context) => {\n                if (\"string\" === typeof context && !this._config.settings.silent) {\n                    const spinner = utils_1.getSpinner(utils_1.chalk.yellow(context), 5);\n                    spinner.start();\n                    return spinner;\n                }\n                else if (context) {\n                    context.stop(true);\n                }\n            };\n            for (let i = 0, n = depends.length; i < n; i++) {\n                if (null == depends[i].version) {\n                    const spinner = progress(depends[i].name);\n                    depends[i].version = \"^\" + (yield this.queryNodeModuleLatestVersion(depends[i].name));\n                    progress(spinner);\n                }\n                if (i === n - 1) {\n                    depends[i].last = true;\n                }\n            }\n            return depends;\n        });\n    }\n    /**\n     * webpack.config.js の template paramaeter を取得\n     *\n     * @return {String} libraryTarget に指定する文字列\n     */\n    queryWebpackLibraryTarget() {\n        switch (this._config.module) {\n            case \"commonjs\":\n                return \"commonjs2\";\n            case \"amd\":\n                return \"amd\";\n            case \"umd\":\n                return \"umd\";\n            default:\n                return undefined;\n        }\n    }\n    /**\n     * eslintrc の env に指定する template paramaeter を取得\n     *\n     * @return {Object} env に指定するテンプレートパラメータオブジェクト\n     */\n    queryEsLintEnvParam() {\n        const compileSetting = this._config;\n        return {\n            es6: \"es5\" !== compileSetting.es,\n            node: \"web\" !== compileSetting.env,\n        };\n    }\n    /**\n     * IBuildTargetConfigration.tools プロパティの指定状況を取得\n     *\n     * @param  {String}  name ツール名を指定\n     * @return {Boolean} true: 指定されている / false: 指定されていない\n     */\n    isEnableTool(name) {\n        return !!this._config.tools.find((tool) => name === tool);\n    }\n    ///////////////////////////////////////////////////////////////////////\n    // private methods:\n    /**\n     * create 処理のエントリ\n     */\n    runCreate() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.createBase();\n            yield this.create();\n        });\n    }\n    //___________________________________________________________________________________________________________________//\n    /**\n     * 共通の create 処理\n     */\n    createBase() {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.progress(\"base.create.foundation\");\n            yield this.createProjectDir();\n            yield this.copyBaseStructure();\n            yield this.copyCommonFiles();\n            yield this.copyTaskScripts();\n        });\n    }\n    /**\n     * プロジェクトディレクトリの作成\n     */\n    createProjectDir() {\n        if (utils_1.fs.existsSync(this.rootDir)) {\n            throw Error(utils_1.translate(\"base.create.error.alreadyExist\"));\n        }\n        utils_1.fs.mkdirsSync(this.rootDir);\n    }\n    /**\n     * 共通構成情報のコピー\n     */\n    copyBaseStructure() {\n        this.copyTplDir(\"base/structure\");\n    }\n    /**\n     * 基本ファイルのコピー\n     * template のコピーも行う\n     */\n    copyCommonFiles() {\n        const srcDir = utils_1.templatePath(\"base\");\n        const dstDir = this.rootDir;\n        // .npmignore\n        utils_1.copyTpl(path.join(srcDir, \".npmignore\"), path.join(dstDir, \".npmignore\"), this._config.structureConfig);\n        // BANNER\n        utils_1.fs.copySync(path.join(srcDir, \"_BANNER\"), path.join(dstDir, \"BANNER\"));\n        // LICENSE\n        switch (this._config.license) {\n            case \"Apache-2.0\":\n                utils_1.fs.copySync(path.join(srcDir, \"_LICENSE.Apache-2.0\"), path.join(dstDir, \"LICENSE\"));\n                break;\n            case \"MIT\":\n                utils_1.copyTpl(path.join(srcDir, \"_LICENSE.MIT\"), path.join(dstDir, \"LICENSE\"), this._config.copyright);\n                break;\n            default:\n                break;\n        }\n        // NOTICE\n        utils_1.fs.copySync(path.join(srcDir, \"_NOTICE\"), path.join(dstDir, \"NOTICE\"));\n        // build tools: webpack\n        if (this.isEnableTool(\"webpack\")) {\n            const param = {\n                nodejs: this._config.nodejs,\n                guide: true,\n                taskPath: this._config.structureConfig.task,\n            };\n            utils_1.copyTpl(path.join(srcDir, \"tools/webpack/_webpack.config.js\"), path.join(dstDir, \"webpack.config.js\"), param, { delimiters: \"<% %>\" });\n        }\n    }\n    /**\n     * task script のコピー\n     */\n    copyTaskScripts() {\n        const srcDir = utils_1.templatePath(\"base/task\");\n        const dstDir = path.join(this.rootDir, this._config.structureConfig.task);\n        this.taskList.forEach((task) => {\n            utils_1.fs.copySync(path.join(srcDir, task), path.join(dstDir, task));\n        });\n    }\n}\nexports.GeneratorBase = GeneratorBase;\n\n\n/***/ }),\n/* 16 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Utils = __webpack_require__(2);\nexports.Utils = Utils;\n\n\n/***/ }),\n/* 17 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst settings_1 = __webpack_require__(4);\nconst library_1 = __webpack_require__(8);\nconst mobile_1 = __webpack_require__(10);\nconst desktop_1 = __webpack_require__(6);\nconst web_1 = __webpack_require__(12);\n__export(__webpack_require__(0));\n__export(__webpack_require__(8));\n__export(__webpack_require__(10));\n__export(__webpack_require__(6));\n__export(__webpack_require__(12));\n/**\n * generator 生成関数\n */\nfunction newGenerator(config) {\n    switch (config.projectType) {\n        case \"library\":\n            return library_1.newGeneratorLibrary(config);\n        case \"mobile\":\n            return mobile_1.newGeneratorMobile(config);\n        case \"desktop\":\n            return desktop_1.newGeneratorDesktop(config);\n        case \"web\":\n            return web_1.newGeneratorWeb(config);\n        default:\n            settings_1.assert(false, \"unsupported project kind: \" + config.projectType);\n            return null;\n    }\n}\nexports.newGenerator = newGenerator;\n\n\n/***/ }),\n/* 18 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst path = __webpack_require__(1);\nconst os = __webpack_require__(13);\nconst child_process_1 = __webpack_require__(19);\nconst libs_1 = __webpack_require__(3);\nconst settings_1 = __webpack_require__(4);\n///////////////////////////////////////////////////////////////////////\n// exports methods:\n/**\n * Handle command line error and kill process.\n * When the application received error from cli, please call this method.\n *\n * @param {String} error  error information.\n */\nfunction handleError(error) {\n    settings_1.assert(false, error);\n}\nexports.handleError = handleError;\n//___________________________________________________________________________________________________________________//\n/**\n * \"templates\" ディレクトリからのパスを取得.\n *\n * @param  {String} target ターゲットを指定. null の場合は、templates を返却\n * @return {String} templates/hogehoge\n */\nfunction templatePath(target) {\n    if (null == target) {\n        return path.join(settings_1.getLibPath(), \"templates\");\n    }\n    else {\n        return path.join(settings_1.getLibPath(), \"templates\", target);\n    }\n}\nexports.templatePath = templatePath;\n//___________________________________________________________________________________________________________________//\n/**\n * Get spinner instance.\n * CLI helper.\n *\n * @param  {String}  [format]  spinner format string.\n * @param  {Number}  [index]   spinner index defined by cli-spinner. (default: random [0-29])\n * @return {Spinner} cli-spinner instance.\n */\nfunction getSpinner(format, index) {\n    const spinners = [\n        \"|/-\\\\\",\n        \"┤┘┴└├┌┬┐\",\n        \"◢◣◤◥\",\n        \"▌▀▐▄\",\n        \"▉▊▋▌▍▎▏▎▍▌▋▊▉\",\n        \"▁▃▄▅▆▇█▇▆▅▄▃\",\n        \"☱☲☴\",\n        \".oO@*\",\n        \"◐◓◑◒\",\n        ////\n        \"◡◡ ⊙⊙ ◠◠\",\n        \"■□▪▫\",\n        \"←↖↑↗→↘↓↙\",\n        \".oO°Oo.\",\n    ];\n    const fmt = format || \"%s\";\n    const spinner = new libs_1.Spinner(fmt);\n    const idx = (null != index && 0 <= index && index < 14) ? index : Math.floor(Math.random() * 10);\n    spinner.setSpinnerString(spinners[idx]);\n    return spinner;\n}\nexports.getSpinner = getSpinner;\n/**\n * Normalize text line-feed.\n * for windows git user.\n *\n * @param  {String}               text      input text.\n * @param  {NormalizeTextOptions} [options] option.\n * @return {String} normalized text.\n */\nfunction normalizeText(text, options) {\n    const opt = libs_1.$.extend({}, {\n        eol: os.EOL,\n        bom: true,\n    }, options);\n    text = text\n        .replace(/^\\ufeff/gm, \"\") // remove bom\n        .replace(/\\r\\n/gm, \"\\n\") // once \"\\n\"\n        .replace(/\\r/gm, \"\\n\");\n    if (opt.bom) {\n        text = \"\\ufeff\" + text;\n    }\n    if (\"\\n\" !== opt.eol) {\n        text = text.replace(/\\n/gm, opt.eol);\n    }\n    if (opt.tab) {\n        const spaces = (() => {\n            let s = \"\";\n            for (let i = 0; i < opt.tab; i++) {\n                s += \" \";\n            }\n            return s;\n        })();\n        text = text.replace(/\\t/gm, spaces);\n    }\n    return text;\n}\nexports.normalizeText = normalizeText;\n/**\n * Execute command line by spawn.\n * call spawn. if error occured, cui is killed proccess.\n *\n * @param   {String}               command    main command. ex) \"cordova\"\n * @param   {String[]}             args       command args. ex) [\"plugin\", \"add\", pluginName]\n * @param   {ExecCommandOptions}   [options]  cli-spinner\"s options.\n * @returns {Number} error code\n */\nfunction execCommand(command, args, options) {\n    return new Promise((resolve, reject) => {\n        const opt = libs_1.$.extend({}, {\n            stdio: \"inherit\",\n            spinner: { format: \"%s\" },\n            stdout: (data) => { },\n            stderr: (data) => { },\n        }, options);\n        libs_1.which(command, (error, resolvedCommand) => {\n            if (error) {\n                handleError(JSON.stringify(error));\n            }\n            const spinner = opt.spinner ? getSpinner(opt.spinner.format, opt.spinner.index) : null;\n            if (spinner) {\n                spinner.start();\n            }\n            const child = child_process_1.spawn(resolvedCommand, args, opt)\n                .on(\"error\", handleError)\n                .on(\"close\", (code) => {\n                if (spinner) {\n                    spinner.stop(true);\n                }\n                resolve(code);\n            });\n            if (\"pipe\" === opt.stdio) {\n                child.stdout.on(\"data\", (data) => {\n                    opt.stdout(data.toString());\n                });\n                child.stderr.on(\"data\", (data) => {\n                    opt.stderr(data.toString());\n                });\n            }\n        });\n    });\n}\nexports.execCommand = execCommand;\n/**\n * Copy template with hogan.\n * sync function\n *\n * @param {String}               src       source file path.\n * @param {String}               dst       destination file path.\n * @param {Object}               params    template parameters.\n * @param {CopyTemplateOptions}  [options] options object.\n */\nfunction copyTpl(src, dst, params, options) {\n    const opt = libs_1.$.extend({}, {\n        eol: os.EOL,\n        bom: true,\n        delimiters: \"{{ }}\",\n    }, options);\n    const jst = libs_1.hogan.compile(normalizeText(libs_1.fs.readFileSync(src).toString(), { eol: \"\\n\", bom: false }), opt);\n    const output = normalizeText(jst.render(params), opt);\n    libs_1.fs.ensureFileSync(dst);\n    libs_1.fs.writeFileSync(dst, output, \"utf8\");\n}\nexports.copyTpl = copyTpl;\n//___________________________________________________________________________________________________________________//\n/**\n * GUID generate.\n * returned as Windows registry type format.\n *\n * @return {String}\n */\nfunction createGUID() {\n    return \"{\" + libs_1.uuid.v4().toUpperCase() + \"}\";\n}\nexports.createGUID = createGUID;\n//___________________________________________________________________________________________________________________//\n/**\n * Create XML DOM node.\n *\n * @param  {String} str  string xml format. ex) '<preference name=\"DisallowOverscroll\" value=\"true\"/>'\n * @return {jQuery} XML Node instance\n */\nfunction str2XmlNode(str) {\n    return libs_1.$(libs_1.$.parseXML(str)).children();\n}\nexports.str2XmlNode = str2XmlNode;\n/**\n * Create XML string from DOM node.\n *\n * @param  {String} str  string xml format. ex) '<preference name=\"DisallowOverscroll\" value=\"true\"/>'\n * @return {jQuery} XML Node instance\n */\nfunction xmlNode2Str($xml) {\n    /* eslint-disable no-undef */\n    return new XMLSerializer().serializeToString($xml[0]);\n    /* eslint-enable no-undef */\n}\nexports.xmlNode2Str = xmlNode2Str;\n/**\n * XML formatter.\n *\n * @param  {String}           str       string xml format. ex) '<preference name=\"DisallowOverscroll\" value=\"true\"/>'\n * @param  {FormatXmlOptions} [options] options object.\n * @return {String} formatted XML\n */\nfunction formatXML(str, options) {\n    const opt = libs_1.$.extend({}, {\n        eol: os.EOL,\n        bom: true,\n        step: 2,\n    }, options);\n    let xml = \"\";\n    let pad = 0;\n    let indent;\n    let node;\n    const strArr = normalizeText(str, { eol: \"\\n\" })\n        .replace(/(>)(<)(\\/*)/g, \"$1\\n$2$3\") // insert LF to each node once.\n        .split(\"\\n\");\n    const spaces = (len) => {\n        let s = \"\";\n        const _indent = len * opt.step;\n        for (let i = 0; i < _indent; i++) {\n            s += \" \";\n        }\n        return s;\n    };\n    for (let i = 0; i < strArr.length; i++) {\n        indent = 0;\n        node = libs_1.$.trim(strArr[i]);\n        if (node.match(/.+<\\/\\w[^>]*>$/)) {\n            indent = 0;\n        }\n        else if (node.match(/^<\\/\\w/)) {\n            if (pad > 0) {\n                pad -= 1;\n            }\n        }\n        else if (node.match(/^<\\w[^>]*[^\\/]>.*$/)) {\n            indent = 1;\n        }\n        else {\n            indent = 0;\n        }\n        xml += spaces(pad) + node + opt.eol;\n        pad += indent;\n    }\n    xml = xml.replace(/\\n\\n/gm, \"\\n\");\n    return normalizeText(xml, opt);\n}\nexports.formatXML = formatXML;\n\n\n/***/ }),\n/* 19 */\n/***/ (function(module, exports) {\n\nmodule.exports = require(\"child_process\");\n\n/***/ }),\n/* 20 */\n/***/ (function(module, exports) {\n\nmodule.exports = require(\"chalk\");\n\n/***/ }),\n/* 21 */\n/***/ (function(module, exports) {\n\nmodule.exports = require(\"cli-spinner\");\n\n/***/ }),\n/* 22 */\n/***/ (function(module, exports) {\n\nmodule.exports = require(\"fs-extra\");\n\n/***/ }),\n/* 23 */\n/***/ (function(module, exports) {\n\nmodule.exports = require(\"glob\");\n\n/***/ }),\n/* 24 */\n/***/ (function(module, exports) {\n\nmodule.exports = require(\"jsdom\");\n\n/***/ }),\n/* 25 */\n/***/ (function(module, exports) {\n\nmodule.exports = require(\"semver-regex\");\n\n/***/ }),\n/* 26 */\n/***/ (function(module, exports) {\n\nmodule.exports = require(\"uuid\");\n\n/***/ }),\n/* 27 */\n/***/ (function(module, exports) {\n\nmodule.exports = require(\"which\");\n\n/***/ }),\n/* 28 */\n/***/ (function(module, exports) {\n\nmodule.exports = require(\"xmldom\");\n\n/***/ }),\n/* 29 */\n/***/ (function(module, exports) {\n\nmodule.exports = require(\"hogan.js\");\n\n/***/ }),\n/* 30 */\n/***/ (function(module, exports) {\n\nmodule.exports = require(\"lodash\");\n\n/***/ }),\n/* 31 */\n/***/ (function(module, exports) {\n\nmodule.exports = require(\"underscore.string\");\n\n/***/ }),\n/* 32 */\n/***/ (function(module, exports) {\n\nmodule.exports = require(\"jquery\");\n\n/***/ }),\n/* 33 */\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(14);\n\n\n/***/ })\n/******/ ]);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,"]}