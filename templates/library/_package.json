{
  "name": "<% projectName %>",
  "version": "<% version %>",
  <%# private %>
  "private": true,
  <%/ private %>
  "description": "",
  "author": "",
  "main": "<% structureConfig.pkg %>/<% mainBaseName %><%# minify %>.min<%/ minify %>.js",
  "types": "<% structureConfig.pkg %>/<% structureConfig.types %>/<% projectName %>/index.d.ts",
  "scripts": {
    "test": "run-s -l clean compile lint unit-test",
    "ci": "run-s -l clean build lint unit-test metrics document",
    "deploy": "run-s ci clean:deploy",
    "update": "npm update --save-dev && npm update --save && npm run deploy",
    "depends": "npm list --depth=1",
    "depends:prod": "npm list --depth=0 --only=prod",
    "depends:dev": "npm list --depth=0 --only=dev",
    <%# nodejs %>
    "debug": "node --inspect --debug-brk ./node_modules/jasmine-node/bin/jasmine-node <% structureConfig.test %>/unit/",
    "debug:inspect": "node-debug ./node_modules/jasmine-node/bin/jasmine-node <% structureConfig.test %>/unit/",
    <%/ nodejs %>
    "debug": "testem -f ./<% structureConfig.test %>/runner/testem-amd.js",
    <%^ nodejs %>
    <%/ nodejs %>
    "clean": "node ./<% structureConfig.task %>/clean.js",
    "clean:temp": "node ./<% structureConfig.task %>/clean.js --temp",
    "clean:coverage": "node ./<% structureConfig.task %>/clean.js --coverage",
    "clean:typedoc": "node ./<% structureConfig.task %>/clean.js --typedoc",
    "clean:test": "node ./<% structureConfig.task %>/clean.js --test",
    "clean:built": "node ./<% structureConfig.task %>/clean.js --built",
    "clean:pkg": "node ./<% structureConfig.task %>/clean.js --pkg",
    "clean:deploy": "node ./<% structureConfig.task %>/clean.js --built --test --temp",
    "build": "node ./<% structureConfig.task %>/clean.js --built --test && run-p build:*",
    "build:ts": "run-s -l compile:ts bundle:ts <%# minify %> minify:ts<%/ minify %>",
    "compile": "node ./<% structureConfig.task %>/clean.js --built --test && run-p compile:*",
    "compile:ts": "run-s compile:ts:* ",
    "compile:ts:src": "tsc -p ./tsconfig.json",
    <%^ outputSameDir %>
    "compile:ts:test": "tsc -p ./<% structureConfig.test %>/unit/tsconfig.json",
    <%/ outputSameDir %>
    "bundle": "run-p bundle:* ",
    "bundle:ts": "webpack --config ./webpack.config.js && node ./<% structureConfig.task %>/bundle-finalizer.js",
    <%# minify %>
    "minify": "run-p minify:*",
    "minify:ts": "uglifyjs <% structureConfig.pkg %>/<% mainBaseName %>.js -o <% structureConfig.pkg %>/<% mainBaseName %>.min.js --comments /^!/ --source-map includeSources,url=<% mainBaseName %>.min.js.map",
    <%/ minify %>
    "lint": "run-p -l lint:*",
    "lint:js": "eslint <% structureConfig.task %>/**/*.js <% structureConfig.built %>/**/*.js -c <% structureConfig.test %>/eslint/eslintrc.json",
    "lint:ts": "tslint --type-check -p ./tsconfig.json -c ./<% structureConfig.test %>/tslint/tslint.json '<% structureConfig.src %>/**/*.ts,!<% structureConfig.src %>/**/*.d.ts'",
    "unit-test": "npm run coverage:exec",
    <%# nodejs %>
    "unit-test:ci": "node ./node_modules/jasmine-node/bin/jasmine-node <% structureConfig.test %>/unit/",
    <%/ nodejs %>
    <%^ nodejs %>
    "unit-test:ci": "testem ci -f ./<% structureConfig.test %>/runner/testem-ci.js",
    <%/ nodejs %>
    "coverage": "run-s clean:coverage compile:ts coverage:exec",
    <%# nodejs %>
    "coverage:exec": "nyc --reporter=html --reporter=text --report-dir=<% structureConfig.doc %>/reports/coverage --temp-directory=./<% structureConfig.temp %> -n=<% structureConfig.built %>/** ./node_modules/jasmine-node/bin/jasmine-node <% structureConfig.test %>/unit/",
    <%/ nodejs %>
    <%^ nodejs %>
    "coverage:exec": "run-s clean:temp coverage:instrument unit-test:ci coverage:remap coverage:report",
    "coverage:instrument": "nyc instrument ./<% structureConfig.built %> ./<% structureConfig.built %> --source-map=false",
    "coverage:remap": "node ./<% structureConfig.task %>/remap-coverage.js",
    "coverage:report": "nyc report --reporter=lcov --reporter=html --reporter=text --report-dir=<% structureConfig.doc %>/reports/coverage --temp-directory=./<% structureConfig.temp %>",
    <%/ nodejs %>
    "document": "typedoc --out <% structureConfig.doc %>/typedoc/ <% structureConfig.src %>/",
    "metrics": "plato -r -d <% structureConfig.doc %>/reports/metrics -e ./<% structureConfig.test %>/eslint/eslintrc.json <% structureConfig.built %>/**/*.js"
  },
  <%# license %>
  "license": "<% license %>",
  <%/ license %>
  "dependencies": {
  },
  "devDependencies": {
    <%# devDependencies %>
    "<% name %>": "<% version %>"<%^ last %>,<%/ last %>
    <%/ devDependencies %>
  }
}
